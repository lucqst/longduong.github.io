(undo-tree-save-format-version . 1)
"7ac8429020aa1b96fa30dfff2f0448dcda811cc2"
[nil nil nil nil (26347 5338 431260 791000) 0 nil]
([nil nil ((nil rear-nonsticky nil 505 . 506) (nil fontified nil 1 . 506) (1 . 506) (t 26347 5338 440365 634000)) nil (26347 5374 451658 248000) 0 nil])
([nil nil ((35 . 36) (#("1" 0 1 (wrap-prefix "  " face markdown-metadata-value-face markdown-metadata-value (18 44 18 23 23 26 26 44 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 105) fontified t)) . -35) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 36) nil (26347 5374 451656 725000) 0 nil])
([nil nil ((#("Color" 0 5 (face markdown-metadata-value-face markdown-metadata-value (18 44 18 23 23 26 26 44 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 105) wrap-prefix "  " fontified t)) . 38)) nil (26347 5374 451653 809000) 0 nil])
([nil nil ((38 . 49) (#("f" 0 1 (face markdown-metadata-value-face markdown-metadata-value (18 40 18 23 23 26 26 40 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 101) wrap-prefix "  " fontified t)) . -38) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("R" 0 1 (face markdown-metadata-value-face markdown-metadata-value (18 41 18 23 23 26 26 41 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 102) wrap-prefix "  " fontified t)) . -39) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 40 (38 . 40)) nil (26347 5374 451652 557000) 0 nil])
([nil nil ((67 . 69) (#("0" 0 1 (face markdown-metadata-value-face markdown-metadata-value (51 83 51 55 55 59 59 83 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 110) wrap-prefix "  " fontified t)) . -67) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("9" 0 1 (face markdown-metadata-value-face markdown-metadata-value (51 84 51 55 55 59 59 84 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 111) wrap-prefix "  " fontified t)) . -68) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 69 (68 . 69) (#("1" 0 1 (face markdown-metadata-value-face markdown-metadata-value (51 84 51 55 55 59 59 84 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 111) wrap-prefix "  " fontified t)) . -68) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 69) nil (26347 5374 451630 525000) 0 nil])
([nil nil ((68 . 69) (#("9" 0 1 (face markdown-metadata-value-face markdown-metadata-value (51 84 51 55 55 59 59 84 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 111) wrap-prefix "  " fontified t)) . -68) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 69) nil (26347 5374 451612 381000) 0 nil])
([nil nil ((#("In this project, we'll explore multiple strategies for aligning multiple monochrome captures of an image into a single color image. There are 2 main strategies employed: naive search and image pyramid. For bells and whistles, an *automatic edge cropper* as well as a *feature-based image metric* were implemented. 

" 0 229 (fontified t wrap-prefix "  ") 229 230 (fontified t face (markdown-markup-face) invisible markdown-markup wrap-prefix "  ") 230 252 (fontified t face (markdown-italic-face) wrap-prefix "  ") 252 253 (fontified t face (markdown-markup-face) invisible markdown-markup wrap-prefix "  ") 253 267 (fontified t wrap-prefix "  ") 267 268 (fontified t face (markdown-markup-face) invisible markdown-markup wrap-prefix "  ") 268 294 (fontified t face (markdown-italic-face) wrap-prefix "  ") 294 295 (fontified t face (markdown-markup-face) invisible markdown-markup wrap-prefix "  ") 295 315 (fontified t wrap-prefix "  ") 315 316 (fontified t wrap-prefix "  ")) . 196) (undo-tree-id42 . -316) (undo-tree-id43 . -315) (undo-tree-id44 . -17) (undo-tree-id45 . -315) (undo-tree-id46 . -17) (undo-tree-id47 . -316) (undo-tree-id48 . -315) (undo-tree-id49 . -316) (undo-tree-id50 . -316) (undo-tree-id51 . -316) (undo-tree-id52 . -316) (undo-tree-id53 . -316) (undo-tree-id54 . -316) (undo-tree-id55 . -316) (undo-tree-id56 . -316) (undo-tree-id57 . -316) (undo-tree-id58 . -316) (undo-tree-id59 . -316) (undo-tree-id60 . -316) (undo-tree-id61 . -316) (undo-tree-id62 . -316) (undo-tree-id63 . -316) (undo-tree-id64 . -316) (undo-tree-id65 . -316) (undo-tree-id66 . -316) (undo-tree-id67 . -316) (undo-tree-id68 . -315) (undo-tree-id69 . -316) (undo-tree-id70 . -315) (t 26347 5374 473739 134000)) nil (26347 5379 620602 606000) 0 nil])
([nil nil ((196 . 198) (t 26347 5379 632791 976000)) nil (26347 5439 31422 818000) 0 nil])
([nil nil ((198 . 199)) nil (26347 5439 31415 544000) 0 nil])
([nil nil ((71 . 72) (#("6" 0 1 (face markdown-metadata-value-face markdown-metadata-value (51 84 51 55 55 59 59 84 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 111) wrap-prefix "  " fontified t)) . -71) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 72 (t 26347 5439 41400 475000)) nil (26347 5741 717954 765000) 0 nil])
([nil nil ((71 . 72) (#("1" 0 1 (face markdown-metadata-value-face markdown-metadata-value (51 84 51 55 55 59 59 84 #<buffer 2024-09-18-project2.markdown>) markdown-yaml-metadata-section (5 111) wrap-prefix "  " fontified t)) . -71) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 72) nil (26347 5741 717944 666000) 0 nil])
([nil nil ((#("Hi
" 0 2 (fontified t wrap-prefix "  ") 2 3 (fontified t wrap-prefix "  ")) . 196) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (t 26347 5741 728500 785000)) nil (26347 25282 814051 509000) 0 nil])
([nil nil ((240 . 252) (219 . 240) (218 . 219) (199 . 218) (#(" " 0 1 (font-lock-multiline t face markdown-header-delimiter-face markdown-heading-1-atx (196 200 nil nil nil nil nil nil 196 198 198 199 199 200 #<buffer 2024-09-18-project2.markdown>) markdown-heading (196 200 nil nil nil nil nil nil 196 198 198 199 199 200 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . -199) (undo-tree-id273 . -1) 200 (197 . 200) (#("#" 0 1 (fontified t wrap-prefix "  ")) . -197) (undo-tree-id274 . -1) 198 (196 . 198)) nil (26347 25282 814009 89000) 0 nil])
([nil nil ((253 . 254) (252 . 253) 251) nil (26347 25282 814007 957000) 0 nil])
([nil nil ((#("When" 0 4 (wrap-prefix "  " fontified t)) . -254) (undo-tree-id267 . -4) 258 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -258) (undo-tree-id268 . -1) 259 (258 . 259) (#("," 0 1 (wrap-prefix "  " fontified t)) . -258) (undo-tree-id269 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -259) (undo-tree-id270 . -1) 260 (258 . 260) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -258) (undo-tree-id271 . -1) (#("," 0 1 (wrap-prefix "  " fontified t)) . -259) (undo-tree-id272 . -1) 260 (254 . 260)) nil (26347 25282 814006 494000) 0 nil])
([nil nil ((316 . 324) (296 . 316) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -296) (undo-tree-id257 . -1) 297 (291 . 297) (#("_" 0 1 (face (markdown-markup-face) invisible markdown-markup font-lock-multiline t wrap-prefix "  " fontified t)) . -291) (undo-tree-id258 . -1) 292 (290 . 292) (#("D" 0 1 (wrap-prefix "  " fontified t)) . -290) (undo-tree-id259 . -1) 291 (280 . 291) (#("Dx" 0 2 (wrap-prefix "  " fontified t)) . -280) (undo-tree-id260 . -2) 282 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -282) (undo-tree-id261 . -1) 283 (#("and" 0 3 (wrap-prefix "  " fontified t)) . -283) (undo-tree-id262 . -3) 286 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -286) (undo-tree-id263 . -1) 287 (269 . 287) (#("m" 0 1 (wrap-prefix "  " fontified t)) . -269) (undo-tree-id264 . -1) 270 (269 . 270) (#("C" 0 1 (wrap-prefix "  " fontified t)) . -269) (undo-tree-id265 . -1) 270 (259 . 270) (#("v" 0 1 (wrap-prefix "  " fontified t)) . -259) (undo-tree-id266 . -1) 260 (254 . 260)) nil (26347 25282 814001 915000) 0 nil])
([nil nil ((324 . 325) 323) nil (26347 25282 813998 329000) 0 nil])
([nil nil ((nil rear-nonsticky nil 325 . 326) (#("
" 0 1 (fontified nil wrap-prefix "  " face (markdown-table-face) font-lock-multiline t)) . -362) (325 . 363)) nil (26347 25282 813997 858000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 325) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1)) nil (26347 25282 813996 926000) 0 nil])
([nil nil ((325 . 326)) nil (26347 25282 813989 492000) 0 nil])
([nil nil ((#("L2 on color value |" 0 19 (face (markdown-table-face) fontified t wrap-prefix "  ")) . 328) (undo-tree-id243 . -18) (undo-tree-id244 . -18) (undo-tree-id245 . -18) (undo-tree-id246 . -3) (undo-tree-id247 . -6) (undo-tree-id248 . -3) (undo-tree-id249 . -12) (undo-tree-id250 . -6) (undo-tree-id251 . -18) (undo-tree-id252 . -12) (undo-tree-id253 . -18) 346) nil (26347 25282 813988 119000) 0 nil])
([nil nil ((328 . 330)) nil (26347 25282 813984 883000) 0 nil])
([nil nil ((330 . 332)) nil (26347 25282 813984 543000) 0 nil])
([nil nil ((#("L2 on gradient" 0 13 (face (markdown-table-face) fontified t wrap-prefix "  ") 13 14 (font-lock-multiline t face (markdown-table-face) fontified t wrap-prefix "  ")) . 333) (undo-tree-id242 . -14)) nil (26347 25282 813983 701000) 0 nil])
([nil nil ((333 . 335) (#("y" 0 1 (font-lock-multiline t face (markdown-table-face) fontified t wrap-prefix "  ")) . -333) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) 334 (333 . 334)) nil (26347 25282 813981 938000) 0 nil])
([nil nil ((350 . 362) (#("| ---| ---|" 0 1 (face (markdown-table-face) fontified nil wrap-prefix "  ") 1 2 (face (markdown-table-face) fontified nil wrap-prefix "  ") 2 3 (face (markdown-table-face) fontified nil wrap-prefix "  ") 3 4 (face (markdown-table-face) fontified nil wrap-prefix "  ") 4 5 (face (markdown-table-face) fontified nil wrap-prefix "  ") 5 6 (face (markdown-table-face) fontified nil wrap-prefix "  ") 6 7 (face (markdown-table-face) fontified nil wrap-prefix "  ") 7 8 (face (markdown-table-face) fontified nil wrap-prefix "  ") 8 9 (face (markdown-table-face) fontified nil wrap-prefix "  ") 9 10 (face (markdown-table-face) fontified nil wrap-prefix "  ") 10 11 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 350) (undo-tree-id215 . -11) (undo-tree-id216 . -1) (undo-tree-id217 . -2) (undo-tree-id218 . -1) (undo-tree-id219 . -3) (undo-tree-id220 . -2) (undo-tree-id221 . -4) (undo-tree-id222 . -3) (undo-tree-id223 . -5) (undo-tree-id224 . -4) (undo-tree-id225 . -6) (undo-tree-id226 . -5) (undo-tree-id227 . -7) (undo-tree-id228 . -6) (undo-tree-id229 . -8) (undo-tree-id230 . -7) (undo-tree-id231 . -9) (undo-tree-id232 . -8) (undo-tree-id233 . -10) (undo-tree-id234 . -9) (undo-tree-id235 . -11) (undo-tree-id236 . -10) (undo-tree-id237 . -11) (undo-tree-id238 . -11) (338 . 350) 349 (338 . 349) (337 . 338) (335 . 337)) nil (26347 25282 813979 894000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -353) (353 . 354) (#("]" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified nil)) . -353) (353 . 354) (351 . 354)) nil (26347 25282 813947 502000) 0 nil])
([nil nil ((353 . 355)) nil (26347 25282 813947 62000) 0 nil])
([nil nil ((#("|![dx]()    |    |
" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified nil) 1 2 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 2 3 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 3 5 (help-echo "" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  " fontified nil) 5 6 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 6 7 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 7 8 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 8 18 (face (markdown-table-face) wrap-prefix "  " fontified nil) 18 19 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 377) (undo-tree-id104 . 14) (undo-tree-id105 . 19) (undo-tree-id106 . -8) (undo-tree-id107 . -19) (undo-tree-id108 . -19) (undo-tree-id109 . -19) (undo-tree-id110 . -19) (undo-tree-id111 . -19) (undo-tree-id112 . -19) (undo-tree-id113 . -19) (undo-tree-id114 . -19) (undo-tree-id115 . -19) (undo-tree-id116 . -19) (undo-tree-id117 . -19) (undo-tree-id118 . -19) (undo-tree-id119 . -19) (undo-tree-id120 . -19) (undo-tree-id121 . -19) (undo-tree-id122 . -19) (undo-tree-id123 . -19) (undo-tree-id124 . -19) (undo-tree-id125 . -19) (undo-tree-id126 . -19) (undo-tree-id127 . -19) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -19) (undo-tree-id132 . -19) (undo-tree-id133 . -19) (undo-tree-id134 . -19) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -2) (undo-tree-id145 . -1) (undo-tree-id146 . -3) (undo-tree-id147 . -2) (undo-tree-id148 . -6) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -4) (undo-tree-id161 . -3) (undo-tree-id162 . -5) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -5) (undo-tree-id171 . -4) (undo-tree-id172 . -6) (undo-tree-id173 . -5) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -7) (undo-tree-id177 . -6) (undo-tree-id178 . -8) (undo-tree-id179 . -7) (undo-tree-id180 . -8) (undo-tree-id181 . -19) (360 . 377) (#("|----|----|
" 0 11 (face (markdown-table-face) wrap-prefix "  " fontified nil) 11 12 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 360) (undo-tree-id182 . 12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -12) (undo-tree-id189 . -12) (undo-tree-id190 . -12) (undo-tree-id191 . -12) (undo-tree-id192 . -12) (undo-tree-id193 . -12) (undo-tree-id194 . -12) (undo-tree-id195 . -12) (undo-tree-id196 . -12) (undo-tree-id197 . -12) (undo-tree-id198 . -12) (undo-tree-id199 . -12) (undo-tree-id200 . -12) (343 . 360) (#("| dx | dy |
" 0 6 (face (markdown-table-face) fontified nil wrap-prefix "  ") 6 7 (face (markdown-table-face) fontified nil wrap-prefix "  ") 7 8 (face (markdown-table-face) fontified nil wrap-prefix "  ") 8 9 (face (markdown-table-face) fontified nil wrap-prefix "  ") 9 10 (face (markdown-table-face) fontified nil wrap-prefix "  ") 10 11 (face (markdown-table-face) fontified nil wrap-prefix "  ") 11 12 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 343) (undo-tree-id201 . -2) (undo-tree-id202 . -7) (undo-tree-id203 . -2) (undo-tree-id204 . 6) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -7) (326 . 343) 358 (#(")" 0 1 (fontified nil)) . -357) (357 . 358) (#(")" 0 1 (fontified nil)) . -357) (357 . 358) (356 . 358)) nil (26347 25282 813944 497000) 0 nil])
([nil nil ((378 . 382) (370 . 378) (369 . 371) (368 . 370)) nil (26347 25282 813851 641000) 0 nil])
([nil nil ((402 . 404) (398 . 402) (#("o" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -398) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("u" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -399) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 400 (396 . 400) (#("e" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -396) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 397 (384 . 397)) nil (26347 25282 813846 271000) 0 nil])
([nil nil ((328 . 329) (t 26347 25282 823034 429000)) nil (26347 25352 558062 549000) 0 nil])
([nil nil ((331 . 332)) nil (26347 25352 558062 229000) 0 nil])
([nil nil ((340 . 341)) nil (26347 25352 558061 828000) 0 nil])
([nil nil ((343 . 344)) nil (26347 25352 558061 527000) 0 nil])
([nil nil ((343 . 344) (#("#" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified t)) . -343) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) 344) nil (26347 25352 558060 966000) 0 nil])
([nil nil ((nil rear-nonsticky nil 456 . 457) (nil fontified nil 413 . 457) (413 . 457) 412) nil (26347 25358 77012 875000) 0 nil])
([nil nil ((450 . 451) (#("x" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified t wrap-prefix "  ")) . -450) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) 451) nil (26347 25361 669828 936000) 0 nil] [nil nil ((608 . 702) (#("| ![dx]({{site.baseurl}}/assets/proj2/dx.png) |  ![dx]({{site.baseurl}}/assets/proj2/dx.png)   |
" 0 2 (face (markdown-table-face) fontified nil wrap-prefix "  ") 2 3 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 3 4 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 4 6 (help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil wrap-prefix "  ") 6 7 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 7 8 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 8 9 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil wrap-prefix "  ") 9 23 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil wrap-prefix "  ") 23 44 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil wrap-prefix "  ") 44 45 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 45 49 (face (markdown-table-face) fontified nil wrap-prefix "  ") 49 50 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 50 51 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 51 53 (help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil wrap-prefix "  ") 53 54 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 54 55 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 55 91 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil wrap-prefix "  ") 91 92 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 92 93 (face (markdown-table-face) fontified nil wrap-prefix "  ") 93 96 (face (markdown-table-face) fontified nil wrap-prefix "  ") 96 97 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 608) (undo-tree-id612 . -49) (undo-tree-id613 . -49) (undo-tree-id614 . -92) (undo-tree-id615 . 97) (undo-tree-id616 . -2) (undo-tree-id617 . 51) (undo-tree-id618 . -2) (undo-tree-id619 . -45) (undo-tree-id620 . -43) (undo-tree-id621 . -43) (undo-tree-id622 . -43) (undo-tree-id623 . -43) (undo-tree-id624 . -43) (undo-tree-id625 . -43) (undo-tree-id626 . -43) (undo-tree-id627 . -43) (undo-tree-id628 . -43) (undo-tree-id629 . -93) (undo-tree-id630 . -43) (undo-tree-id631 . -43) (undo-tree-id632 . -97) (undo-tree-id633 . -97) (undo-tree-id634 . -97) (undo-tree-id635 . -97) (undo-tree-id636 . -97) (undo-tree-id637 . -97) (undo-tree-id638 . -97) (undo-tree-id639 . -97) (undo-tree-id640 . -97) (undo-tree-id641 . -97) (undo-tree-id642 . -97) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -2) (undo-tree-id646 . -2) (undo-tree-id647 . -2) (undo-tree-id648 . -2) (undo-tree-id649 . -2) (undo-tree-id650 . -4) (undo-tree-id651 . -2) (undo-tree-id652 . -6) (undo-tree-id653 . -4) (undo-tree-id654 . -10) (undo-tree-id655 . -6) (undo-tree-id656 . -14) (undo-tree-id657 . -10) (undo-tree-id658 . -15) (undo-tree-id659 . -14) (undo-tree-id660 . -22) (undo-tree-id661 . -15) (undo-tree-id662 . -25) (undo-tree-id663 . -22) (undo-tree-id664 . -31) (undo-tree-id665 . -25) (undo-tree-id666 . -32) (undo-tree-id667 . -31) (undo-tree-id668 . -37) (undo-tree-id669 . -32) (undo-tree-id670 . -38) (undo-tree-id671 . -37) (undo-tree-id672 . -40) (undo-tree-id673 . -38) (undo-tree-id674 . -41) (undo-tree-id675 . -40) (undo-tree-id676 . -44) (undo-tree-id677 . -41) (undo-tree-id678 . -45) (undo-tree-id679 . -44) (undo-tree-id680 . -2) (undo-tree-id681 . -45) (undo-tree-id682 . -2) (undo-tree-id683 . -2) (undo-tree-id684 . -95) (undo-tree-id685 . -2) (undo-tree-id686 . -94) (undo-tree-id687 . -95) (undo-tree-id688 . -49) (undo-tree-id689 . -94) (undo-tree-id690 . -48) (undo-tree-id691 . -49) (undo-tree-id692 . -45) (undo-tree-id693 . -49) (undo-tree-id694 . -93) (undo-tree-id695 . -92) (undo-tree-id696 . -48) (undo-tree-id697 . -92) (undo-tree-id698 . -92) (undo-tree-id699 . -92) (undo-tree-id700 . -92) (undo-tree-id701 . -92) (undo-tree-id702 . -92) (undo-tree-id703 . -92) (undo-tree-id704 . -92) (undo-tree-id705 . -93) (undo-tree-id706 . -92) (undo-tree-id707 . -93) (undo-tree-id708 . -93) (undo-tree-id709 . -93) (undo-tree-id710 . -97) (514 . 608) (#("|---------|----|
" 0 16 (face (markdown-table-face) fontified nil wrap-prefix "  ") 16 17 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 514) (undo-tree-id711 . 17) (undo-tree-id712 . -17) (undo-tree-id713 . -17) (undo-tree-id714 . -17) (undo-tree-id715 . -17) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -15) (undo-tree-id719 . -15) (undo-tree-id720 . -14) (undo-tree-id721 . -14) (undo-tree-id722 . -17) (undo-tree-id723 . -17) (undo-tree-id724 . -17) (undo-tree-id725 . -17) (420 . 514) (#("| $dx$      | $dy$ |
" 0 20 (face (markdown-table-face) fontified nil wrap-prefix "  ") 20 21 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 420) (undo-tree-id726 . 3) (undo-tree-id727 . -21) (undo-tree-id728 . -21) (undo-tree-id729 . -1) (undo-tree-id730 . -2) (undo-tree-id731 . -1) (undo-tree-id732 . -2) (undo-tree-id733 . -2) (undo-tree-id734 . -2) (undo-tree-id735 . -2) (undo-tree-id736 . -3) (undo-tree-id737 . -2) (undo-tree-id738 . -3) (undo-tree-id739 . -2) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -2) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -3) (undo-tree-id746 . -2) (undo-tree-id747 . -4) (undo-tree-id748 . -3) (undo-tree-id749 . -5) (undo-tree-id750 . -4) (undo-tree-id751 . -5) (undo-tree-id752 . -5) (undo-tree-id753 . -6) (undo-tree-id754 . -5) (undo-tree-id755 . -5) (undo-tree-id756 . -5) (undo-tree-id757 . -5) (undo-tree-id758 . -5) (undo-tree-id759 . -5) (undo-tree-id760 . -5) (undo-tree-id761 . -12) (undo-tree-id762 . -5) (undo-tree-id763 . -14) (undo-tree-id764 . -12) (undo-tree-id765 . -19) (undo-tree-id766 . -14) (undo-tree-id767 . -14) (undo-tree-id768 . -19) (undo-tree-id769 . -14) (undo-tree-id770 . -14) (undo-tree-id771 . -14) (undo-tree-id772 . -14) (undo-tree-id773 . -15) (undo-tree-id774 . -14) (undo-tree-id775 . -14) (undo-tree-id776 . -14) (undo-tree-id777 . -14) (undo-tree-id778 . -14) (undo-tree-id779 . -14) (undo-tree-id780 . -14) (undo-tree-id781 . -19) (undo-tree-id782 . -14) (undo-tree-id783 . -17) (undo-tree-id784 . -19) (undo-tree-id785 . -17) (undo-tree-id786 . -17) (undo-tree-id787 . -17) (undo-tree-id788 . -17) (undo-tree-id789 . -17) (undo-tree-id790 . -17) (undo-tree-id791 . -17) (undo-tree-id792 . -17) (undo-tree-id793 . -17) (undo-tree-id794 . -17) (undo-tree-id795 . -17) (undo-tree-id796 . -17) (undo-tree-id797 . -17) (undo-tree-id798 . -17) (undo-tree-id799 . -17) (undo-tree-id800 . -17) (undo-tree-id801 . -17) (undo-tree-id802 . -17) (undo-tree-id803 . -18) (undo-tree-id804 . -17) (undo-tree-id805 . -17) (undo-tree-id806 . -17) (undo-tree-id807 . -17) (undo-tree-id808 . -17) (undo-tree-id809 . -17) (undo-tree-id810 . -17) (undo-tree-id811 . -17) (undo-tree-id812 . -21) (undo-tree-id813 . -19) (undo-tree-id814 . -21) (undo-tree-id815 . -14) (undo-tree-id816 . -19) (undo-tree-id817 . -14) (undo-tree-id818 . -21) (undo-tree-id819 . -21) (326 . 420) 457) ((#("| $dx$                                        | $dy$                                        |
" 0 93 (wrap-prefix "  " face (markdown-table-face) fontified nil) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified nil)) . 326) (undo-tree-id820 . -94) (undo-tree-id821 . -94) (undo-tree-id822 . -94) (undo-tree-id823 . -94) (420 . 441) (#("|---------------------------------------------|---------------------------------------------|
" 0 93 (wrap-prefix "  " face (markdown-table-face) fontified nil) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified nil)) . 420) (undo-tree-id824 . -94) (undo-tree-id825 . -94) (undo-tree-id826 . -94) (undo-tree-id827 . -94) (514 . 531) (#("| ![dx]({{site.baseurl}}/assets/proj2/dx.png) | ![dx]({{site.baseurl}}/assets/proj2/dx.png) |
" 0 2 (wrap-prefix "  " face (markdown-table-face) fontified nil) 2 3 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 3 4 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 4 6 (wrap-prefix "  " help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil) 6 7 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 7 8 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 8 44 (wrap-prefix "  " font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil) 44 45 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 45 48 (wrap-prefix "  " face (markdown-table-face) fontified nil) 48 49 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 49 50 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 50 52 (wrap-prefix "  " help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil) 52 53 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 53 54 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 54 90 (wrap-prefix "  " font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil) 90 91 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 91 93 (wrap-prefix "  " face (markdown-table-face) fontified nil) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified nil)) . 514) (undo-tree-id828 . -94) (undo-tree-id829 . -94) (undo-tree-id830 . -94) (undo-tree-id831 . -94) (608 . 705) (#("|                                             |                                             |
" 0 93 (wrap-prefix "  " face (markdown-table-face) fontified t) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified t)) . 608) (undo-tree-id832 . -94) (undo-tree-id833 . -94) (undo-tree-id834 . -94) (undo-tree-id835 . 92) (undo-tree-id836 . -94) (undo-tree-id837 . -94) (undo-tree-id838 . -94) (undo-tree-id839 . -94) (undo-tree-id840 . -94) (undo-tree-id841 . -94) (undo-tree-id842 . -94) (undo-tree-id843 . -94) (undo-tree-id844 . -94) (undo-tree-id845 . -94) (undo-tree-id846 . -94) (undo-tree-id847 . -94) (undo-tree-id848 . -1) (undo-tree-id849 . -94) (undo-tree-id850 . -94) (undo-tree-id851 . -94) (undo-tree-id852 . -94) (undo-tree-id853 . -94) (undo-tree-id854 . -94) (undo-tree-id855 . -94) (undo-tree-id856 . -94) (undo-tree-id857 . -94) (undo-tree-id858 . -94) (undo-tree-id859 . -94) (undo-tree-id860 . -94) (undo-tree-id861 . -94) (undo-tree-id862 . -94) (undo-tree-id863 . -94) (undo-tree-id864 . -94) (undo-tree-id865 . -94) (undo-tree-id866 . -94) (undo-tree-id867 . -94) (undo-tree-id868 . -94) (undo-tree-id869 . -94) (undo-tree-id870 . -94) (undo-tree-id871 . -94) (undo-tree-id872 . -94) (undo-tree-id873 . -94) (undo-tree-id874 . -94) (undo-tree-id875 . -94) (undo-tree-id876 . -94) (undo-tree-id877 . -94) (undo-tree-id878 . -94) (undo-tree-id879 . -94) (undo-tree-id880 . -94) (undo-tree-id881 . -94) (undo-tree-id882 . -94) (undo-tree-id883 . -94) (undo-tree-id884 . -94) (undo-tree-id885 . -94) (undo-tree-id886 . -94) (undo-tree-id887 . -94) (undo-tree-id888 . -94) (undo-tree-id889 . -94) (undo-tree-id890 . -94) (undo-tree-id891 . -94) (undo-tree-id892 . -94) (undo-tree-id893 . -94) (undo-tree-id894 . -94) (undo-tree-id895 . -94) (undo-tree-id896 . -94) (undo-tree-id897 . -94) (undo-tree-id898 . -94) (undo-tree-id899 . -94) (undo-tree-id900 . -94) (undo-tree-id901 . -94) (undo-tree-id902 . -94) (undo-tree-id903 . -94) (undo-tree-id904 . -94) (undo-tree-id905 . -94) (undo-tree-id906 . -94) (undo-tree-id907 . -94) (undo-tree-id908 . -94) (undo-tree-id909 . -94) (undo-tree-id910 . -94) (undo-tree-id911 . -94) (undo-tree-id912 . -94) (undo-tree-id913 . -94) (undo-tree-id914 . -94) (undo-tree-id915 . -94) (undo-tree-id916 . -94) (undo-tree-id917 . -94) (undo-tree-id918 . -94) (undo-tree-id919 . -94) (undo-tree-id920 . -94) (undo-tree-id921 . -94) (undo-tree-id922 . -94) (undo-tree-id923 . -94) (undo-tree-id924 . -94) (undo-tree-id925 . -94) (undo-tree-id926 . -94) (undo-tree-id927 . -94) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1)) (26347 25358 75793 706000) 0 nil] [nil nil ((608 . 702) (#("| ![dx]({{site.baseurl}}/assets/proj2/dx.png) |  ![dx]({{site.baseurl}}/assets/proj2/dx.png)   |
" 0 2 (face (markdown-table-face) fontified nil wrap-prefix "  ") 2 3 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 3 4 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 4 6 (fontified nil help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  ") 6 7 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 7 8 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 8 9 (fontified nil font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  ") 9 23 (fontified nil font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  ") 23 44 (fontified nil font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  ") 44 45 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 45 49 (fontified nil face (markdown-table-face) wrap-prefix "  ") 49 50 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 50 51 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 51 53 (fontified nil help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  ") 53 54 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 54 55 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 55 91 (fontified nil font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  ") 91 92 (fontified nil font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  ") 92 93 (fontified nil face (markdown-table-face) wrap-prefix "  ") 93 96 (fontified nil face (markdown-table-face) wrap-prefix "  ") 96 97 (fontified nil font-lock-multiline t face (markdown-table-face) wrap-prefix "  ")) . 608) (undo-tree-id301 . -49) (undo-tree-id302 . -49) (undo-tree-id303 . -92) (undo-tree-id304 . 97) (undo-tree-id305 . -2) (undo-tree-id306 . 51) (undo-tree-id307 . -2) (undo-tree-id308 . -45) (undo-tree-id309 . -43) (undo-tree-id310 . -43) (undo-tree-id311 . -43) (undo-tree-id312 . -43) (undo-tree-id313 . -43) (undo-tree-id314 . -43) (undo-tree-id315 . -43) (undo-tree-id316 . -43) (undo-tree-id317 . -43) (undo-tree-id318 . -92) (undo-tree-id319 . -43) (undo-tree-id320 . -43) (undo-tree-id321 . -97) (undo-tree-id322 . -97) (undo-tree-id323 . -97) (undo-tree-id324 . -97) (undo-tree-id325 . -97) (undo-tree-id326 . -97) (undo-tree-id327 . -97) (undo-tree-id328 . -97) (undo-tree-id329 . -97) (undo-tree-id330 . -97) (undo-tree-id331 . -97) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -4) (undo-tree-id340 . -2) (undo-tree-id341 . -6) (undo-tree-id342 . -4) (undo-tree-id343 . -10) (undo-tree-id344 . -6) (undo-tree-id345 . -14) (undo-tree-id346 . -10) (undo-tree-id347 . -15) (undo-tree-id348 . -14) (undo-tree-id349 . -22) (undo-tree-id350 . -15) (undo-tree-id351 . -25) (undo-tree-id352 . -22) (undo-tree-id353 . -31) (undo-tree-id354 . -25) (undo-tree-id355 . -32) (undo-tree-id356 . -31) (undo-tree-id357 . -37) (undo-tree-id358 . -32) (undo-tree-id359 . -38) (undo-tree-id360 . -37) (undo-tree-id361 . -40) (undo-tree-id362 . -38) (undo-tree-id363 . -41) (undo-tree-id364 . -40) (undo-tree-id365 . -44) (undo-tree-id366 . -41) (undo-tree-id367 . -45) (undo-tree-id368 . -44) (undo-tree-id369 . -2) (undo-tree-id370 . -45) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -95) (undo-tree-id374 . -2) (undo-tree-id375 . -94) (undo-tree-id376 . -95) (undo-tree-id377 . -49) (undo-tree-id378 . -94) (undo-tree-id379 . -48) (undo-tree-id380 . -49) (undo-tree-id381 . -45) (undo-tree-id382 . -49) (undo-tree-id383 . -93) (undo-tree-id384 . -92) (undo-tree-id385 . -48) (undo-tree-id386 . -92) (undo-tree-id387 . -92) (undo-tree-id388 . -92) (undo-tree-id389 . -92) (undo-tree-id390 . -92) (undo-tree-id391 . -92) (undo-tree-id392 . -97) (514 . 608) (#("|---------|----|
" 0 16 (face (markdown-table-face) fontified nil wrap-prefix "  ") 16 17 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 514) (undo-tree-id393 . 17) (undo-tree-id394 . -17) (undo-tree-id395 . -17) (undo-tree-id396 . -17) (undo-tree-id397 . -17) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -15) (undo-tree-id401 . -15) (undo-tree-id402 . -14) (undo-tree-id403 . -14) (undo-tree-id404 . -17) (undo-tree-id405 . -17) (undo-tree-id406 . -17) (undo-tree-id407 . -17) (420 . 514) (#("| $dx$      | $dy$ |
" 0 20 (face (markdown-table-face) fontified nil wrap-prefix "  ") 20 21 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 420) (undo-tree-id408 . 3) (undo-tree-id409 . -21) (undo-tree-id410 . -21) (undo-tree-id411 . -1) (undo-tree-id412 . -2) (undo-tree-id413 . -1) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -3) (undo-tree-id419 . -2) (undo-tree-id420 . -3) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -3) (undo-tree-id428 . -2) (undo-tree-id429 . -4) (undo-tree-id430 . -3) (undo-tree-id431 . -5) (undo-tree-id432 . -4) (undo-tree-id433 . -5) (undo-tree-id434 . -5) (undo-tree-id435 . -6) (undo-tree-id436 . -5) (undo-tree-id437 . -5) (undo-tree-id438 . -5) (undo-tree-id439 . -5) (undo-tree-id440 . -5) (undo-tree-id441 . -5) (undo-tree-id442 . -5) (undo-tree-id443 . -12) (undo-tree-id444 . -5) (undo-tree-id445 . -14) (undo-tree-id446 . -12) (undo-tree-id447 . -19) (undo-tree-id448 . -14) (undo-tree-id449 . -14) (undo-tree-id450 . -19) (undo-tree-id451 . -14) (undo-tree-id452 . -14) (undo-tree-id453 . -14) (undo-tree-id454 . -14) (undo-tree-id455 . -15) (undo-tree-id456 . -14) (undo-tree-id457 . -14) (undo-tree-id458 . -14) (undo-tree-id459 . -14) (undo-tree-id460 . -14) (undo-tree-id461 . -14) (undo-tree-id462 . -14) (undo-tree-id463 . -19) (undo-tree-id464 . -14) (undo-tree-id465 . -17) (undo-tree-id466 . -19) (undo-tree-id467 . -17) (undo-tree-id468 . -17) (undo-tree-id469 . -17) (undo-tree-id470 . -17) (undo-tree-id471 . -17) (undo-tree-id472 . -17) (undo-tree-id473 . -17) (undo-tree-id474 . -17) (undo-tree-id475 . -17) (undo-tree-id476 . -17) (undo-tree-id477 . -17) (undo-tree-id478 . -17) (undo-tree-id479 . -17) (undo-tree-id480 . -17) (undo-tree-id481 . -17) (undo-tree-id482 . -17) (undo-tree-id483 . -17) (undo-tree-id484 . -17) (undo-tree-id485 . -18) (undo-tree-id486 . -17) (undo-tree-id487 . -17) (undo-tree-id488 . -17) (undo-tree-id489 . -17) (undo-tree-id490 . -17) (undo-tree-id491 . -17) (undo-tree-id492 . -17) (undo-tree-id493 . -17) (undo-tree-id494 . -21) (undo-tree-id495 . -19) (undo-tree-id496 . -21) (undo-tree-id497 . -14) (undo-tree-id498 . -19) (undo-tree-id499 . -14) (undo-tree-id500 . -21) (undo-tree-id501 . -21) (326 . 420) 456) ((#("| $dx$                                        | $dy$                                        |
" 0 93 (wrap-prefix "  " face (markdown-table-face) fontified nil) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified nil)) . 326) (undo-tree-id508 . -94) (undo-tree-id509 . -94) (undo-tree-id510 . -94) (undo-tree-id511 . -94) (420 . 441) (#("|---------------------------------------------|---------------------------------------------|
" 0 93 (wrap-prefix "  " face (markdown-table-face) fontified nil) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified nil)) . 420) (undo-tree-id512 . -94) (undo-tree-id513 . -94) (undo-tree-id514 . -94) (undo-tree-id515 . -94) (514 . 531) (#("| ![dx]({{site.baseurl}}/assets/proj2/dx.png) | ![dx]({{site.baseurl}}/assets/proj2/dx.png) |
" 0 2 (wrap-prefix "  " face (markdown-table-face) fontified nil) 2 3 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 3 4 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 4 6 (wrap-prefix "  " help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil) 6 7 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 7 8 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 8 44 (wrap-prefix "  " font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil) 44 45 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 45 48 (wrap-prefix "  " face (markdown-table-face) fontified nil) 48 49 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 49 50 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 50 52 (wrap-prefix "  " help-echo "{{site.baseurl}}/assets/proj2/dx.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil) 52 53 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 53 54 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 54 90 (wrap-prefix "  " font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil) 90 91 (wrap-prefix "  " font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil) 91 93 (wrap-prefix "  " face (markdown-table-face) fontified nil) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified nil)) . 514) (undo-tree-id516 . -94) (undo-tree-id517 . -94) (undo-tree-id518 . -94) (undo-tree-id519 . -94) (608 . 705) (#("|                                             |                                             |
" 0 93 (wrap-prefix "  " face (markdown-table-face) fontified t) 93 94 (wrap-prefix "  " font-lock-multiline t face (markdown-table-face) fontified t)) . 608) (undo-tree-id520 . -94) (undo-tree-id521 . -94) (undo-tree-id522 . -94) (undo-tree-id523 . 92) (undo-tree-id524 . -94) (undo-tree-id525 . -94) (undo-tree-id526 . -94) (undo-tree-id527 . -94) (undo-tree-id528 . -94) (undo-tree-id529 . -94) (undo-tree-id530 . -94) (undo-tree-id531 . -94) (undo-tree-id532 . -94) (undo-tree-id533 . -94) (undo-tree-id534 . -94) (undo-tree-id535 . -94) (undo-tree-id536 . -1) (undo-tree-id537 . -94) (undo-tree-id538 . -94) (undo-tree-id539 . -94) (undo-tree-id540 . -94) (undo-tree-id541 . -94) (undo-tree-id542 . -94) (undo-tree-id543 . -94) (undo-tree-id544 . -94) (undo-tree-id545 . -94) (undo-tree-id546 . -94) (undo-tree-id547 . -94) (undo-tree-id548 . -94) (undo-tree-id549 . -94) (undo-tree-id550 . -94) (undo-tree-id551 . -94) (undo-tree-id552 . -94) (undo-tree-id553 . -94) (undo-tree-id554 . -94) (undo-tree-id555 . -94) (undo-tree-id556 . -94) (undo-tree-id557 . -94) (undo-tree-id558 . -94) (undo-tree-id559 . -94) (undo-tree-id560 . -94) (undo-tree-id561 . -94) (undo-tree-id562 . -94) (undo-tree-id563 . -94) (undo-tree-id564 . -94) (undo-tree-id565 . -94) (undo-tree-id566 . -94) (undo-tree-id567 . -94) (undo-tree-id568 . -94) (undo-tree-id569 . -94) (undo-tree-id570 . -94) (undo-tree-id571 . -94) (undo-tree-id572 . -94) (undo-tree-id573 . -94) (undo-tree-id574 . -94) (undo-tree-id575 . -94) (undo-tree-id576 . -94) (undo-tree-id577 . -94) (undo-tree-id578 . -94) (undo-tree-id579 . -94) (undo-tree-id580 . -94) (undo-tree-id581 . -94) (undo-tree-id582 . -94) (undo-tree-id583 . -94) (undo-tree-id584 . -94) (undo-tree-id585 . -94) (undo-tree-id586 . -94) (undo-tree-id587 . -94) (undo-tree-id588 . -94) (undo-tree-id589 . -94) (undo-tree-id590 . -94) (undo-tree-id591 . -94) (undo-tree-id592 . -94) (undo-tree-id593 . -94) (undo-tree-id594 . -94) (undo-tree-id595 . -94) (undo-tree-id596 . -94) (undo-tree-id597 . -94) (undo-tree-id598 . -94) (undo-tree-id599 . -94) (undo-tree-id600 . -94) (undo-tree-id601 . -94) (undo-tree-id602 . -94) (undo-tree-id603 . -94) (undo-tree-id604 . -94) (undo-tree-id605 . -94) (undo-tree-id606 . -94) (undo-tree-id607 . -94) (undo-tree-id608 . -94) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1)) (26347 25352 558052 400000) 0 nil])
([nil nil ((348 . 349) (t 26347 25361 679773 386000)) nil (26347 25379 864817 894000) 0 nil])
nil
nil
([nil nil ((358 . 359)) nil (26347 25379 864816 882000) 0 nil])
([nil nil ((360 . 361)) nil (26347 25379 864815 460000) 0 nil])
([nil nil ((365 . 366)) nil (26347 25379 864808 416000) 0 nil])
([nil nil ((#("#" 0 1 (face markdown-header-delimiter-face markdown-heading-1-atx (196 218 nil nil nil nil nil nil 196 198 198 218 218 218 #<buffer 2024-09-18-project2.markdown>) markdown-heading (196 218 nil nil nil nil nil nil 196 198 198 218 218 218 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . 196) (t 26347 25379 876943 916000)) nil (26347 25393 660611 138000) 0 nil])
([nil nil ((#("#" 0 1 (markdown-heading-2-atx (218 251 nil nil nil nil nil nil 218 221 221 251 251 251 #<buffer 2024-09-18-project2.markdown>) markdown-heading (218 251 nil nil nil nil nil nil 218 221 221 251 251 251 #<buffer 2024-09-18-project2.markdown>) face markdown-header-delimiter-face fontified t wrap-prefix "  ")) . 218)) nil (26347 25393 660609 485000) 0 nil])
([nil nil ((196 . 198)) nil (26347 25393 660603 12000) 0 nil])
([nil nil ((502 . 503) (481 . 502) (469 . 481) (#("can " 0 4 (wrap-prefix "  " fontified t)) . -469) (undo-tree-id951 . -4) (undo-tree-id952 . -1) (undo-tree-id953 . -2) (undo-tree-id954 . -1) (undo-tree-id955 . -3) (undo-tree-id956 . -2) (undo-tree-id957 . -4) (undo-tree-id958 . -3) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (undo-tree-id981 . -4) (undo-tree-id982 . -4) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) (undo-tree-id994 . -4) (undo-tree-id995 . -4) (undo-tree-id996 . -4) (undo-tree-id997 . -4) (undo-tree-id998 . -4) (undo-tree-id999 . -4) (undo-tree-id1000 . -4) (undo-tree-id1001 . -4) (undo-tree-id1002 . -4) (undo-tree-id1003 . -4) (undo-tree-id1004 . -4) (undo-tree-id1005 . -4) (undo-tree-id1006 . -4) (undo-tree-id1007 . -4) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) 473 (#("compute " 0 8 (wrap-prefix "  " fontified t)) . -473) (undo-tree-id1016 . -8) (undo-tree-id1017 . -1) (undo-tree-id1018 . -2) (undo-tree-id1019 . -1) (undo-tree-id1020 . -3) (undo-tree-id1021 . -2) (undo-tree-id1022 . -4) (undo-tree-id1023 . -3) (undo-tree-id1024 . -5) (undo-tree-id1025 . -4) (undo-tree-id1026 . -6) (undo-tree-id1027 . -5) (undo-tree-id1028 . -7) (undo-tree-id1029 . -6) (undo-tree-id1030 . -8) (undo-tree-id1031 . -7) (undo-tree-id1032 . -8) (undo-tree-id1033 . -8) (undo-tree-id1034 . -8) (undo-tree-id1035 . -8) (undo-tree-id1036 . -8) (undo-tree-id1037 . -8) (undo-tree-id1038 . -8) (undo-tree-id1039 . -8) (undo-tree-id1040 . -8) (undo-tree-id1041 . -8) (undo-tree-id1042 . -8) (undo-tree-id1043 . -8) (undo-tree-id1044 . -8) (undo-tree-id1045 . -8) (undo-tree-id1046 . -8) (undo-tree-id1047 . -8) (undo-tree-id1048 . -8) (undo-tree-id1049 . -8) (undo-tree-id1050 . -8) (undo-tree-id1051 . -8) (undo-tree-id1052 . -8) (undo-tree-id1053 . -8) (undo-tree-id1054 . -8) (undo-tree-id1055 . -8) (undo-tree-id1056 . -8) (undo-tree-id1057 . -8) (undo-tree-id1058 . -8) (undo-tree-id1059 . -8) (undo-tree-id1060 . -8) (undo-tree-id1061 . -8) (undo-tree-id1062 . -8) (undo-tree-id1063 . -8) (undo-tree-id1064 . -8) (undo-tree-id1065 . -8) (undo-tree-id1066 . -8) (undo-tree-id1067 . -8) (undo-tree-id1068 . -8) (undo-tree-id1069 . -8) 481 (#("the" 0 3 (wrap-prefix "  " fontified t)) . -481) (undo-tree-id1070 . -3) (undo-tree-id1071 . -1) (undo-tree-id1072 . -2) (undo-tree-id1073 . -1) (undo-tree-id1074 . -3) (undo-tree-id1075 . -2) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) (undo-tree-id1078 . -3) (undo-tree-id1079 . -3) (undo-tree-id1080 . -3) (undo-tree-id1081 . -3) (undo-tree-id1082 . -3) (undo-tree-id1083 . -3) (undo-tree-id1084 . -3) (undo-tree-id1085 . -3) (undo-tree-id1086 . -3) (undo-tree-id1087 . -3) (undo-tree-id1088 . -3) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -3) (undo-tree-id1092 . -3) (undo-tree-id1093 . -3) (undo-tree-id1094 . -3) (undo-tree-id1095 . -3) (undo-tree-id1096 . -3) (undo-tree-id1097 . -3) (undo-tree-id1098 . -3) (undo-tree-id1099 . -3) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) (undo-tree-id1102 . -3) (undo-tree-id1103 . -3) (undo-tree-id1104 . -3) 484 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -484) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) 485 (#("gradient" 0 8 (wrap-prefix "  " fontified t)) . -485) (undo-tree-id1133 . -8) (undo-tree-id1134 . -1) (undo-tree-id1135 . -2) (undo-tree-id1136 . -1) (undo-tree-id1137 . -3) (undo-tree-id1138 . -2) (undo-tree-id1139 . -4) (undo-tree-id1140 . -3) (undo-tree-id1141 . -5) (undo-tree-id1142 . -4) (undo-tree-id1143 . -6) (undo-tree-id1144 . -5) (undo-tree-id1145 . -7) (undo-tree-id1146 . -6) (undo-tree-id1147 . -8) (undo-tree-id1148 . -7) (undo-tree-id1149 . -8) (undo-tree-id1150 . -8) (undo-tree-id1151 . -8) (undo-tree-id1152 . -8) (undo-tree-id1153 . -8) (undo-tree-id1154 . -8) (undo-tree-id1155 . -8) 493 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -493) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) 494 (487 . 494) (466 . 487) (465 . 466) (t 26347 25393 672073 198000) 465) nil (26347 25451 473392 751000) 0 nil])
([nil nil ((503 . 505)) nil (26347 25451 473275 129000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -510) (510 . 511) (#("}" 0 1 (wrap-prefix "  " fontified nil)) . -510) (510 . 511) (504 . 511)) nil (26347 25451 473274 467000) 0 nil])
([nil nil ((523 . 524) (517 . 524) (515 . 517) (#("}" 0 1 (wrap-prefix "  " fontified nil)) . -515) (514 . 516) (#("@" 0 1 (wrap-prefix "  " fontified t)) . -514) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (#("}" 0 1 (wrap-prefix "  " fontified t)) . -515) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) 516 (#("}" 0 1 (fontified nil)) . -515) (515 . 516) (#("}" 0 1 (wrap-prefix "  " fontified nil)) . -515) (514 . 516) (513 . 515) (#("2" 0 1 (wrap-prefix "  " fontified t)) . -513) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) 514 (510 . 514)) nil (26347 25451 473271 552000) 0 nil])
([nil nil ((527 . 528) 526) nil (26347 25451 469342 712000) 0 nil])
([nil nil ((527 . 540) (t 26347 25451 484614 955000)) nil (26347 25488 547652 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 583 . 584) (nil fontified nil 541 . 584) (541 . 584)) nil (26347 25488 547651 407000) 0 nil])
([nil nil ((541 . 542) 583) nil (26347 25488 547650 305000) 0 nil])
([nil nil ((541 . 542) (540 . 541) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -540) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -541) (undo-tree-id1212 . 1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) 542) nil (26347 25488 547647 299000) 0 nil])
([nil nil ((542 . 543)) nil (26347 25488 544116 333000) 0 nil])
([nil nil ((579 . 583) (#("d" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -579) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (#("y" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -580) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) 581) nil (26347 25488 544114 509000) 0 nil])
([nil nil ((588 . 589) 582) nil (26347 25488 544082 609000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 542) (t 26347 25488 558962 384000)) nil (26347 25692 147740 711000) 0 nil])
([nil nil ((691 . 692) (687 . 691) (676 . 687) (655 . 676) (#("historgra" 0 9 (wrap-prefix "  " fontified t)) . -655) (undo-tree-id1246 . -9) 664 (661 . 664) (640 . 661) (634 . 640) (613 . 634) (592 . 613) (#("b" 0 1 (wrap-prefix "  " fontified t)) . -592) (undo-tree-id1247 . -1) 593 (589 . 593) (588 . 589) 588) nil (26347 25692 147738 927000) 0 nil])
([nil nil ((nil rear-nonsticky nil 692 . 693) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -738) (692 . 739)) nil (26347 25692 147736 833000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 692) (undo-tree-id1245 . -1)) nil (26347 25692 147735 962000) 0 nil])
([nil nil ((728 . 732) (#("grad" 0 4 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 728)) nil (26347 25692 147734 699000) 0 nil])
([nil nil ((834 . 835) (816 . 834) (795 . 816) (#("0" 0 1 (wrap-prefix "  " fontified t)) . -795) (undo-tree-id1234 . -1) (#("." 0 1 (wrap-prefix "  " fontified t)) . -796) (undo-tree-id1235 . -1) (#("3" 0 1 (wrap-prefix "  " fontified t)) . -797) (undo-tree-id1236 . -1) 798 (784 . 798) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -784) (undo-tree-id1237 . -1) 785 (782 . 785) (#("at " 0 3 (wrap-prefix "  " fontified t)) . -782) (undo-tree-id1238 . -3) 785 (#("a " 0 2 (wrap-prefix "  " fontified t)) . -785) (undo-tree-id1239 . -2) 787 (#("around " 0 7 (wrap-prefix "  " fontified t)) . -787) (undo-tree-id1240 . -7) 794 (787 . 794) (#("raou" 0 4 (wrap-prefix "  " fontified t)) . -787) (undo-tree-id1241 . -4) 791 (783 . 791) (762 . 783) (#("setting" 0 7 (wrap-prefix "  " fontified t)) . -762) (undo-tree-id1242 . -7) 769 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -769) (undo-tree-id1243 . -1) 770 (#("a" 0 1 (wrap-prefix "  " fontified t)) . -770) (undo-tree-id1244 . -1) 771 (760 . 771) (739 . 760) (738 . 739) (737 . 738) 731) nil (26347 25692 147731 283000) 0 nil])
([nil nil ((872 . 874) (#("$" 0 1 (wrap-prefix "  " fontified t)) . -872) (undo-tree-id1227 . -1) (#("$" 0 1 (wrap-prefix "  " fontified t)) . -873) (undo-tree-id1228 . -1) 874 (873 . 874) (852 . 873) (838 . 852) (#("w" 0 1 (wrap-prefix "  " fontified t)) . -838) (undo-tree-id1229 . -1) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -839) (undo-tree-id1230 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -840) (undo-tree-id1231 . -1) 841 (834 . 841) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -834) (undo-tree-id1232 . -1) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -835) (undo-tree-id1233 . -1) 836 (835 . 836) 835) nil (26347 25692 147710 964000) 0 nil])
([nil nil ((873 . 883)) nil (26347 25692 147706 396000) 0 nil])
([nil nil ((904 . 905) (#(">" 0 1 (wrap-prefix "  " fontified t)) . -904) (undo-tree-id1225 . -1) 905 (893 . 905) (884 . 893) (#("." 0 1 (font-lock-multiline t wrap-prefix "  " fontified t)) . -884) (undo-tree-id1226 . -1) 885 (884 . 885)) nil (26347 25692 147705 264000) 0 nil])
([nil nil ((905 . 906)) nil (26347 25692 147702 729000) 0 nil])
([nil nil ((nil rear-nonsticky nil 906 . 907) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -952) (906 . 953)) nil (26347 25692 147702 98000) 0 nil])
([nil nil ((943 . 963) (#("hist" 0 4 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 943) (undo-tree-id1223 . -4) (undo-tree-id1224 . -4)) nil (26347 25692 147700 735000) 0 nil])
([nil nil ((968 . 969)) nil (26347 25692 147683 352000) 0 nil])
([nil nil ((#("that" 0 4 (wrap-prefix "  " fontified t)) . -894) (undo-tree-id1425 . -4) (undo-tree-id1426 . -4) (undo-tree-id1427 . -4) (undo-tree-id1428 . -4) (undo-tree-id1429 . -4) (undo-tree-id1430 . -4) (undo-tree-id1431 . -4) (undo-tree-id1432 . -4) (undo-tree-id1433 . -4) (undo-tree-id1434 . -4) (undo-tree-id1435 . -4) (undo-tree-id1436 . -4) (undo-tree-id1437 . -4) (undo-tree-id1438 . -4) (undo-tree-id1439 . -4) 898 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -898) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) 899 (#("image" 0 5 (wrap-prefix "  " fontified t)) . 899) (undo-tree-id1454 . -5) (undo-tree-id1455 . -5) (t 26347 25692 159870 345000)) nil (26347 25768 593584 175000) 0 nil])
([nil nil ((#("This is" 0 7 (wrap-prefix "  " fontified t)) . 886) (undo-tree-id1404 . -7) (undo-tree-id1405 . -5) (undo-tree-id1406 . -5) (undo-tree-id1407 . -5) (undo-tree-id1408 . -5) (undo-tree-id1409 . -7) (undo-tree-id1410 . -7) (undo-tree-id1411 . -7) (undo-tree-id1412 . -7) (undo-tree-id1413 . -7) (undo-tree-id1414 . -7) (undo-tree-id1415 . -7) (undo-tree-id1416 . -7) (undo-tree-id1417 . -7) (undo-tree-id1418 . -7) (undo-tree-id1419 . -7) (undo-tree-id1420 . -7) (undo-tree-id1421 . -7) (undo-tree-id1422 . -7) (undo-tree-id1423 . -7) (undo-tree-id1424 . -7) 893) nil (26347 25768 593569 427000) 0 nil])
([nil nil ((884 . 903) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -884) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) 885 (884 . 885) (#("." 0 1 (wrap-prefix "  " fontified t)) . -884) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -885) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (#(" " 0 1 (face (markdown-line-break-face) wrap-prefix "  " fontified t)) . -886) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#(":" 0 1 (wrap-prefix "  " fontified t)) . -887) (undo-tree-id1398 . 1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) 888) nil (26347 25768 593554 28000) 0 nil])
([nil nil ((998 . 1001) (989 . 999) (968 . 989) (967 . 968) (t 26347 25768 605586 747000) 967) nil (26347 25812 361249 17000) 0 nil])
([nil nil ((1076 . 1081) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -1076) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) 1077 (1063 . 1077) (1042 . 1063) (1021 . 1042) (1005 . 1021) (1003 . 1005) (1002 . 1003)) nil (26347 25812 361246 613000) 0 nil])
([nil nil ((1040 . 1043)) nil (26347 25812 361228 659000) 0 nil])
([nil nil ((1084 . 1085) 1042) nil (26347 25812 361221 365000) 0 nil])
([nil nil ((1084 . 1085) (t 26347 25812 375996 927000)) nil (26347 25832 603208 753000) 0 nil])
([nil nil ((1113 . 1130) (#("the" 0 3 (wrap-prefix "  " fontified t)) . -1113) (undo-tree-id1461 . -3) (undo-tree-id1462 . -3) (undo-tree-id1463 . -3) (undo-tree-id1464 . -3) (undo-tree-id1465 . -3) (undo-tree-id1466 . -3) (undo-tree-id1467 . -3) 1116 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -1116) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) 1117 (1104 . 1117) (1083 . 1104)) nil (26347 25832 603201 930000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . -1132) (undo-tree-id1502 . -1) 1133 (1132 . 1133) (t 26347 25832 616186 614000) 1130) nil (26347 25969 708390 427000) 0 nil])
([nil nil ((1132 . 1144)) nil (26347 25969 708389 375000) 0 nil])
([nil nil ((1145 . 1146) (1144 . 1145) 1143) nil (26347 25969 708388 864000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1146 . 1147) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -1208) (1146 . 1209)) nil (26347 25969 708388 142000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 1146) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1)) nil (26347 25969 708386 870000) 0 nil])
([nil nil ((1182 . 1189) (#("camera_" 0 7 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -1182) (undo-tree-id1473 . -7) (undo-tree-id1474 . -7) (undo-tree-id1475 . -7) (undo-tree-id1476 . -7) (undo-tree-id1477 . -7) (undo-tree-id1478 . -7) (undo-tree-id1479 . -7) (undo-tree-id1480 . -7) (undo-tree-id1481 . -7) (undo-tree-id1482 . -7) (undo-tree-id1483 . -7) (undo-tree-id1484 . -7) (undo-tree-id1485 . -7) 1189 (#("man_" 0 4 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -1189) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) (undo-tree-id1488 . -4) (undo-tree-id1489 . -4) (undo-tree-id1490 . -4) (undo-tree-id1491 . -4) (undo-tree-id1492 . -4) (undo-tree-id1493 . -4) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) 1193 (#("binarized" 0 9 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 1193) (undo-tree-id1497 . -9) (undo-tree-id1498 . -9)) nil (26347 25969 708378 995000) 0 nil])
([nil nil ((1247 . 1249) (1236 . 1247) (1215 . 1236) (1207 . 1215) ("derivtiv" . -1207) (undo-tree-id1625 . -8) (undo-tree-id1626 . -1) (undo-tree-id1627 . -2) (undo-tree-id1628 . -1) (undo-tree-id1629 . -3) (undo-tree-id1630 . -2) (undo-tree-id1631 . -4) (undo-tree-id1632 . -3) (undo-tree-id1633 . -4) (undo-tree-id1634 . -5) (undo-tree-id1635 . -4) (undo-tree-id1636 . -5) (undo-tree-id1637 . -6) (undo-tree-id1638 . -5) (undo-tree-id1639 . -6) (undo-tree-id1640 . -6) (undo-tree-id1641 . -7) (undo-tree-id1642 . -6) (undo-tree-id1643 . -8) (undo-tree-id1644 . -7) (undo-tree-id1645 . -8) 1215 (1206 . 1215) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -1206) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) 1207 (#("derivat" 0 7 (wrap-prefix "  " fontified t)) . -1207) (undo-tree-id1672 . -7) (undo-tree-id1673 . -1) (undo-tree-id1674 . -2) (undo-tree-id1675 . -1) (undo-tree-id1676 . -3) (undo-tree-id1677 . -2) (undo-tree-id1678 . -4) (undo-tree-id1679 . -3) (undo-tree-id1680 . -4) (undo-tree-id1681 . -5) (undo-tree-id1682 . -4) (undo-tree-id1683 . -5) (undo-tree-id1684 . -6) (undo-tree-id1685 . -5) (undo-tree-id1686 . -6) (undo-tree-id1687 . -7) (undo-tree-id1688 . -6) (undo-tree-id1689 . -7) (undo-tree-id1690 . -7) 1214 (1196 . 1214) (1195 . 1196) (t 26347 25969 720471 410000) 1195) nil (26347 26930 938536 546000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1256 . 1257) (nil fontified nil 1249 . 1257) (1249 . 1257)) nil (26347 26930 938131 452000) 0 nil])
([nil nil ((#("derivtiv" 0 7 (wrap-prefix "  " fontified t) 7 8 (wrap-prefix "  " fontified t)) . -1249) (undo-tree-id1617 . -7) (undo-tree-id1618 . -8) (undo-tree-id1619 . -7) (undo-tree-id1620 . -8) (undo-tree-id1621 . -7) (undo-tree-id1622 . -8) (undo-tree-id1623 . -8) (undo-tree-id1624 . -8) 1257) nil (26347 26930 938130 400000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1387 . 1388) (nil fontified nil 1248 . 1388) (1248 . 1388)) nil (26347 26930 938124 869000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . -1248) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) 1249 (1248 . 1249) (1248 . 1249)) nil (26347 26930 938124 188000) 0 nil])
([nil nil ((1329 . 1337)) nil (26347 26930 938122 184000) 0 nil])
([nil nil ((1384 . 1392)) nil (26347 26930 938121 743000) 0 nil])
([nil nil ((1449 . 1450) (1430 . 1449) (1409 . 1430) (#("g" 0 1 (fontified t wrap-prefix "  ")) . -1409) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) 1410 (1405 . 1410) (#("A" 0 1 (fontified t wrap-prefix "  ")) . -1405) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) 1406 (1405 . 1406)) nil (26347 26930 938121 22000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1451 . 1452) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -1500) (1451 . 1501)) nil (26347 26930 938117 776000) 0 nil])
([nil nil ((1495 . 1500)) nil (26347 26930 938117 405000) 0 nil])
([nil nil ((1571 . 1585) (#("comp" 0 4 (wrap-prefix "  " fontified t)) . -1571) (undo-tree-id1575 . -4) (undo-tree-id1576 . -1) (undo-tree-id1577 . -2) (undo-tree-id1578 . -1) (undo-tree-id1579 . -3) (undo-tree-id1580 . -2) (undo-tree-id1581 . -4) (undo-tree-id1582 . -3) (undo-tree-id1583 . -4) 1575 (1562 . 1575) (#("c" 0 1 (wrap-prefix "  " fontified t)) . -1562) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) 1563 (1560 . 1563) (1559 . 1560) (1538 . 1559) (#("than" 0 4 (wrap-prefix "  " fontified t)) . -1538) (undo-tree-id1587 . -4) (undo-tree-id1588 . -1) (undo-tree-id1589 . -2) (undo-tree-id1590 . -1) (undo-tree-id1591 . -3) (undo-tree-id1592 . -2) (undo-tree-id1593 . -4) (undo-tree-id1594 . -3) (undo-tree-id1595 . -4) (undo-tree-id1596 . -4) (undo-tree-id1597 . -4) (undo-tree-id1598 . -4) (undo-tree-id1599 . -4) 1542 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -1542) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) 1543 (1541 . 1543) (1520 . 1541) (1507 . 1520) (#("T" 0 1 (wrap-prefix "  " fontified t)) . -1507) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) 1508 (1507 . 1508) (1506 . 1507) (1505 . 1506) 1499) nil (26347 26930 938115 602000) 0 nil])
([nil nil ((1675 . 1681) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -1675) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -1676) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) 1677 (1669 . 1677) (1648 . 1669) (1627 . 1648) (#("further " 0 8 (wrap-prefix "  " fontified t)) . -1627) (undo-tree-id1513 . -8) (undo-tree-id1514 . -1) (undo-tree-id1515 . -2) (undo-tree-id1516 . -1) (undo-tree-id1517 . -3) (undo-tree-id1518 . -2) (undo-tree-id1519 . -4) (undo-tree-id1520 . -3) (undo-tree-id1521 . -5) (undo-tree-id1522 . -4) (undo-tree-id1523 . -6) (undo-tree-id1524 . -5) (undo-tree-id1525 . -7) (undo-tree-id1526 . -6) (undo-tree-id1527 . -8) (undo-tree-id1528 . -7) (undo-tree-id1529 . -8) (undo-tree-id1530 . -8) 1635 (1627 . 1635) (#("m" 0 1 (wrap-prefix "  " fontified t)) . -1627) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) 1628 (1624 . 1628) (1603 . 1624) (#("tak" 0 3 (wrap-prefix "  " fontified t)) . -1603) (undo-tree-id1534 . -3) (undo-tree-id1535 . -1) (undo-tree-id1536 . -2) (undo-tree-id1537 . -1) (undo-tree-id1538 . -3) (undo-tree-id1539 . -2) (undo-tree-id1540 . -3) 1606 (1593 . 1606) (#("similiar" 0 8 (wrap-prefix "  " fontified t)) . -1593) (undo-tree-id1541 . -8) (undo-tree-id1542 . -1) (undo-tree-id1543 . -2) (undo-tree-id1544 . -1) (undo-tree-id1545 . -3) (undo-tree-id1546 . -2) (undo-tree-id1547 . -4) (undo-tree-id1548 . -3) (undo-tree-id1549 . -5) (undo-tree-id1550 . -4) (undo-tree-id1551 . -5) (undo-tree-id1552 . -6) (undo-tree-id1553 . -5) (undo-tree-id1554 . -6) (undo-tree-id1555 . -6) (undo-tree-id1556 . -7) (undo-tree-id1557 . -6) (undo-tree-id1558 . -8) (undo-tree-id1559 . -7) (undo-tree-id1560 . -8) 1601 (1585 . 1601) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -1585) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -1586) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) 1587 (1586 . 1587) (1585 . 1586) 1584) nil (26347 26930 938091 616000) 0 nil])
([nil nil ((1681 . 1682) 1680) nil (26347 26930 929821 313000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1682 . 1683) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -1736) (1682 . 1737) (t 26347 26930 942149 177000)) nil (26347 26951 882077 780000) 0 nil])
([nil nil ((1731 . 1741)) nil (26347 26951 882076 17000) 0 nil])
([nil nil ((1746 . 1747) 1740) nil (26347 26951 882068 553000) 0 nil])
([nil nil ((1706 . 1708) (1685 . 1706) (1681 . 1685) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -1681) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) 1682 (t 26347 26951 896705 873000)) nil (26347 26984 741126 134000) 0 nil])
([nil nil ((1707 . 1708) (#("." 0 1 (wrap-prefix "  " fontified t)) . -1707) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) 1708) nil (26347 26984 737355 117000) 0 nil])
([nil nil ((1708 . 1709) 1707) nil (26347 26984 737329 318000) 0 nil])
([nil nil ((1884 . 1886) (1865 . 1884) (1844 . 1865) (#("`" 0 1 (wrap-prefix "  " fontified t)) . -1844) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) 1845 (1840 . 1845) (1832 . 1840) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -1832) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) 1833 (1816 . 1833) (#("take" 0 4 (wrap-prefix "  " fontified t)) . -1816) (undo-tree-id1711 . -4) (undo-tree-id1712 . -4) (undo-tree-id1713 . -4) (undo-tree-id1714 . -4) (undo-tree-id1715 . -4) (undo-tree-id1716 . -4) (undo-tree-id1717 . -4) 1820 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -1820) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) 1821 (1802 . 1821) (1781 . 1802) (#("von" 0 3 (wrap-prefix "  " fontified t)) . -1781) (undo-tree-id1723 . -3) 1784 (1775 . 1784) (1774 . 1775) (t 26347 26984 745069 294000) 1774) nil (26347 27021 421002 734000) 0 nil])
([nil nil ((1886 . 1887) 1885) nil (26347 27021 420949 914000) 0 nil])
([nil nil ((1914 . 1915) (#("$" 0 1 (wrap-prefix "  " fontified t)) . -1914) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) 1915 (1907 . 1915) (1886 . 1907) (t 26347 27021 444375 361000)) nil (26347 27094 900981 38000) 0 nil])
([nil nil ((1914 . 1918) (#("I" 0 1 (wrap-prefix "  " fontified t)) . -1914) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) 1915 (1914 . 1915)) nil (26347 27094 900978 854000) 0 nil])
([nil nil ((1915 . 1921) (#("G" 0 1 (wrap-prefix "  " fontified t)) . -1915) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) 1916 (1915 . 1916) (1914 . 1916) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -1914) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (#("m" 0 1 (wrap-prefix "  " fontified t)) . -1915) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -1916) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (#("*" 0 1 (wrap-prefix "  " fontified t)) . -1917) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -1918) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) 1919 (1917 . 1919) (#("\\" 0 1 (face (markdown-markup-face) invisible markdown-markup wrap-prefix "  " fontified t)) . -1917) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) 1918) nil (26347 27094 900971 941000) 0 nil])
([nil nil ((1937 . 1944) (1926 . 1938) (#("x" 0 1 (wrap-prefix "  " fontified t)) . -1926) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) 1927 (1922 . 1927)) nil (26347 27094 900736 559000) 0 nil])
([nil nil ((1946 . 1948) (t 26347 27094 914105 288000)) nil (26347 27306 267845 912000) 0 nil])
([nil nil ((1971 . 1985) (1969 . 1971) (1948 . 1969) (#("The " 0 4 (wrap-prefix "  " fontified t)) . -1948) (undo-tree-id2392 . -4) (undo-tree-id2393 . -1) (undo-tree-id2394 . -2) (undo-tree-id2395 . -1) (undo-tree-id2396 . -3) (undo-tree-id2397 . -2) (undo-tree-id2398 . -4) (undo-tree-id2399 . -3) (undo-tree-id2400 . -4) (undo-tree-id2401 . -4) 1952 (1948 . 1952) (#("T" 0 1 (wrap-prefix "  " fontified t)) . -1948) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (#("h" 0 1 (wrap-prefix "  " fontified t)) . -1949) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) 1950 (1948 . 1950) (#("For" 0 3 (wrap-prefix "  " fontified t)) . -1948) (undo-tree-id2412 . -3) (undo-tree-id2413 . -1) (undo-tree-id2414 . -2) (undo-tree-id2415 . -1) (undo-tree-id2416 . -3) (undo-tree-id2417 . -2) (undo-tree-id2418 . -3) (undo-tree-id2419 . -3) (undo-tree-id2420 . -3) (undo-tree-id2421 . -3) (undo-tree-id2422 . -3) (undo-tree-id2423 . -3) 1951 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -1951) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) 1952 (1948 . 1952)) nil (26347 27306 267843 87000) 0 nil])
([nil nil ((1962 . 1963)) nil (26347 27306 267806 548000) 0 nil])
([nil nil ((2003 . 2005) (1986 . 2003)) nil (26347 27306 267805 767000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2160 . 2161) (nil fontified nil 2005 . 2161) (2005 . 2161)) nil (26347 27306 267805 66000) 0 nil])
([nil nil ((2008 . 2015) (#("d" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified t)) . -2008) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (#("x" 0 1 (wrap-prefix "  " face (markdown-table-face) fontified t)) . -2009) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) 2010) nil (26347 27306 267803 553000) 0 nil])
([nil nil ((2025 . 2032) (#("d" 0 1 (font-lock-multiline t face (markdown-table-face markdown-italic-face) wrap-prefix "  " fontified t)) . -2025) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (#("y" 0 1 (font-lock-multiline t face (markdown-table-face markdown-italic-face) wrap-prefix "  " fontified t)) . -2026) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) 2027) nil (26347 27306 267793 474000) 0 nil])
([nil nil ((2100 . 2107) (#("e" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -2100) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (#("d" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -2101) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) 2102) nil (26347 27306 267774 408000) 0 nil])
([nil nil ((2160 . 2170) (#("e" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -2160) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (#("d" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -2161) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (#("_" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -2162) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (#("d" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -2163) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (#("y" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -2164) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) 2165) nil (26347 27306 267750 143000) 0 nil])
([nil nil ((2295 . 2296) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2295) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) 2296 (#("as" 0 2 (wrap-prefix "  " fontified t)) . -2296) (undo-tree-id2229 . -2) (undo-tree-id2230 . -1) (undo-tree-id2231 . -2) (undo-tree-id2232 . -1) (undo-tree-id2233 . -2) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) 2298 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2298) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) 2299 (2292 . 2299) (2271 . 2292) (#("y" 0 1 (wrap-prefix "  " fontified t)) . -2271) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) 2272 (2255 . 2272) (2250 . 2255) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -2250) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -2251) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) 2252 (2242 . 2252) (2221 . 2242) (#("d" 0 1 (wrap-prefix "  " fontified t)) . -2221) (undo-tree-id2258 . -1) 2222 (#("e" 0 1 (wrap-prefix "  " fontified t)) . -2222) (undo-tree-id2259 . -1) (#("r" 0 1 (wrap-prefix "  " fontified t)) . -2223) (undo-tree-id2260 . -1) 2224 (2223 . 2224) (2202 . 2223) (2181 . 2202) (2180 . 2181) 2180) nil (26347 27306 267686 413000) 0 nil])
([nil nil ((2297 . 2298) (2296 . 2297) 2295) nil (26347 27306 267651 217000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2300 . 2301) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -2364) (2300 . 2365)) nil (26347 27306 267650 446000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix "  ")) . 2298) (undo-tree-id2212 . 1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1)) nil (26347 27306 267649 544000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix "  ")) . 2298) (undo-tree-id2207 . 1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1)) nil (26347 27306 267647 771000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 2298) (undo-tree-id2203 . -1) (undo-tree-id2204 . 1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1)) nil (26347 27306 267640 527000) 0 nil])
([nil nil ((2342 . 2345) (#("g" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2342) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (#("r" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2343) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (#("a" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2344) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (#("d" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2345) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) 2346) nil (26347 27306 267635 788000) 0 nil])
([nil nil ((2360 . 2361)) nil (26347 27306 267582 799000) 0 nil])
([nil nil ((#("e" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2339) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (#("d" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2340) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) 2341 (t 26347 27306 281856 258000)) nil (26347 27315 191380 833000) 0 nil])
([nil nil ((2360 . 2379) (2359 . 2360) (2358 . 2359) (t 26347 27315 203767 515000) 2357) nil (26347 27352 888136 545000) 0 nil])
([nil nil ((2382 . 2386) (2379 . 2382)) nil (26347 27352 888129 332000) 0 nil])
([nil nil ((2386 . 2388) (t 26347 27352 903481 886000)) nil (26347 27370 340025 487000) 0 nil])
([nil nil ((#("." 0 1 (face markdown-header-face-2 markdown-heading-2-atx (2360 2388 nil nil nil nil nil nil 2360 2363 2363 2388 2388 2388 #<buffer 2024-09-18-project2.markdown>) markdown-heading (2360 2388 nil nil nil nil nil nil 2360 2363 2363 2388 2388 2388 #<buffer 2024-09-18-project2.markdown>) wrap-prefix "  " fontified t)) . -2387) (undo-tree-id2457 . -1) 2388) nil (26347 27370 340024 195000) 0 nil])
([nil nil ((2375 . 2386) (#("f" 0 1 (face markdown-header-face-2 markdown-heading-2-atx (2360 2377 nil nil nil nil nil nil 2360 2363 2363 2377 2377 2377 #<buffer 2024-09-18-project2.markdown>) markdown-heading (2360 2377 nil nil nil nil nil nil 2360 2363 2363 2377 2377 2377 #<buffer 2024-09-18-project2.markdown>) wrap-prefix "  " fontified t)) . -2375) (undo-tree-id2449 . -1) 2376 (2375 . 2376) (#("Frequencies" 0 11 (face markdown-header-face-2 markdown-heading-2-atx (2360 2387 nil nil nil nil nil nil 2360 2363 2363 2387 2387 2387 #<buffer 2024-09-18-project2.markdown>) markdown-heading (2360 2387 nil nil nil nil nil nil 2360 2363 2363 2387 2387 2387 #<buffer 2024-09-18-project2.markdown>) wrap-prefix "  " fontified t)) . 2375) (undo-tree-id2450 . -10) (undo-tree-id2451 . -3) (undo-tree-id2452 . -3) (undo-tree-id2453 . -10) (undo-tree-id2454 . -10) (undo-tree-id2455 . -10) (undo-tree-id2456 . -10)) nil (26347 27370 340021 680000) 0 nil])
([nil nil ((2397 . 2412) (#("g" 0 1 (face markdown-header-face-1 markdown-heading-1-atx (2389 2398 nil nil nil nil nil nil 2389 2391 2391 2398 2398 2398 #<buffer 2024-09-18-project2.markdown>) markdown-heading (2389 2398 nil nil nil nil nil nil 2389 2391 2391 2398 2398 2398 #<buffer 2024-09-18-project2.markdown>) wrap-prefix "  " fontified t)) . -2397) (undo-tree-id2446 . -1) 2398 (2391 . 2398) (#("1" 0 1 (face markdown-header-face-1 markdown-heading-1-atx (2389 2392 nil nil nil nil nil nil 2389 2391 2391 2392 2392 2392 #<buffer 2024-09-18-project2.markdown>) markdown-heading (2389 2392 nil nil nil nil nil nil 2389 2391 2391 2392 2392 2392 #<buffer 2024-09-18-project2.markdown>) wrap-prefix "  " fontified t)) . -2391) (undo-tree-id2447 . -1) (#("." 0 1 (face markdown-header-face-1 markdown-heading-1-atx (2389 2393 nil nil nil nil nil nil 2389 2391 2391 2393 2393 2393 #<buffer 2024-09-18-project2.markdown>) markdown-heading (2389 2393 nil nil nil nil nil nil 2389 2391 2391 2393 2393 2393 #<buffer 2024-09-18-project2.markdown>) wrap-prefix "  " fontified t)) . -2392) (undo-tree-id2448 . -1) 2393 (2391 . 2393) (2389 . 2391) (2388 . 2389) (2387 . 2388) 2386) nil (26347 27370 339999 58000) 0 nil])
([nil nil ((2474 . 2489) (2473 . 2474) (2452 . 2473) (#("w" 0 1 (wrap-prefix "  " fontified t)) . -2452) (undo-tree-id2837 . -1) 2453 (2435 . 2453) (2414 . 2435) (2413 . 2414) (t 26347 27370 358482 861000)) nil (26347 27570 167358 598000) 0 nil])
([nil nil ((2635 . 2640) (2614 . 2635) (#("Maathe" 0 6 (wrap-prefix "  " fontified t)) . -2614) (undo-tree-id2516 . -6) (undo-tree-id2517 . -1) (undo-tree-id2518 . -2) (undo-tree-id2519 . -1) (undo-tree-id2520 . -3) (undo-tree-id2521 . -2) (undo-tree-id2522 . -4) (undo-tree-id2523 . -3) (undo-tree-id2524 . -5) (undo-tree-id2525 . -4) (undo-tree-id2526 . -6) (undo-tree-id2527 . -5) (undo-tree-id2528 . -6) 2620 (2613 . 2620) (#("." 0 1 (wrap-prefix "  " fontified t)) . -2613) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2614) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) 2615 (2600 . 2615) (2579 . 2600) (2570 . 2579) (2549 . 2570) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -2549) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) 2550 (2549 . 2550) (#("r" 0 1 (wrap-prefix "  " fontified t)) . -2549) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (#("s" 0 1 (wrap-prefix "  " fontified t)) . -2550) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2551) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -2552) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (#("h" 0 1 (wrap-prefix "  " fontified t)) . -2553) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) 2554 (2537 . 2554) (2530 . 2537) (#("`" 0 1 (wrap-prefix "  " fontified t)) . -2530) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) 2531 (2530 . 2531) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2530) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (#("s" 0 1 (wrap-prefix "  " fontified t)) . -2531) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (#("h" 0 1 (wrap-prefix "  " fontified t)) . -2532) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -2533) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (#("r" 0 1 (wrap-prefix "  " fontified t)) . -2534) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) 2535 (2526 . 2535) (2505 . 2526) (#("convolving " 0 11 (wrap-prefix "  " fontified t)) . -2505) (undo-tree-id2662 . -11) (undo-tree-id2663 . -1) (undo-tree-id2664 . -2) (undo-tree-id2665 . -1) (undo-tree-id2666 . -3) (undo-tree-id2667 . -2) (undo-tree-id2668 . -4) (undo-tree-id2669 . -3) (undo-tree-id2670 . -5) (undo-tree-id2671 . -4) (undo-tree-id2672 . -6) (undo-tree-id2673 . -5) (undo-tree-id2674 . -7) (undo-tree-id2675 . -6) (undo-tree-id2676 . -8) (undo-tree-id2677 . -7) (undo-tree-id2678 . -9) (undo-tree-id2679 . -8) (undo-tree-id2680 . -9) (undo-tree-id2681 . -10) (undo-tree-id2682 . -9) (undo-tree-id2683 . -10) (undo-tree-id2684 . -10) (undo-tree-id2685 . -11) (undo-tree-id2686 . -10) (undo-tree-id2687 . -11) (undo-tree-id2688 . -11) 2516 (2505 . 2516) (2502 . 2505) (#("we" 0 2 (wrap-prefix "  " fontified t)) . -2502) (undo-tree-id2689 . -2) (undo-tree-id2690 . -1) (undo-tree-id2691 . -2) (undo-tree-id2692 . -1) (undo-tree-id2693 . -2) (undo-tree-id2694 . -2) (undo-tree-id2695 . -2) (undo-tree-id2696 . -2) (undo-tree-id2697 . -2) (undo-tree-id2698 . -2) (undo-tree-id2699 . -2) (undo-tree-id2700 . -2) (undo-tree-id2701 . -2) (undo-tree-id2702 . -2) (undo-tree-id2703 . -2) (undo-tree-id2704 . -2) (undo-tree-id2705 . -2) (undo-tree-id2706 . -2) (undo-tree-id2707 . -2) (undo-tree-id2708 . -2) (undo-tree-id2709 . -2) (undo-tree-id2710 . -2) (undo-tree-id2711 . -2) (undo-tree-id2712 . -2) (undo-tree-id2713 . -2) (undo-tree-id2714 . -2) (undo-tree-id2715 . -2) (undo-tree-id2716 . -2) (undo-tree-id2717 . -2) (undo-tree-id2718 . -2) (undo-tree-id2719 . -2) (undo-tree-id2720 . -2) (undo-tree-id2721 . -2) (undo-tree-id2722 . -2) (undo-tree-id2723 . -2) (undo-tree-id2724 . -2) (undo-tree-id2725 . -2) (undo-tree-id2726 . -2) (undo-tree-id2727 . -2) (undo-tree-id2728 . -2) (undo-tree-id2729 . -2) (undo-tree-id2730 . -2) 2504 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2504) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) 2505 (#("first" 0 5 (wrap-prefix "  " fontified t)) . -2505) (undo-tree-id2768 . -5) (undo-tree-id2769 . -1) (undo-tree-id2770 . -2) (undo-tree-id2771 . -1) (undo-tree-id2772 . -3) (undo-tree-id2773 . -2) (undo-tree-id2774 . -4) (undo-tree-id2775 . -3) (undo-tree-id2776 . -5) (undo-tree-id2777 . -4) (undo-tree-id2778 . -5) (undo-tree-id2779 . -5) (undo-tree-id2780 . -5) (undo-tree-id2781 . -5) (undo-tree-id2782 . -5) (undo-tree-id2783 . -5) (undo-tree-id2784 . -5) (undo-tree-id2785 . -5) (undo-tree-id2786 . -5) (undo-tree-id2787 . -5) (undo-tree-id2788 . -5) (undo-tree-id2789 . -5) (undo-tree-id2790 . -5) (undo-tree-id2791 . -5) (undo-tree-id2792 . -5) (undo-tree-id2793 . -5) (undo-tree-id2794 . -5) (undo-tree-id2795 . -5) (undo-tree-id2796 . -5) (undo-tree-id2797 . -5) (undo-tree-id2798 . -5) (undo-tree-id2799 . -5) 2510 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2510) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) 2511 (#("derive" 0 6 (wrap-prefix "  " fontified t)) . -2511) (undo-tree-id2821 . -6) (undo-tree-id2822 . -1) (undo-tree-id2823 . -2) (undo-tree-id2824 . -1) (undo-tree-id2825 . -3) (undo-tree-id2826 . -2) (undo-tree-id2827 . -4) (undo-tree-id2828 . -3) (undo-tree-id2829 . -4) (undo-tree-id2830 . -5) (undo-tree-id2831 . -4) (undo-tree-id2832 . -6) (undo-tree-id2833 . -5) (undo-tree-id2834 . -6) (undo-tree-id2835 . -6) (undo-tree-id2836 . -6) 2517 (2510 . 2517) (2489 . 2510)) nil (26347 27570 167335 664000) 0 nil])
([nil nil ((2645 . 2649) (2639 . 2646)) nil (26347 27570 143831 887000) 0 nil])
([nil nil ((2644 . 2650)) nil (26347 27570 143831 105000) 0 nil])
([nil nil ((2654 . 2662) (#("*" 0 1 (wrap-prefix "  " fontified t)) . -2654) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2655) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) 2656 (2655 . 2656) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -2655) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2656) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) 2657 (2655 . 2657)) nil (26347 27570 143828 120000) 0 nil])
([nil nil ((#("=" 0 1 (wrap-prefix "  " fontified t)) . -2664) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2665) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) 2666 (2663 . 2666)) nil (26347 27570 143767 264000) 0 nil])
([nil nil ((2665 . 2666) 2663) nil (26347 27570 143716 447000) 0 nil])
([nil nil ((2663 . 2666) (t 26347 27570 183160 963000)) nil (26347 27628 552768 124000) 0 nil])
([nil nil ((2693 . 2700) (2681 . 2693) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -2681) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (#("m" 0 1 (wrap-prefix "  " fontified t)) . -2682) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) 2683 (2681 . 2683) (#("*" 0 1 (wrap-prefix "  " fontified t)) . -2681) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) 2682 (2681 . 2682) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2681) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -2682) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (#("m" 0 1 (wrap-prefix "  " fontified t)) . -2683) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) 2684 (2681 . 2684) (2672 . 2681) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2672) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) 2673 (2671 . 2673) (#("E" 0 1 (wrap-prefix "  " fontified t)) . -2671) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) 2672 (2666 . 2672) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2666) (undo-tree-id2879 . 1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -2667) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (#("m" 0 1 (wrap-prefix "  " fontified t)) . -2668) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2669) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) 2670 (2667 . 2670)) nil (26347 27628 552757 865000) 0 nil])
([nil nil ((2681 . 2686) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2681) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) 2682 (t 26347 27628 564810 643000)) nil (26347 27661 790998 734000) 0 nil])
([nil nil ((2686 . 2687)) nil (26347 27661 788771 88000) 0 nil])
([nil nil ((2698 . 2704) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2698) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (#("\\" 0 1 (face (markdown-markup-face) invisible markdown-markup wrap-prefix "  " fontified t)) . -2699) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) 2700 (2698 . 2700) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2698) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) 2699 (t 26347 27661 804944 268000)) nil (26347 27669 628026 432000) 0 nil])
([nil nil ((2689 . 2690) (#("G" 0 1 (wrap-prefix "  " fontified t)) . -2689) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) 2690 (2686 . 2690) (t 26347 27669 642983 432000)) nil (26347 57069 10654 912000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix "  " fontified t)) . -2686) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (#("*" 0 1 (wrap-prefix "  " fontified t)) . -2687) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2688) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -2689) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) 2690 (t 26347 57069 54113 845000)) nil (26347 57074 904528 739000) 0 nil])
([nil nil ((2690 . 2693) (#("&" 0 1 (wrap-prefix "  " fontified t)) . -2690) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) 2691 (2689 . 2691)) nil (26347 57074 904490 116000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix "  " fontified t)) . -2715) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (#("=" 0 1 (wrap-prefix "  " fontified t)) . -2716) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2717) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) 2718 (2715 . 2718) (t 26347 57074 918171 122000)) nil (26347 57105 217008 69000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2723) (2723 . 2724) (#(")" 0 1 (wrap-prefix "  " fontified nil)) . -2723) (2723 . 2724) (2714 . 2724)) nil (26347 57105 216960 288000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2724) (2724 . 2725) (#(")" 0 1 (wrap-prefix "  " fontified nil)) . -2724) (2724 . 2725) (2723 . 2725)) nil (26347 57105 216958 545000) 0 nil])
([nil nil ((2724 . 2734)) nil (26347 57105 216957 453000) 0 nil])
([nil nil ((2737 . 2753) (2735 . 2737)) nil (26347 57105 216946 843000) 0 nil])
([nil nil ((2755 . 2756) (t 26347 57105 233467 258000)) nil (26347 57146 862247 281000) 0 nil])
([nil nil ((2802 . 2823) (2781 . 2802) (2765 . 2781) (#("what" 0 4 (wrap-prefix "  " fontified t)) . -2765) (undo-tree-id3045 . -4) (undo-tree-id3046 . -1) (undo-tree-id3047 . -2) (undo-tree-id3048 . -1) (undo-tree-id3049 . -3) (undo-tree-id3050 . -2) (undo-tree-id3051 . -4) (undo-tree-id3052 . -3) (undo-tree-id3053 . -4) (undo-tree-id3054 . -4) (undo-tree-id3055 . -4) (undo-tree-id3056 . -4) (undo-tree-id3057 . -4) (undo-tree-id3058 . -4) (undo-tree-id3059 . -4) (undo-tree-id3060 . -4) (undo-tree-id3061 . -4) (undo-tree-id3062 . -4) (undo-tree-id3063 . -4) (undo-tree-id3064 . -4) (undo-tree-id3065 . -4) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) 2769 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2769) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) 2770 (#("the" 0 3 (wrap-prefix "  " fontified t)) . -2770) (undo-tree-id3094 . -3) (undo-tree-id3095 . -1) (undo-tree-id3096 . -2) (undo-tree-id3097 . -1) (undo-tree-id3098 . -3) (undo-tree-id3099 . -2) (undo-tree-id3100 . -3) (undo-tree-id3101 . -3) (undo-tree-id3102 . -3) (undo-tree-id3103 . -3) (undo-tree-id3104 . -3) (undo-tree-id3105 . -3) (undo-tree-id3106 . -3) (undo-tree-id3107 . -3) (undo-tree-id3108 . -3) 2773 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -2773) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) 2774 (2758 . 2774) (2757 . 2758) (t 26347 57146 876874 32000) 2757) nil (26349 28160 139032 632000) 0 nil])
([nil nil ((2823 . 2824) 2817) nil (26349 28160 94833 727000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2824 . 2825) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -2885) (2824 . 2886)) nil (26349 28160 94832 905000) 0 nil])
([nil nil ((2861 . 2878) (#("gauss_" 0 6 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2861) (undo-tree-id3019 . -6) (undo-tree-id3020 . -6) (undo-tree-id3021 . -6) (undo-tree-id3022 . -6) (undo-tree-id3023 . -6) (undo-tree-id3024 . -6) (undo-tree-id3025 . -6) (undo-tree-id3026 . -6) (undo-tree-id3027 . -6) (undo-tree-id3028 . -6) (undo-tree-id3029 . -6) (undo-tree-id3030 . -6) (undo-tree-id3031 . -6) 2867 (#("dog_" 0 4 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -2867) (undo-tree-id3032 . -4) (undo-tree-id3033 . -4) (undo-tree-id3034 . -4) (undo-tree-id3035 . -4) (undo-tree-id3036 . -4) (undo-tree-id3037 . -4) (undo-tree-id3038 . -4) (undo-tree-id3039 . -4) (undo-tree-id3040 . -4) (undo-tree-id3041 . -4) (undo-tree-id3042 . -4) 2871 (#("binarized" 0 9 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 2871) (undo-tree-id3043 . -9) (undo-tree-id3044 . -9)) nil (26349 28160 94831 272000) 0 nil])
([nil nil ((2883 . 2884) 2877) nil (26349 28160 94796 927000) 0 nil])
([nil nil ((2865 . 2873) (2844 . 2865) (2823 . 2844) (t 26349 28160 145266 239000)) nil (26349 28246 663916 521000) 0 nil])
([nil nil ((2835 . 2840)) nil (26349 28246 663914 26000) 0 nil])
([nil nil ((2882 . 2883) (#("." 0 1 (wrap-prefix "  " fontified t)) . -2882) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) 2883 (2878 . 2883)) nil (26349 28246 663907 735000) 0 nil])
([nil nil ((3019 . 3022) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -3019) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (#("c" 0 1 (wrap-prefix "  " fontified t)) . -3020) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -3021) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) 3022 (3016 . 3022) (2995 . 3016) (#("d" 0 1 (wrap-prefix "  " fontified t)) . -2995) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) 2996 (2976 . 2996) (2960 . 2976) (#("`" 0 1 (face (markdown-markup-face) invisible markdown-markup font-lock-multiline t wrap-prefix "  " fontified t)) . -2960) (undo-tree-id3163 . -1) 2961 (2945 . 2961) (2944 . 2945) (t 26349 28246 675098 667000) 2944) nil (26349 28386 556527 973000) 0 nil])
([nil nil ((3023 . 3024) (3022 . 3023) 3021) nil (26349 28386 556509 197000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3024 . 3025) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -3083) (3024 . 3084)) nil (26349 28386 556508 416000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 3024) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1)) nil (26349 28386 556507 584000) 0 nil])
([nil nil ((3060 . 3073) (#("sharpening_" 0 11 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -3060) (undo-tree-id3121 . -11) (undo-tree-id3122 . -11) (undo-tree-id3123 . -11) (undo-tree-id3124 . -11) (undo-tree-id3125 . -11) (undo-tree-id3126 . -11) (undo-tree-id3127 . -11) (undo-tree-id3128 . -11) (undo-tree-id3129 . -11) (undo-tree-id3130 . -11) (undo-tree-id3131 . -11) 3071 (#("filter" 0 6 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 3071) (undo-tree-id3132 . -6) (undo-tree-id3133 . -6)) nil (26349 28386 556503 737000) 0 nil])
([nil nil ((3073 . 3075)) nil (26349 28386 556477 137000) 0 nil])
([nil nil ((3080 . 3081) 3074) nil (26349 28386 556470 624000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3023 . 3024) (#("
" 0 1 (fontified nil wrap-prefix "  " face (markdown-table-face) font-lock-multiline t)) . -3054) (3023 . 3055) (t 26349 28386 574444 525000)) nil (26349 28433 826786 579000) 0 nil])
([nil nil ((#("$G * D_x" 0 6 (face (markdown-table-face) fontified t wrap-prefix "  ") 6 7 (invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified t wrap-prefix "  ") 7 8 (face (markdown-table-face markdown-italic-face) fontified t wrap-prefix "  ")) . 3026) (undo-tree-id3167 . -7) (undo-tree-id3168 . -7) (undo-tree-id3169 . -7) 3033) nil (26349 28433 826785 136000) 0 nil])
([nil nil ((#("$" 0 1 (face (markdown-table-face) fontified t wrap-prefix "  ")) . 3026) (undo-tree-id3166 . 1)) nil (26349 28433 826782 40000) 0 nil])
([nil nil ((3026 . 3032)) nil (26349 28433 826780 788000) 0 nil])
([nil nil ((#("$G * D_y$" 0 6 (face (markdown-table-face) fontified t wrap-prefix "  ") 6 7 (invisible markdown-markup font-lock-multiline t face (markdown-markup-face markdown-table-face) fontified t wrap-prefix "  ") 7 8 (font-lock-multiline t face (markdown-table-face markdown-italic-face) fontified t wrap-prefix "  ") 8 9 (font-lock-multiline t face (markdown-table-face markdown-italic-face) fontified t wrap-prefix "  ")) . 3040) (undo-tree-id3164 . -8) (undo-tree-id3165 . -8)) nil (26349 28433 826779 977000) 0 nil])
([nil nil ((3040 . 3045)) nil (26349 28433 826767 252000) 0 nil])
([nil nil ((3048 . 3050)) nil (26349 28433 826766 792000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3047 . 3048) (#("
" 0 1 (fontified nil wrap-prefix "  " face (markdown-table-face) font-lock-multiline t)) . -3068) (3047 . 3069) 3025) nil (26349 28433 826766 10000) 0 nil])
([nil nil ((3127 . 3130)) nil (26349 28433 826764 898000) 0 nil])
([nil nil ((3071 . 3073)) nil (26349 28433 828471 310000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3130 . 3131) (nil fontified nil 3071 . 3131) (3071 . 3131) 3070) nil (26349 28444 865671 942000) 0 nil] [nil nil ((nil rear-nonsticky nil 3132 . 3133) (#("
" 0 1 (fontified nil wrap-prefix "  " face (markdown-table-face) font-lock-multiline t)) . -3153) (3132 . 3154) 3070) ((#("
|:---------:|:----:|
" 0 1 (rear-nonsticky nil font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil) 1 21 (face (markdown-table-face) fontified nil wrap-prefix "  ") 21 22 (fontified nil wrap-prefix "  " face (markdown-table-face) font-lock-multiline t)) . 3132) (undo-tree-id3170 . -21) (undo-tree-id3171 . -1) (undo-tree-id3172 . -21) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (3153 . 3154) (nil rear-nonsticky nil 3132 . 3133)) (26349 28433 826756 232000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face (markdown-table-face) wrap-prefix "  ")) . 3130) (undo-tree-id3205 . -1)) nil (26349 28444 865670 680000) 0 nil])
nil
([nil nil ((#("|" 0 1 (face (markdown-table-face) fontified t wrap-prefix "  ")) . 3130) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1)) nil (26349 28444 865666 842000) 0 nil])
([nil nil ((#("sharpened_taj_1" 0 15 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified t wrap-prefix "  ")) . 3108) (undo-tree-id3180 . -14) (undo-tree-id3181 . -14) (undo-tree-id3182 . -15) (undo-tree-id3183 . -14) (undo-tree-id3184 . -15) (undo-tree-id3185 . -14) (undo-tree-id3186 . -14) (undo-tree-id3187 . -14) (undo-tree-id3188 . -14) (undo-tree-id3189 . -13) (undo-tree-id3190 . -14) (undo-tree-id3191 . -10) (undo-tree-id3192 . -13) (undo-tree-id3193 . -9) (undo-tree-id3194 . -10) (undo-tree-id3195 . -9)) nil (26349 28444 865637 707000) 0 nil])
([nil nil ((3110 . 3111) (#("g" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified t wrap-prefix "  ")) . -3110) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) 3111 (3108 . 3111)) nil (26349 28444 863784 648000) 0 nil])
([nil nil ((#(" " 0 1 (face (markdown-table-face) fontified t wrap-prefix "  ")) . 3070) (undo-tree-id3206 . -1) (t 26349 28444 879005 424000)) nil (26349 28446 904092 834000) 0 nil])
([nil nil ((#(" " 0 1 (face (markdown-table-face) fontified t wrap-prefix "  ")) . 3070)) nil (26349 28446 904073 287000) 0 nil])
([nil nil ((#("H" 0 1 (wrap-prefix "  " fontified t)) . -3254) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) 3255 (3254 . 3255) ("Here" . -3254) (undo-tree-id3279 . -4) (undo-tree-id3280 . -1) (undo-tree-id3281 . -2) (undo-tree-id3282 . -1) (undo-tree-id3283 . -3) (undo-tree-id3284 . -2) (undo-tree-id3285 . -4) (undo-tree-id3286 . -3) (undo-tree-id3287 . -4) 3258 (3253 . 3258) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -3253) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) 3254 (3253 . 3254) (3247 . 3253) (#("E" 0 1 (wrap-prefix "  " fontified t)) . -3247) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) 3248 (3243 . 3248) (#("n" 0 1 (wrap-prefix "  " fontified t)) . -3243) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (#("g" 0 1 (wrap-prefix "  " fontified t)) . -3244) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3245) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) 3246 (3234 . 3246) (#("while" 0 5 (wrap-prefix "  " fontified t)) . -3234) (undo-tree-id3317 . -5) (undo-tree-id3318 . -1) (undo-tree-id3319 . -2) (undo-tree-id3320 . -1) (undo-tree-id3321 . -3) (undo-tree-id3322 . -2) (undo-tree-id3323 . -4) (undo-tree-id3324 . -3) (undo-tree-id3325 . -5) (undo-tree-id3326 . -4) (undo-tree-id3327 . -5) (undo-tree-id3328 . -5) (undo-tree-id3329 . -5) (undo-tree-id3330 . -5) (undo-tree-id3331 . -5) 3239 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3239) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) 3240 (3230 . 3240) (3225 . 3230) (3204 . 3225) (3183 . 3204) (#("'" 0 1 (wrap-prefix "  " fontified t)) . -3183) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) 3184 (3178 . 3184) (3177 . 3178) (t 26349 28446 918025 40000) 3177) nil (26349 28644 765518 344000) 0 nil])
([nil nil ((3255 . 3256) (3254 . 3255) 3253) nil (26349 28644 765479 30000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3259 . 3260) (nil fontified nil 3256 . 3260) (3256 . 3260)) nil (26349 28644 765478 549000) 0 nil])
([nil nil ((#("
Here" 0 1 (wrap-prefix "  " fontified t) 1 4 (wrap-prefix "  " fontified t) 4 5 (wrap-prefix "  " fontified t)) . 3255) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -4) (undo-tree-id3260 . -4) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -4) (undo-tree-id3271 . -1) (undo-tree-id3272 . -4) (undo-tree-id3273 . -4) (undo-tree-id3274 . -4) (undo-tree-id3275 . -4) 3259) nil (26349 28644 765477 356000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3408 . 3409) (nil fontified nil 3255 . 3409) (3255 . 3409)) nil (26349 28644 765464 332000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 3408) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1)) nil (26349 28644 765463 550000) 0 nil])
([nil nil ((3337 . 3349) (#("taj" 0 3 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 3337) (undo-tree-id3251 . -3) (undo-tree-id3252 . -3) (undo-tree-id3253 . -3) (undo-tree-id3254 . -3)) nil (26349 28644 765461 256000) 0 nil])
([nil nil ((3266 . 3270) (#("0" 0 1 (wrap-prefix "  " fontified t)) . -3266) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) 3267 (3259 . 3267) (3252 . 3259) (#(";" 0 1 (wrap-prefix "  " fontified t)) . -3252) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3253) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) 3254 (3252 . 3254) (#("," 0 1 (wrap-prefix "  " fontified t)) . -3252) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3253) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) 3254 (3252 . 3254)) nil (26349 28644 765456 968000) 0 nil])
([nil nil ((#("sharpened_taj_1" 0 15 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 3411) (undo-tree-id3212 . -14) (undo-tree-id3213 . -14) (undo-tree-id3214 . -15) (undo-tree-id3215 . -14) (undo-tree-id3216 . -15) (undo-tree-id3217 . -14) (undo-tree-id3218 . -14) (undo-tree-id3219 . -14) (undo-tree-id3220 . -14) (undo-tree-id3221 . -13) (undo-tree-id3222 . -14) (undo-tree-id3223 . -10) (undo-tree-id3224 . -13) (undo-tree-id3225 . -9) (undo-tree-id3226 . -10) (undo-tree-id3227 . -9)) nil (26349 28644 765438 363000) 0 nil])
([nil nil ((3420 . 3427) (3417 . 3420) (#("d" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -3417) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) 3418 (3411 . 3418)) nil (26349 28644 760943 280000) 0 nil])
([nil nil ((3411 . 3427) (#("sharpened_" 0 10 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -3411) (undo-tree-id3339 . -10) (undo-tree-id3340 . -10) (undo-tree-id3341 . -10) (undo-tree-id3342 . -10) (undo-tree-id3343 . -10) (undo-tree-id3344 . -10) (undo-tree-id3345 . -10) (undo-tree-id3346 . -10) (undo-tree-id3347 . -10) (undo-tree-id3348 . -10) (undo-tree-id3349 . -10) (undo-tree-id3350 . -10) (undo-tree-id3351 . -10) (undo-tree-id3352 . -10) (undo-tree-id3353 . -10) (undo-tree-id3354 . -10) (undo-tree-id3355 . -10) (undo-tree-id3356 . -10) (undo-tree-id3357 . -10) (undo-tree-id3358 . -10) (undo-tree-id3359 . -10) (undo-tree-id3360 . -10) (undo-tree-id3361 . -10) (undo-tree-id3362 . -10) (undo-tree-id3363 . -10) (undo-tree-id3364 . -10) (undo-tree-id3365 . -10) (undo-tree-id3366 . -10) (undo-tree-id3367 . -10) (undo-tree-id3368 . -10) (undo-tree-id3369 . -10) (undo-tree-id3370 . -10) (undo-tree-id3371 . -10) (undo-tree-id3372 . -10) (undo-tree-id3373 . -10) (undo-tree-id3374 . -10) (undo-tree-id3375 . -10) (undo-tree-id3376 . -10) (undo-tree-id3377 . -10) (undo-tree-id3378 . -10) 3421 (#("callas" 0 6 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 3421) (undo-tree-id3379 . -3) (undo-tree-id3380 . -3) (undo-tree-id3381 . 2) (undo-tree-id3382 . -3) (undo-tree-id3383 . -3) (undo-tree-id3384 . -3) (undo-tree-id3385 . -5) (undo-tree-id3386 . -5) (undo-tree-id3387 . -5) (undo-tree-id3388 . -6) (undo-tree-id3389 . -5) (undo-tree-id3390 . -6) (undo-tree-id3391 . -6) (undo-tree-id3392 . -6) (undo-tree-id3393 . -6) (undo-tree-id3394 . -6) (undo-tree-id3395 . -6) (undo-tree-id3396 . -6) (undo-tree-id3397 . -3) (undo-tree-id3398 . -3) (undo-tree-id3399 . -3) (undo-tree-id3400 . -3) (undo-tree-id3401 . -3) (undo-tree-id3402 . -3) (undo-tree-id3403 . -3) (undo-tree-id3404 . -3) (undo-tree-id3405 . -3) (undo-tree-id3406 . -3) (undo-tree-id3407 . -3) (undo-tree-id3408 . -3) (undo-tree-id3409 . -3) (undo-tree-id3410 . -3) (undo-tree-id3411 . -3) (undo-tree-id3412 . -3) (undo-tree-id3413 . -3) (undo-tree-id3414 . -3) (undo-tree-id3415 . -3) 3424 (t 26349 28644 778928 510000)) nil (26349 28672 542487 571000) 0 nil])
([nil nil ((3370 . 3371) (3368 . 3370) (#("png" 0 3 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 3368) (undo-tree-id3416 . -3) (undo-tree-id3417 . -3) (t 26349 28672 554195 720000)) nil (26349 28676 778726 709000) 0 nil])
([nil nil ((#("|![dx]({{site.baseurl}}/assets/proj2/callas_medea.jpg) | ![dx]({{site.baseurl}}/assets/proj2/callas_sharpened.png) | 
" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified nil) 1 2 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 2 3 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 3 5 (help-echo "{{site.baseurl}}/assets/proj2/callas_medea.jpg" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  " fontified nil) 5 6 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 6 7 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 7 53 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified nil) 53 54 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 54 57 (face (markdown-table-face) wrap-prefix "  " fontified nil) 57 58 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 58 59 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 59 61 (help-echo "{{site.baseurl}}/assets/proj2/callas_sharpened.png" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  " fontified nil) 61 62 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 62 63 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 63 113 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified nil) 113 114 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 114 117 (face (markdown-table-face) wrap-prefix "  " fontified nil) 117 118 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 3627) (undo-tree-id3418 . -93) (undo-tree-id3419 . -118) (undo-tree-id3420 . 65) (undo-tree-id3421 . -93) (undo-tree-id3422 . 9) (undo-tree-id3423 . -93) (undo-tree-id3424 . -93) (undo-tree-id3425 . -93) (undo-tree-id3426 . -93) (undo-tree-id3427 . -52) (undo-tree-id3428 . -93) (undo-tree-id3429 . -93) (undo-tree-id3430 . -52) (undo-tree-id3431 . -52) (undo-tree-id3432 . -52) (undo-tree-id3433 . -52) (undo-tree-id3434 . -52) (undo-tree-id3435 . -52) (undo-tree-id3436 . -52) (undo-tree-id3437 . -52) (undo-tree-id3438 . -53) (undo-tree-id3439 . -52) (undo-tree-id3440 . -53) (undo-tree-id3441 . -53) (undo-tree-id3442 . -53) (undo-tree-id3443 . -53) (undo-tree-id3444 . -118) (3509 . 3627) (#("|:---------:|:----:|
" 0 20 (face (markdown-table-face) wrap-prefix "  " fontified nil) 20 21 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 3509) (undo-tree-id3445 . -19) (undo-tree-id3446 . -19) (undo-tree-id3447 . -19) (undo-tree-id3448 . -19) (undo-tree-id3449 . -19) (undo-tree-id3450 . -19) (undo-tree-id3451 . -19) (undo-tree-id3452 . -19) (undo-tree-id3453 . -19) (undo-tree-id3454 . -19) (undo-tree-id3455 . -19) (undo-tree-id3456 . -19) (undo-tree-id3457 . -19) (undo-tree-id3458 . -19) (3391 . 3509) (#("| Before      | After |
" 0 23 (face (markdown-table-face) wrap-prefix "  " fontified nil) 23 24 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 3391) (undo-tree-id3459 . -22) (undo-tree-id3460 . -22) (undo-tree-id3461 . -22) (undo-tree-id3462 . -24) (undo-tree-id3463 . -24) (3273 . 3391) 3316 (t 26349 28676 792236 491000)) nil (26349 28692 288734 855000) 0 nil])
([nil nil ((#("." 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -3559) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) 3560 (#("jpg" 0 3 (wrap-prefix "  " font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified t)) . -3560) (undo-tree-id3479 . -3) (undo-tree-id3480 . -3) (undo-tree-id3481 . -3) (undo-tree-id3482 . -3) (undo-tree-id3483 . -3) (undo-tree-id3484 . -3) (undo-tree-id3485 . -3) 3563 (t 26349 28692 302385 704000)) nil (26349 28738 983640 524000) 0 nil])
([nil nil ((3272 . 3273) (t 26349 28738 997834 932000) 3227) nil (26349 28754 921454 975000) 0 nil])
([nil nil ((3314 . 3315) (3312 . 3314) (#("2" 0 1 (wrap-prefix "  " fontified t)) . -3312) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) 3313 (3295 . 3313) (#("f" 0 1 (wrap-prefix "  " fontified t)) . -3295) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) 3296 (3287 . 3296) (#("w" 0 1 (wrap-prefix "  " fontified t)) . -3287) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) 3288 (3271 . 3288) (t 26349 28754 936988 269000)) nil (26349 28777 839835 322000) 0 nil])
([nil nil ((3700 . 3711) (3690 . 3700) (3669 . 3690) (#("Here" 0 4 (wrap-prefix "  " fontified t)) . -3669) (undo-tree-id3667 . -4) (undo-tree-id3668 . -1) (undo-tree-id3669 . -2) (undo-tree-id3670 . -1) (undo-tree-id3671 . -3) (undo-tree-id3672 . -2) (undo-tree-id3673 . -4) (undo-tree-id3674 . -3) (undo-tree-id3675 . -4) 3673 (3669 . 3673) (3668 . 3669) (t 26349 28777 852208 716000) 3668) nil (26349 28920 894868 501000) 0 nil])
([nil nil ((3676 . 3683) (#("blur" 0 4 (wrap-prefix "  " fontified t)) . 3676) (undo-tree-id3659 . -1) (undo-tree-id3660 . -2) (undo-tree-id3661 . -1) (undo-tree-id3662 . -3) (undo-tree-id3663 . -2) (undo-tree-id3664 . -4) (undo-tree-id3665 . -3) (undo-tree-id3666 . -4)) nil (26349 28920 894863 392000) 0 nil])
([nil nil ((3729 . 3730) (3723 . 3729) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -3723) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (#("d" 0 1 (wrap-prefix "  " fontified t)) . -3724) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3725) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) 3726 (3705 . 3726) (#("sharpened" 0 9 (wrap-prefix "  " fontified t)) . 3705) (undo-tree-id3623 . -8) (undo-tree-id3624 . -1) (undo-tree-id3625 . -2) (undo-tree-id3626 . -1) (undo-tree-id3627 . -3) (undo-tree-id3628 . -2) (undo-tree-id3629 . -4) (undo-tree-id3630 . -3) (undo-tree-id3631 . -5) (undo-tree-id3632 . -4) (undo-tree-id3633 . -6) (undo-tree-id3634 . -5) (undo-tree-id3635 . -7) (undo-tree-id3636 . -6) (undo-tree-id3637 . -8) (undo-tree-id3638 . -7) (undo-tree-id3639 . -9) (undo-tree-id3640 . -8) (undo-tree-id3641 . -9) (undo-tree-id3642 . -9) (undo-tree-id3643 . -9) (undo-tree-id3644 . -9) (undo-tree-id3645 . -9) (undo-tree-id3646 . -9) (undo-tree-id3647 . -9) (undo-tree-id3648 . -8) (undo-tree-id3649 . -8) (undo-tree-id3650 . -8) (undo-tree-id3651 . -8) (undo-tree-id3652 . -8) (undo-tree-id3653 . -8) (undo-tree-id3654 . -8) (undo-tree-id3655 . -8) (undo-tree-id3656 . -8) (undo-tree-id3657 . -8) (undo-tree-id3658 . -8) 3713) nil (26349 28920 894858 402000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix "  " fontified t)) . 3700) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (3699 . 3700) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3699) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) 3700 (#("then" 0 4 (wrap-prefix "  " fontified t)) . 3700) (undo-tree-id3583 . -1) (undo-tree-id3584 . -2) (undo-tree-id3585 . -1) (undo-tree-id3586 . -3) (undo-tree-id3587 . -2) (undo-tree-id3588 . -4) (undo-tree-id3589 . -3) (undo-tree-id3590 . -4) (undo-tree-id3591 . -4) (undo-tree-id3592 . -4) (undo-tree-id3593 . -4) (undo-tree-id3594 . -4)) nil (26349 28920 894571 228000) 0 nil])
([nil nil ((3725 . 3727)) nil (26349 28920 887936 764000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3727 . 3728) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -3786) (3727 . 3787)) nil (26349 28920 887935 982000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 3727) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1)) nil (26349 28920 887934 710000) 0 nil])
([nil nil ((3763 . 3782) (#("sharpening_" 0 11 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -3763) (undo-tree-id3495 . -11) (undo-tree-id3496 . -11) (undo-tree-id3497 . -11) (undo-tree-id3498 . -11) (undo-tree-id3499 . -11) (undo-tree-id3500 . -11) (undo-tree-id3501 . -11) (undo-tree-id3502 . -11) (undo-tree-id3503 . -11) (undo-tree-id3504 . -11) (undo-tree-id3505 . -11) 3774 (#("filter" 0 6 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 3774) (undo-tree-id3506 . -6) (undo-tree-id3507 . -6)) nil (26349 28920 887925 793000) 0 nil])
([nil nil ((3787 . 3788) 3781) nil (26349 28920 887899 794000) 0 nil])
([nil nil ((#("e" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 3780) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (t 26349 28920 907584 959000)) nil (26349 28933 963921 981000) 0 nil])
([nil nil ((#("d" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 3780)) nil (26349 28933 963150 180000) 0 nil])
([nil nil ((#("." 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -3780) (undo-tree-id3682 . 1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) 3781 (#("png" 0 3 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 3781) (t 26349 28933 969710 615000)) nil (26349 28940 888269 177000) 0 nil])
([nil nil ((#("Notice" 0 6 (wrap-prefix "  " fontified t)) . -3783) (undo-tree-id3751 . -6) (undo-tree-id3752 . -1) (undo-tree-id3753 . -2) (undo-tree-id3754 . -1) (undo-tree-id3755 . -3) (undo-tree-id3756 . -2) (undo-tree-id3757 . -4) (undo-tree-id3758 . -3) (undo-tree-id3759 . -5) (undo-tree-id3760 . -4) (undo-tree-id3761 . -6) (undo-tree-id3762 . -5) (undo-tree-id3763 . -6) (undo-tree-id3764 . -6) (undo-tree-id3765 . -6) (undo-tree-id3766 . -6) (undo-tree-id3767 . -6) (undo-tree-id3768 . -6) (undo-tree-id3769 . -6) (undo-tree-id3770 . -6) (undo-tree-id3771 . -6) (undo-tree-id3772 . -6) (undo-tree-id3773 . -6) (undo-tree-id3774 . -6) (undo-tree-id3775 . -6) (undo-tree-id3776 . -6) (undo-tree-id3777 . -6) (undo-tree-id3778 . -6) (undo-tree-id3779 . -6) 3789 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3789) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) 3790 (#("that" 0 4 (wrap-prefix "  " fontified t)) . -3790) (undo-tree-id3796 . -4) (undo-tree-id3797 . -1) (undo-tree-id3798 . -2) (undo-tree-id3799 . -1) (undo-tree-id3800 . -3) (undo-tree-id3801 . -2) (undo-tree-id3802 . -4) (undo-tree-id3803 . -3) (undo-tree-id3804 . -4) (undo-tree-id3805 . -4) (undo-tree-id3806 . -4) 3794 (3783 . 3794) (3782 . 3783) (3781 . 3782) (t 26349 28940 895777 244000) 3779) nil (26349 28995 242158 366000) 0 nil])
([nil nil ((3873 . 3888) (3867 . 3873) (3846 . 3867) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3846) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) 3847 (#("is" 0 2 (wrap-prefix "  " fontified t)) . -3847) (undo-tree-id3707 . -2) (undo-tree-id3708 . -1) (undo-tree-id3709 . -2) (undo-tree-id3710 . -1) (undo-tree-id3711 . -2) (undo-tree-id3712 . -2) (undo-tree-id3713 . -2) (undo-tree-id3714 . -2) (undo-tree-id3715 . -2) (undo-tree-id3716 . -2) 3849 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3849) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) 3850 (3839 . 3850) (3826 . 3839) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3826) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (#("." 0 1 (wrap-prefix "  " fontified t)) . -3827) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) 3828 (3825 . 3828) (#("s" 0 1 (wrap-prefix "  " fontified t)) . -3825) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) 3826 (3807 . 3826) (#("s" 0 1 (wrap-prefix "  " fontified t)) . -3807) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (#("h" 0 1 (wrap-prefix "  " fontified t)) . -3808) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) 3809 (3801 . 3809) (3796 . 3801) (3775 . 3796) (3754 . 3775) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3754) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) 3755 (3742 . 3755) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -3742) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) 3743 (3735 . 3743) (3725 . 3735)) nil (26349 28995 233367 527000) 0 nil])
([nil nil ((3700 . 3701) (t 26349 28995 254302 895000)) nil (26349 29026 117415 661000) 0 nil])
([nil nil ((#(" " 0 1 (wrap-prefix "  " fontified t)) . -3878) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (#("o" 0 1 (wrap-prefix "  " fontified t)) . -3879) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (#("r" 0 1 (wrap-prefix "  " fontified t)) . -3880) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -3881) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) 3882 (#("inver" 0 5 (wrap-prefix "  " fontified t)) . -3882) (undo-tree-id3903 . -5) (undo-tree-id3904 . -1) (undo-tree-id3905 . -2) (undo-tree-id3906 . -1) (undo-tree-id3907 . -3) (undo-tree-id3908 . -2) (undo-tree-id3909 . -4) (undo-tree-id3910 . -3) (undo-tree-id3911 . -5) (undo-tree-id3912 . -4) (undo-tree-id3913 . -5) 3887 (3878 . 3887)) nil (26349 29026 117411 473000) 0 nil])
([nil nil ((3897 . 3916) (3888 . 3897)) nil (26349 29026 113482 271000) 0 nil])
([nil nil ((3863 . 3874) (#("aren't" 0 6 (wrap-prefix "  " fontified t)) . 3863) (t 26349 29026 130602 545000)) nil (26349 29038 589004 350000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3981 . 3982) (#("
" 0 1 (fontified nil wrap-prefix "  " font-lock-multiline t)) . -4005) (3981 . 4006) (t 26349 29038 604723 610000)) nil (26349 31961 876493 486000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t wrap-prefix "  ")) . 3980)) nil (26349 31961 876492 735000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 3980) (undo-tree-id4224 . -1)) nil (26349 31961 876492 53000) 0 nil])
([nil nil ((3984 . 3985) (#("1" 0 1 (face markdown-header-face-1 markdown-heading-1-atx (3980 4003 nil nil nil nil nil nil 3980 3982 3982 4003 4003 4003 #<buffer 2024-09-18-project2.markdown>) markdown-heading (3980 4003 nil nil nil nil nil nil 3980 3982 3982 4003 4003 4003 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . -3984) (undo-tree-id4223 . -1) 3985) nil (26349 31961 876491 121000) 0 nil])
([nil nil ((3986 . 3999) (#("Image" 0 5 (face markdown-header-face-1 markdown-heading-1-atx (3980 3992 nil nil nil nil nil nil 3980 3982 3982 3992 3992 3992 #<buffer 2024-09-18-project2.markdown>) markdown-heading (3980 3992 nil nil nil nil nil nil 3980 3982 3982 3992 3992 3992 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . -3986) (undo-tree-id4220 . -5) 3991 (#(" " 0 1 (face markdown-header-face-1 markdown-heading-1-atx (3980 3993 nil nil nil nil nil nil 3980 3982 3982 3993 3993 3993 #<buffer 2024-09-18-project2.markdown>) markdown-heading (3980 3993 nil nil nil nil nil nil 3980 3982 3982 3993 3993 3993 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . -3991) (undo-tree-id4221 . -1) 3992 (#("Sharpening" 0 10 (face markdown-header-face-1 markdown-heading-1-atx (3980 4003 nil nil nil nil nil nil 3980 3982 3982 4003 4003 4003 #<buffer 2024-09-18-project2.markdown>) markdown-heading (3980 4003 nil nil nil nil nil nil 3980 3982 3982 4003 4003 4003 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . -3992) (undo-tree-id4222 . -10) 4002) nil (26349 31961 876487 925000) 0 nil])
([nil nil ((4001 . 4002) (4000 . 4001) 3998) nil (26349 31961 876486 553000) 0 nil])
([nil nil ((4108 . 4115) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -4108) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4109) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) 4110 (4098 . 4110) (4085 . 4098) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -4085) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -4086) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (#("n" 0 1 (wrap-prefix "  " fontified t)) . -4087) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) 4088 (4071 . 4088) (4068 . 4072) (#("&" 0 1 (wrap-prefix "  " fontified t)) . -4068) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (#("*" 0 1 (face (markdown-markup-face) invisible markdown-markup font-lock-multiline t wrap-prefix "  " fontified t)) . -4069) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) 4070 (4054 . 4070) (4051 . 4054) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -4051) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -4052) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4053) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) 4054 (4037 . 4054) (#("d" 0 1 (wrap-prefix "  " fontified t)) . -4037) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -4038) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4039) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) 4040 (4033 . 4040) (#("Mon" 0 3 (wrap-prefix "  " fontified t)) . -4033) (undo-tree-id4200 . -3) (undo-tree-id4201 . -1) (undo-tree-id4202 . -2) (undo-tree-id4203 . -1) (undo-tree-id4204 . -3) (undo-tree-id4205 . -2) (undo-tree-id4206 . -3) (undo-tree-id4207 . -3) 4036 (4030 . 4036) (4017 . 4030) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -4017) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) 4018 (4017 . 4018) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -4017) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) 4018 (4013 . 4018) (#("i" 0 1 (wrap-prefix "  " fontified t)) . -4013) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) 4014 (4005 . 4014) (#("u" 0 1 (wrap-prefix "  " fontified t)) . -4005) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) 4006 (4002 . 4006)) nil (26349 31961 876482 245000) 0 nil])
([nil nil ((#("H" 0 1 (wrap-prefix "  " fontified t)) . -4163) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) 4164 (4157 . 4164) (4152 . 4157) (4131 . 4152) (#("hipas" 0 5 (wrap-prefix "  " fontified t)) . -4131) (undo-tree-id4085 . -5) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -2) (undo-tree-id4092 . -1) (undo-tree-id4093 . -3) (undo-tree-id4094 . -2) (undo-tree-id4095 . -4) (undo-tree-id4096 . -3) (undo-tree-id4097 . -5) (undo-tree-id4098 . -4) (undo-tree-id4099 . -5) 4136 (4132 . 4136) (#("y" 0 1 (wrap-prefix "  " fontified t)) . -4132) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) 4133 (4131 . 4133) (4125 . 4131) (4116 . 4125) (#("," 0 1 (wrap-prefix "  " fontified t)) . -4116) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (#("." 0 1 (wrap-prefix "  " fontified t)) . -4117) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) 4118 (4116 . 4118) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4116) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) 4117 (4116 . 4117)) nil (26349 31961 876405 419000) 0 nil])
([nil nil ((4263 . 4264) (4246 . 4263) (#("#" 0 1 (wrap-prefix "  " fontified t)) . -4246) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) 4247 (4235 . 4247) (#("u" 0 1 (wrap-prefix "  " fontified t)) . -4235) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) 4236 (4223 . 4236) (4216 . 4223) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -4216) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) 4217 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4217) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) 4218 (#("is" 0 2 (wrap-prefix "  " fontified t)) . -4218) (undo-tree-id4019 . -2) (undo-tree-id4020 . -1) (undo-tree-id4021 . -2) (undo-tree-id4022 . -1) (undo-tree-id4023 . -2) (undo-tree-id4024 . -2) (undo-tree-id4025 . -2) (undo-tree-id4026 . -2) (undo-tree-id4027 . -2) (undo-tree-id4028 . -2) (undo-tree-id4029 . -2) (undo-tree-id4030 . -2) (undo-tree-id4031 . -2) (undo-tree-id4032 . -2) (undo-tree-id4033 . -2) (undo-tree-id4034 . -2) (undo-tree-id4035 . -2) (undo-tree-id4036 . -2) (undo-tree-id4037 . -2) (undo-tree-id4038 . -2) (undo-tree-id4039 . -2) 4220 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4220) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) 4221 (#("the" 0 3 (wrap-prefix "  " fontified t)) . -4221) (undo-tree-id4056 . -3) (undo-tree-id4057 . -1) (undo-tree-id4058 . -2) (undo-tree-id4059 . -1) (undo-tree-id4060 . -3) (undo-tree-id4061 . -2) (undo-tree-id4062 . -3) (undo-tree-id4063 . -3) (undo-tree-id4064 . -3) (undo-tree-id4065 . -3) (undo-tree-id4066 . -3) 4224 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4224) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) 4225 (4223 . 4225) (4202 . 4223) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -4202) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) 4203 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4203) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) 4204 (4184 . 4204) (4163 . 4184)) nil (26349 31961 876385 381000) 0 nil])
([nil nil ((4256 . 4264) (#("p" 0 1 (wrap-prefix "  " fontified t)) . -4256) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) 4257 (4255 . 4257)) nil (26349 31961 876232 973000) 0 nil])
([nil nil ((4287 . 4288) (#("." 0 1 (wrap-prefix "  " fontified t)) . -4287) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) 4288 (4273 . 4288)) nil (26349 31961 876230 267000) 0 nil])
([nil nil ((4289 . 4290) (4288 . 4289) 4055) nil (26349 31961 876226 520000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4290 . 4291) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -4345) (4290 . 4346)) nil (26349 31961 876225 849000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 4290) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1)) nil (26349 31961 876225 238000) 0 nil])
([nil nil ((4330 . 4339) (#("-" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4330) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) 4331 (4326 . 4331) (#("blur_" 0 5 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4326) (undo-tree-id3919 . -5) (undo-tree-id3920 . -5) (undo-tree-id3921 . -5) (undo-tree-id3922 . -5) (undo-tree-id3923 . -5) (undo-tree-id3924 . -5) (undo-tree-id3925 . -5) (undo-tree-id3926 . -5) (undo-tree-id3927 . -5) (undo-tree-id3928 . -5) (undo-tree-id3929 . -5) 4331 (#("then_" 0 5 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4331) (undo-tree-id3930 . -5) (undo-tree-id3931 . -5) (undo-tree-id3932 . -5) (undo-tree-id3933 . -5) (undo-tree-id3934 . -5) (undo-tree-id3935 . -5) (undo-tree-id3936 . -5) (undo-tree-id3937 . -5) (undo-tree-id3938 . -5) 4336 (#("sharpen" 0 7 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4336) (undo-tree-id3939 . -7) (undo-tree-id3940 . -7) (undo-tree-id3941 . -7) (undo-tree-id3942 . -7) (undo-tree-id3943 . -7) (undo-tree-id3944 . -7) (undo-tree-id3945 . -7) 4343) nil (26349 31961 876218 635000) 0 nil])
([nil nil ((4340 . 4341) 4338) nil (26349 31961 868554 219000) 0 nil])
([nil nil ((4341 . 4358) (#("before" 0 6 (wrap-prefix "  " fontified t)) . -4341) (undo-tree-id4225 . -6) (undo-tree-id4226 . -1) (undo-tree-id4227 . -2) (undo-tree-id4228 . -1) (undo-tree-id4229 . -3) (undo-tree-id4230 . -2) (undo-tree-id4231 . -4) (undo-tree-id4232 . -3) (undo-tree-id4233 . -5) (undo-tree-id4234 . -4) (undo-tree-id4235 . -6) (undo-tree-id4236 . -5) (undo-tree-id4237 . -6) (undo-tree-id4238 . -6) (undo-tree-id4239 . -6) (undo-tree-id4240 . -6) (undo-tree-id4241 . -6) 4347 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4347) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) 4348 (4345 . 4348) (4324 . 4345) (#("r" 0 1 (wrap-prefix "  " fontified t)) . -4324) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (#("o" 0 1 (wrap-prefix "  " fontified t)) . -4325) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (#("u" 0 1 (wrap-prefix "  " fontified t)) . -4326) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) 4327 (4320 . 4327) (4317 . 4320) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4317) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) 4318 (4306 . 4318) (#("$" 0 1 (wrap-prefix "  " fontified t)) . -4306) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) 4307 (4306 . 4307) (#("#" 0 1 (wrap-prefix "  " fontified t)) . -4306) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) 4307 (4306 . 4307) (#("$" 0 1 (wrap-prefix "  " fontified t)) . -4306) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) 4307 (4302 . 4307) (4294 . 4302) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -4294) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (#("d" 0 1 (wrap-prefix "  " fontified t)) . -4295) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) 4296 (4294 . 4296) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4294) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) 4295 (4275 . 4295) (4273 . 4275) (#(":" 0 1 (wrap-prefix "  " fontified t)) . 4273) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4273) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) 4274 (#("This" 0 4 (wrap-prefix "  " fontified t)) . -4274) (undo-tree-id4320 . -4) (undo-tree-id4321 . -4) (undo-tree-id4322 . -4) (undo-tree-id4323 . -4) (undo-tree-id4324 . -4) (undo-tree-id4325 . -4) (undo-tree-id4326 . -4) (undo-tree-id4327 . -4) (undo-tree-id4328 . -4) (undo-tree-id4329 . -4) (undo-tree-id4330 . -4) (undo-tree-id4331 . -4) (undo-tree-id4332 . -4) (undo-tree-id4333 . -4) (undo-tree-id4334 . -4) (undo-tree-id4335 . -4) (undo-tree-id4336 . -4) (undo-tree-id4337 . -4) (undo-tree-id4338 . -4) (undo-tree-id4339 . -4) (undo-tree-id4340 . -4) (undo-tree-id4341 . -4) (undo-tree-id4342 . -4) (undo-tree-id4343 . -4) 4278 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4278) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) 4279 (#("gives" 0 5 (wrap-prefix "  " fontified t)) . -4279) (undo-tree-id4367 . -5) (undo-tree-id4368 . -5) (undo-tree-id4369 . -5) (undo-tree-id4370 . -5) (undo-tree-id4371 . -5) (undo-tree-id4372 . -5) (undo-tree-id4373 . -5) (undo-tree-id4374 . -5) (undo-tree-id4375 . -5) (undo-tree-id4376 . -5) (undo-tree-id4377 . -5) (undo-tree-id4378 . -5) (undo-tree-id4379 . -5) (undo-tree-id4380 . -5) (undo-tree-id4381 . -5) (undo-tree-id4382 . -5) (undo-tree-id4383 . -5) (undo-tree-id4384 . -5) 4284 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4284) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) 4285 (#("us" 0 2 (wrap-prefix "  " fontified t)) . -4285) (undo-tree-id4402 . -2) (undo-tree-id4403 . -2) (undo-tree-id4404 . -2) (undo-tree-id4405 . -2) (undo-tree-id4406 . -2) (undo-tree-id4407 . -2) (undo-tree-id4408 . -2) (undo-tree-id4409 . -2) (undo-tree-id4410 . -2) 4287 (t 26349 31961 889231 713000)) nil (26349 32001 344720 607000) 0 nil])
([nil nil ((4340 . 4341) (t 26349 32001 357617 605000)) nil (26349 32141 155484 346000) 0 nil])
([nil nil ((4319 . 4324)) nil (26349 32141 155483 214000) 0 nil])
([nil nil ((4384 . 4386) (4363 . 4384)) nil (26349 32141 155476 732000) 0 nil])
([nil nil ((4483 . 4492) (4462 . 4483) (4441 . 4462) (4440 . 4441) (t 26349 32141 172984 542000) 4440) nil (26349 32371 408470 272000) 0 nil])
([nil nil ((4477 . 4478) (#("#" 0 1 (wrap-prefix "  " fontified t)) . -4477) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) 4478 (4477 . 4478)) nil (26349 32371 408468 719000) 0 nil])
([nil nil ((#("*" 0 1 (wrap-prefix "  " fontified t)) . -4493) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) 4494 (4492 . 4494)) nil (26349 32371 408466 84000) 0 nil])
([nil nil ((4539 . 4545) (#("&" 0 1 (wrap-prefix "  " fontified t)) . -4539) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (#("*" 0 1 (face (markdown-markup-face) invisible markdown-markup font-lock-multiline t wrap-prefix "  " fontified t)) . -4540) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) 4541 (4533 . 4541) (#("M" 0 1 (wrap-prefix "  " fontified t)) . -4533) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) 4534 (4529 . 4534) (#("the" 0 3 (wrap-prefix "  " fontified t)) . -4529) (undo-tree-id4544 . -3) (undo-tree-id4545 . -1) (undo-tree-id4546 . -2) (undo-tree-id4547 . -1) (undo-tree-id4548 . -3) (undo-tree-id4549 . -2) (undo-tree-id4550 . -3) (undo-tree-id4551 . -3) (undo-tree-id4552 . -3) (undo-tree-id4553 . -3) (undo-tree-id4554 . -3) (undo-tree-id4555 . -3) (undo-tree-id4556 . -3) (undo-tree-id4557 . -3) (undo-tree-id4558 . -3) (undo-tree-id4559 . -3) (undo-tree-id4560 . -3) (undo-tree-id4561 . -3) (undo-tree-id4562 . -3) (undo-tree-id4563 . -3) (undo-tree-id4564 . -3) (undo-tree-id4565 . -3) (undo-tree-id4566 . -3) 4532 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4532) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) 4533 (#("savio" 0 5 (wrap-prefix "  " fontified t)) . -4533) (undo-tree-id4583 . -5) (undo-tree-id4584 . -1) (undo-tree-id4585 . -2) (undo-tree-id4586 . -1) (undo-tree-id4587 . -3) (undo-tree-id4588 . -2) (undo-tree-id4589 . -4) (undo-tree-id4590 . -3) (undo-tree-id4591 . -5) (undo-tree-id4592 . -4) (undo-tree-id4593 . -5) 4538 (4533 . 4538) (4515 . 4533) (4494 . 4515)) nil (26349 32371 408462 77000) 0 nil])
([nil nil ((#("with" 0 4 (wrap-prefix "  " fontified t)) . 4541) (undo-tree-id4508 . -3) (undo-tree-id4509 . -1) (undo-tree-id4510 . -2) (undo-tree-id4511 . -1) (undo-tree-id4512 . -3) (undo-tree-id4513 . -2) (undo-tree-id4514 . -4) (undo-tree-id4515 . -3) (undo-tree-id4516 . -4) (undo-tree-id4517 . -4) (undo-tree-id4518 . -4) (undo-tree-id4519 . -4) (undo-tree-id4520 . -3) (undo-tree-id4521 . -3) (undo-tree-id4522 . -3) (undo-tree-id4523 . -3) (undo-tree-id4524 . -3) (undo-tree-id4525 . -3) (undo-tree-id4526 . -3) (undo-tree-id4527 . -3) (undo-tree-id4528 . -3) 4544) nil (26349 32371 408427 80000) 0 nil])
([nil nil ((4631 . 4633) (4627 . 4631) (4606 . 4627) (4603 . 4606) (#("m" 0 1 (wrap-prefix "  " fontified t)) . -4603) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (#("a" 0 1 (wrap-prefix "  " fontified t)) . -4604) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) 4605 (4586 . 4605) (#("t" 0 1 (wrap-prefix "  " fontified t)) . -4586) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (#("h" 0 1 (wrap-prefix "  " fontified t)) . -4587) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -4588) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4589) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (#("F" 0 1 (wrap-prefix "  " fontified t)) . -4590) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) 4591 (4584 . 4591) (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4584) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (#("w" 0 1 (wrap-prefix "  " fontified t)) . -4585) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) 4586 (4577 . 4586) (4571 . 4577) (4550 . 4571) (#("s" 0 1 (wrap-prefix "  " fontified t)) . -4550) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (#("u" 0 1 (wrap-prefix "  " fontified t)) . -4551) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) 4552 (4541 . 4552)) nil (26349 32371 408404 998000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4633 . 4634) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -4684) (4633 . 4685)) nil (26349 32371 402730 311000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 4633) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1)) nil (26349 32371 402729 369000) 0 nil])
([nil nil ((4672 . 4676) (4669 . 4672) (#("highpass" 0 8 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 4669) (undo-tree-id4413 . -7) (undo-tree-id4414 . -8) (undo-tree-id4415 . -7) (undo-tree-id4416 . -8) (undo-tree-id4417 . -7) (undo-tree-id4418 . -7) (undo-tree-id4419 . -7) 4676) nil (26349 32371 402725 51000) 0 nil])
([nil nil ((4677 . 4682) (#("lisa" 0 4 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 4677) (undo-tree-id4411 . -4) (undo-tree-id4412 . -4)) nil (26349 32371 402716 825000) 0 nil])
([nil nil ((4683 . 4684) 4681) nil (26349 32371 402699 252000) 0 nil])
([nil nil ((4683 . 4684) (t 26349 32371 421235 709000) 4681) nil (26349 32559 431529 534000) 0 nil])
([nil nil ((4698 . 4709) (4694 . 4698) (#("at" 0 2 (wrap-prefix "  " fontified t)) . -4694) (undo-tree-id4600 . -2) (undo-tree-id4601 . -1) (undo-tree-id4602 . -2) (undo-tree-id4603 . -1) (undo-tree-id4604 . -2) (undo-tree-id4605 . -2) (undo-tree-id4606 . -2) (undo-tree-id4607 . -2) (undo-tree-id4608 . -2) 4696 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4696) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) 4697 (4696 . 4697) (4675 . 4696) (4661 . 4675) (#("limits" 0 6 (wrap-prefix "  " fontified t)) . -4661) (undo-tree-id4613 . -6) (undo-tree-id4614 . -1) (undo-tree-id4615 . -2) (undo-tree-id4616 . -1) (undo-tree-id4617 . -3) (undo-tree-id4618 . -2) (undo-tree-id4619 . -4) (undo-tree-id4620 . -3) (undo-tree-id4621 . -5) (undo-tree-id4622 . -4) (undo-tree-id4623 . -6) (undo-tree-id4624 . -5) (undo-tree-id4625 . -6) (undo-tree-id4626 . -6) (undo-tree-id4627 . -6) (undo-tree-id4628 . -6) (undo-tree-id4629 . -6) (undo-tree-id4630 . -6) (undo-tree-id4631 . -6) (undo-tree-id4632 . -6) (undo-tree-id4633 . -6) (undo-tree-id4634 . -6) (undo-tree-id4635 . -6) (undo-tree-id4636 . -6) (undo-tree-id4637 . -6) (undo-tree-id4638 . -6) (undo-tree-id4639 . -6) (undo-tree-id4640 . -6) (undo-tree-id4641 . -6) (undo-tree-id4642 . -6) (undo-tree-id4643 . -6) (undo-tree-id4644 . -6) (undo-tree-id4645 . -6) (undo-tree-id4646 . -6) (undo-tree-id4647 . -6) (undo-tree-id4648 . -6) (undo-tree-id4649 . -6) (undo-tree-id4650 . -6) (undo-tree-id4651 . -6) (undo-tree-id4652 . -6) (undo-tree-id4653 . -6) (undo-tree-id4654 . -6) (undo-tree-id4655 . -6) (undo-tree-id4656 . -6) (undo-tree-id4657 . -6) (undo-tree-id4658 . -6) (undo-tree-id4659 . -6) (undo-tree-id4660 . -6) (undo-tree-id4661 . -6) (undo-tree-id4662 . -6) (undo-tree-id4663 . -6) (undo-tree-id4664 . -6) (undo-tree-id4665 . -6) (undo-tree-id4666 . -6) (undo-tree-id4667 . -6) (undo-tree-id4668 . -6) (undo-tree-id4669 . -6) (undo-tree-id4670 . -6) (undo-tree-id4671 . -6) (undo-tree-id4672 . -6) (undo-tree-id4673 . -6) (undo-tree-id4674 . -6) (undo-tree-id4675 . -6) (undo-tree-id4676 . -6) (undo-tree-id4677 . -6) (undo-tree-id4678 . -6) (undo-tree-id4679 . -6) (undo-tree-id4680 . -6) (undo-tree-id4681 . -6) 4667 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4667) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) 4668 (#("the" 0 3 (wrap-prefix "  " fontified t)) . -4668) (undo-tree-id4738 . -3) (undo-tree-id4739 . -1) (undo-tree-id4740 . -2) (undo-tree-id4741 . -1) (undo-tree-id4742 . -3) (undo-tree-id4743 . -2) (undo-tree-id4744 . -3) (undo-tree-id4745 . -3) (undo-tree-id4746 . -3) (undo-tree-id4747 . -3) (undo-tree-id4748 . -3) (undo-tree-id4749 . -3) (undo-tree-id4750 . -3) (undo-tree-id4751 . -3) (undo-tree-id4752 . -3) (undo-tree-id4753 . -3) (undo-tree-id4754 . -3) (undo-tree-id4755 . -3) (undo-tree-id4756 . -3) (undo-tree-id4757 . -3) (undo-tree-id4758 . -3) (undo-tree-id4759 . -3) (undo-tree-id4760 . -3) (undo-tree-id4761 . -3) (undo-tree-id4762 . -3) (undo-tree-id4763 . -3) (undo-tree-id4764 . -3) (undo-tree-id4765 . -3) (undo-tree-id4766 . -3) (undo-tree-id4767 . -3) (undo-tree-id4768 . -3) (undo-tree-id4769 . -3) (undo-tree-id4770 . -3) (undo-tree-id4771 . -3) (undo-tree-id4772 . -3) (undo-tree-id4773 . -3) (undo-tree-id4774 . -3) (undo-tree-id4775 . -3) (undo-tree-id4776 . -3) (undo-tree-id4777 . -3) (undo-tree-id4778 . -3) (undo-tree-id4779 . -3) (undo-tree-id4780 . -3) (undo-tree-id4781 . -3) (undo-tree-id4782 . -3) (undo-tree-id4783 . -3) (undo-tree-id4784 . -3) (undo-tree-id4785 . -3) (undo-tree-id4786 . -3) (undo-tree-id4787 . -3) (undo-tree-id4788 . -3) 4671 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4671) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) 4672 (#("amount" 0 6 (wrap-prefix "  " fontified t)) . -4672) (undo-tree-id4833 . -6) (undo-tree-id4834 . -1) (undo-tree-id4835 . -2) (undo-tree-id4836 . -1) (undo-tree-id4837 . -3) (undo-tree-id4838 . -2) (undo-tree-id4839 . -4) (undo-tree-id4840 . -3) (undo-tree-id4841 . -5) (undo-tree-id4842 . -4) (undo-tree-id4843 . -6) (undo-tree-id4844 . -5) (undo-tree-id4845 . -6) (undo-tree-id4846 . -6) (undo-tree-id4847 . -6) (undo-tree-id4848 . -6) (undo-tree-id4849 . -6) (undo-tree-id4850 . -6) (undo-tree-id4851 . -6) (undo-tree-id4852 . -6) (undo-tree-id4853 . -6) (undo-tree-id4854 . -6) (undo-tree-id4855 . -6) (undo-tree-id4856 . -6) (undo-tree-id4857 . -6) (undo-tree-id4858 . -6) (undo-tree-id4859 . -6) (undo-tree-id4860 . -6) (undo-tree-id4861 . -6) (undo-tree-id4862 . -6) (undo-tree-id4863 . -6) (undo-tree-id4864 . -6) (undo-tree-id4865 . -6) (undo-tree-id4866 . -6) (undo-tree-id4867 . -6) (undo-tree-id4868 . -6) (undo-tree-id4869 . -6) (undo-tree-id4870 . -6) 4678 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4678) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) 4679 (#("of" 0 2 (wrap-prefix "  " fontified t)) . -4679) (undo-tree-id4896 . -2) (undo-tree-id4897 . -1) (undo-tree-id4898 . -2) (undo-tree-id4899 . -1) (undo-tree-id4900 . -2) (undo-tree-id4901 . -2) (undo-tree-id4902 . -2) (undo-tree-id4903 . -2) (undo-tree-id4904 . -2) (undo-tree-id4905 . -2) (undo-tree-id4906 . -2) (undo-tree-id4907 . -2) (undo-tree-id4908 . -2) (undo-tree-id4909 . -2) (undo-tree-id4910 . -2) (undo-tree-id4911 . -2) (undo-tree-id4912 . -2) (undo-tree-id4913 . -2) (undo-tree-id4914 . -2) (undo-tree-id4915 . -2) 4681 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4681) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) 4682 (#("non" 0 3 (wrap-prefix "  " fontified t)) . -4682) (undo-tree-id4931 . -3) (undo-tree-id4932 . -1) (undo-tree-id4933 . -2) (undo-tree-id4934 . -1) (undo-tree-id4935 . -3) (undo-tree-id4936 . -2) (undo-tree-id4937 . -3) (undo-tree-id4938 . -3) 4685 (4682 . 4685) (4681 . 4682) (4660 . 4681) (4639 . 4660) (#("how" 0 3 (wrap-prefix "  " fontified t)) . -4639) (undo-tree-id4939 . -3) (undo-tree-id4940 . -1) (undo-tree-id4941 . -2) (undo-tree-id4942 . -1) (undo-tree-id4943 . -3) (undo-tree-id4944 . -2) (undo-tree-id4945 . -3) (undo-tree-id4946 . -3) (undo-tree-id4947 . -3) (undo-tree-id4948 . -3) (undo-tree-id4949 . -3) 4642 (#(" " 0 1 (wrap-prefix "  " fontified t)) . -4642) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) 4643 (4639 . 4643) (#("the" 0 3 (wrap-prefix "  " fontified t)) . -4639) (undo-tree-id4954 . -3) (undo-tree-id4955 . -1) (undo-tree-id4956 . -2) (undo-tree-id4957 . -1) (undo-tree-id4958 . -3) (undo-tree-id4959 . -2) (undo-tree-id4960 . -3) 4642 (4635 . 4642) (#("e" 0 1 (wrap-prefix "  " fontified t)) . -4635) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) 4636 (4630 . 4636) (#(":" 0 1 (wrap-prefix "  " fontified t)) . -4630) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) 4631) nil (26349 32559 431515 898000) 0 nil])
([nil nil ((4670 . 4671) (t 26349 32559 445073 597000)) nil (26349 32577 412907 668000) 0 nil])
([nil nil ((4839 . 4845) (4818 . 4839) (#("at" 0 2 (fontified t wrap-prefix "  ")) . -4818) (undo-tree-id5344 . -2) (undo-tree-id5345 . -1) (undo-tree-id5346 . -2) (undo-tree-id5347 . -1) (undo-tree-id5348 . -2) (undo-tree-id5349 . -2) (undo-tree-id5350 . -2) (undo-tree-id5351 . -2) (undo-tree-id5352 . -2) (undo-tree-id5353 . -2) (undo-tree-id5354 . -2) (undo-tree-id5355 . -2) (undo-tree-id5356 . -2) (undo-tree-id5357 . -2) (undo-tree-id5358 . -2) (undo-tree-id5359 . -2) (undo-tree-id5360 . -2) (undo-tree-id5361 . -2) (undo-tree-id5362 . -2) (undo-tree-id5363 . -2) (undo-tree-id5364 . -2) (undo-tree-id5365 . -2) (undo-tree-id5366 . -2) (undo-tree-id5367 . -2) (undo-tree-id5368 . -2) (undo-tree-id5369 . -2) (undo-tree-id5370 . -2) (undo-tree-id5371 . -2) (undo-tree-id5372 . -2) (undo-tree-id5373 . -2) (undo-tree-id5374 . -2) (undo-tree-id5375 . -2) (undo-tree-id5376 . -2) (undo-tree-id5377 . -2) (undo-tree-id5378 . -2) (undo-tree-id5379 . -2) (undo-tree-id5380 . -2) 4820 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -4820) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (undo-tree-id5406 . -1) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) 4821 (#("the" 0 3 (fontified t wrap-prefix "  ")) . -4821) (undo-tree-id5413 . -3) (undo-tree-id5414 . -1) (undo-tree-id5415 . -2) (undo-tree-id5416 . -1) (undo-tree-id5417 . -3) (undo-tree-id5418 . -2) (undo-tree-id5419 . -3) (undo-tree-id5420 . -3) (undo-tree-id5421 . -3) (undo-tree-id5422 . -3) (undo-tree-id5423 . -3) (undo-tree-id5424 . -3) (undo-tree-id5425 . -3) (undo-tree-id5426 . -3) (undo-tree-id5427 . -3) (undo-tree-id5428 . -3) (undo-tree-id5429 . -3) (undo-tree-id5430 . -3) (undo-tree-id5431 . -3) (undo-tree-id5432 . -3) (undo-tree-id5433 . -3) (undo-tree-id5434 . -3) (undo-tree-id5435 . -3) (undo-tree-id5436 . -3) (undo-tree-id5437 . -3) (undo-tree-id5438 . -3) (undo-tree-id5439 . -3) 4824 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -4824) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) 4825 (#("higher" 0 6 (fontified t wrap-prefix "  ")) . -4825) (undo-tree-id5460 . -6) (undo-tree-id5461 . -1) (undo-tree-id5462 . -2) (undo-tree-id5463 . -1) (undo-tree-id5464 . -3) (undo-tree-id5465 . -2) (undo-tree-id5466 . -4) (undo-tree-id5467 . -3) (undo-tree-id5468 . -5) (undo-tree-id5469 . -4) (undo-tree-id5470 . -6) (undo-tree-id5471 . -5) (undo-tree-id5472 . -6) (undo-tree-id5473 . -6) (undo-tree-id5474 . -6) 4831 (4824 . 4831) (4803 . 4824) (4793 . 4803) (#("chose" 0 5 (fontified t wrap-prefix "  ")) . -4793) (undo-tree-id5475 . -5) (undo-tree-id5476 . -1) (undo-tree-id5477 . -2) (undo-tree-id5478 . -1) (undo-tree-id5479 . -3) (undo-tree-id5480 . -2) (undo-tree-id5481 . -4) (undo-tree-id5482 . -3) (undo-tree-id5483 . -5) (undo-tree-id5484 . -4) (undo-tree-id5485 . -5) (undo-tree-id5486 . -5) (undo-tree-id5487 . -5) (undo-tree-id5488 . -5) (undo-tree-id5489 . -5) (undo-tree-id5490 . -5) (undo-tree-id5491 . -5) (undo-tree-id5492 . -5) (undo-tree-id5493 . -5) 4798 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -4798) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) 4799 (#("t" 0 1 (fontified t wrap-prefix "  ")) . -4799) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) 4800 (4785 . 4800) (4764 . 4785) (t 26349 32577 428249 354000)) nil (26349 32714 324737 425000) 0 nil])
([nil nil ((4914 . 4916) (4901 . 4914) (#("the" 0 3 (fontified t wrap-prefix "  ")) . -4901) (undo-tree-id5216 . -3) (undo-tree-id5217 . -1) (undo-tree-id5218 . -2) (undo-tree-id5219 . -1) (undo-tree-id5220 . -3) (undo-tree-id5221 . -2) (undo-tree-id5222 . -3) (undo-tree-id5223 . -3) (undo-tree-id5224 . -3) (undo-tree-id5225 . -3) (undo-tree-id5226 . -3) (undo-tree-id5227 . -3) (undo-tree-id5228 . -3) (undo-tree-id5229 . -3) (undo-tree-id5230 . -3) (undo-tree-id5231 . -3) (undo-tree-id5232 . -3) (undo-tree-id5233 . -3) (undo-tree-id5234 . -3) 4904 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -4904) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) 4905 (#("*" 0 1 (fontified t wrap-prefix "  ")) . -4905) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (#("M" 0 1 (fontified t wrap-prefix "  ")) . -4906) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) 4907 (4891 . 4907) (#("e" 0 1 (fontified t wrap-prefix "  ")) . -4891) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) 4892 (4888 . 4892) (#("ad" 0 2 (fontified t wrap-prefix "  ")) . -4888) (undo-tree-id5262 . -2) (undo-tree-id5263 . -1) (undo-tree-id5264 . -2) (undo-tree-id5265 . -1) (undo-tree-id5266 . -2) (undo-tree-id5267 . -2) 4890 (4877 . 4890) (#("t" 0 1 (fontified t wrap-prefix "  ")) . -4877) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) 4878 (4873 . 4878) (4852 . 4873) (#("doing " 0 6 (fontified t wrap-prefix "  ")) . -4852) (undo-tree-id5273 . -6) (undo-tree-id5274 . -1) (undo-tree-id5275 . -2) (undo-tree-id5276 . -1) (undo-tree-id5277 . -3) (undo-tree-id5278 . -2) (undo-tree-id5279 . -4) (undo-tree-id5280 . -3) (undo-tree-id5281 . -5) (undo-tree-id5282 . -4) (undo-tree-id5283 . -6) (undo-tree-id5284 . -5) (undo-tree-id5285 . -6) (undo-tree-id5286 . -6) (undo-tree-id5287 . -6) (undo-tree-id5288 . -6) (undo-tree-id5289 . -6) (undo-tree-id5290 . -6) (undo-tree-id5291 . -6) (undo-tree-id5292 . -6) (undo-tree-id5293 . -6) (undo-tree-id5294 . -6) (undo-tree-id5295 . -6) (undo-tree-id5296 . -6) (undo-tree-id5297 . -6) (undo-tree-id5298 . -6) (undo-tree-id5299 . -6) (undo-tree-id5300 . -6) (undo-tree-id5301 . -6) (undo-tree-id5302 . -6) (undo-tree-id5303 . -6) (undo-tree-id5304 . -6) (undo-tree-id5305 . -6) (undo-tree-id5306 . -6) (undo-tree-id5307 . -6) (undo-tree-id5308 . -6) (undo-tree-id5309 . -6) (undo-tree-id5310 . -6) 4858 (#("that " 0 5 (fontified t wrap-prefix "  ")) . -4858) (undo-tree-id5311 . -5) (undo-tree-id5312 . -1) (undo-tree-id5313 . -2) (undo-tree-id5314 . -1) (undo-tree-id5315 . -3) (undo-tree-id5316 . -2) (undo-tree-id5317 . -4) (undo-tree-id5318 . -3) (undo-tree-id5319 . -5) (undo-tree-id5320 . -4) (undo-tree-id5321 . -5) (undo-tree-id5322 . -5) (undo-tree-id5323 . -5) (undo-tree-id5324 . -5) (undo-tree-id5325 . -5) (undo-tree-id5326 . -5) (undo-tree-id5327 . -5) (undo-tree-id5328 . -5) (undo-tree-id5329 . -5) (undo-tree-id5330 . -5) (undo-tree-id5331 . -5) (undo-tree-id5332 . -5) (undo-tree-id5333 . -5) 4863 (#("and " 0 4 (fontified t wrap-prefix "  ")) . -4863) (undo-tree-id5334 . -4) (undo-tree-id5335 . -1) (undo-tree-id5336 . -2) (undo-tree-id5337 . -1) (undo-tree-id5338 . -3) (undo-tree-id5339 . -2) (undo-tree-id5340 . -4) (undo-tree-id5341 . -3) (undo-tree-id5342 . -4) (undo-tree-id5343 . -4) 4867 (4866 . 4867) (4845 . 4866)) nil (26349 32714 324597 921000) 0 nil])
([nil nil ((4917 . 4918) (4916 . 4917) 4813) nil (26349 32714 324545 332000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4918 . 4919) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -4969) (4918 . 4970)) nil (26349 32714 324544 700000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 4918) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1)) nil (26349 32714 324544 179000) 0 nil])
([nil nil ((4954 . 4964) (#("lowpass_" 0 8 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4954) (undo-tree-id5197 . -8) (undo-tree-id5198 . -8) (undo-tree-id5199 . -8) (undo-tree-id5200 . -8) (undo-tree-id5201 . -8) (undo-tree-id5202 . -8) (undo-tree-id5203 . -8) (undo-tree-id5204 . -8) (undo-tree-id5205 . -8) 4962 (#("mundi" 0 5 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4962) (undo-tree-id5206 . -5) (undo-tree-id5207 . -5) (undo-tree-id5208 . -5) (undo-tree-id5209 . -5) (undo-tree-id5210 . -5) (undo-tree-id5211 . -5) (undo-tree-id5212 . -5) 4967) nil (26349 32714 324542 737000) 0 nil])
([nil nil ((#("proj2/" 0 6 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4948) (undo-tree-id5081 . -6) (undo-tree-id5082 . -6) (undo-tree-id5083 . -6) (undo-tree-id5084 . -6) (undo-tree-id5085 . -6) (undo-tree-id5086 . -6) (undo-tree-id5087 . -6) (undo-tree-id5088 . -6) (undo-tree-id5089 . -6) (undo-tree-id5090 . -6) (undo-tree-id5091 . -6) (undo-tree-id5092 . -6) (undo-tree-id5093 . -6) (undo-tree-id5094 . -6) (undo-tree-id5095 . -6) (undo-tree-id5096 . -6) (undo-tree-id5097 . -6) (undo-tree-id5098 . -6) (undo-tree-id5099 . -6) (undo-tree-id5100 . -6) (undo-tree-id5101 . -6) (undo-tree-id5102 . -6) (undo-tree-id5103 . -6) (undo-tree-id5104 . -6) (undo-tree-id5105 . -6) (undo-tree-id5106 . -6) (undo-tree-id5107 . -6) (undo-tree-id5108 . -6) (undo-tree-id5109 . -6) (undo-tree-id5110 . -6) (undo-tree-id5111 . -6) (undo-tree-id5112 . -6) (undo-tree-id5113 . -6) (undo-tree-id5114 . -6) (undo-tree-id5115 . -6) (undo-tree-id5116 . -6) (undo-tree-id5117 . -6) (undo-tree-id5118 . -6) (undo-tree-id5119 . -6) (undo-tree-id5120 . -6) (undo-tree-id5121 . -6) (undo-tree-id5122 . -6) (undo-tree-id5123 . -6) (undo-tree-id5124 . -6) (undo-tree-id5125 . -6) (undo-tree-id5126 . -6) (undo-tree-id5127 . -6) (undo-tree-id5128 . -6) (undo-tree-id5129 . -6) (undo-tree-id5130 . -6) (undo-tree-id5131 . -6) (undo-tree-id5132 . -6) 4954 (#("mona_" 0 5 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4954) (undo-tree-id5133 . -5) (undo-tree-id5134 . -1) (undo-tree-id5135 . -2) (undo-tree-id5136 . -1) (undo-tree-id5137 . -3) (undo-tree-id5138 . -2) (undo-tree-id5139 . -4) (undo-tree-id5140 . -3) (undo-tree-id5141 . -5) (undo-tree-id5142 . -4) (undo-tree-id5143 . -5) (undo-tree-id5144 . -5) (undo-tree-id5145 . -5) (undo-tree-id5146 . -5) (undo-tree-id5147 . -5) (undo-tree-id5148 . -5) (undo-tree-id5149 . -5) (undo-tree-id5150 . -5) (undo-tree-id5151 . -5) (undo-tree-id5152 . -5) (undo-tree-id5153 . -5) (undo-tree-id5154 . -5) (undo-tree-id5155 . -5) (undo-tree-id5156 . -5) (undo-tree-id5157 . -5) (undo-tree-id5158 . -5) (undo-tree-id5159 . -5) (undo-tree-id5160 . -5) (undo-tree-id5161 . -5) (undo-tree-id5162 . -5) (undo-tree-id5163 . -5) (undo-tree-id5164 . -5) (undo-tree-id5165 . -5) (undo-tree-id5166 . -5) (undo-tree-id5167 . -5) (undo-tree-id5168 . -5) (undo-tree-id5169 . -5) (undo-tree-id5170 . -5) (undo-tree-id5171 . -5) (undo-tree-id5172 . -5) 4959 (#("mundi" 0 5 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 4959) (undo-tree-id5173 . -4) (undo-tree-id5174 . -1) (undo-tree-id5175 . -2) (undo-tree-id5176 . -1) (undo-tree-id5177 . -3) (undo-tree-id5178 . -2) (undo-tree-id5179 . -4) (undo-tree-id5180 . -3) (undo-tree-id5181 . -4) (undo-tree-id5182 . -5) (undo-tree-id5183 . -4) (undo-tree-id5184 . -5) (undo-tree-id5185 . -5) (undo-tree-id5186 . -5) (undo-tree-id5187 . -5) (undo-tree-id5188 . -4) (undo-tree-id5189 . -4) (undo-tree-id5190 . -4) (undo-tree-id5191 . -4) (undo-tree-id5192 . -4) (undo-tree-id5193 . -4) (undo-tree-id5194 . -4) (undo-tree-id5195 . -4) (undo-tree-id5196 . -4) 4963) nil (26349 32714 324534 942000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4917 . 4918) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -4968) (4917 . 4969)) nil (26349 32714 324491 59000) 0 nil])
([nil nil ((#("
![dx]({{site.baseurl}}/assets/)" 0 1 (wrap-prefix "  " fontified t) 1 2 (face markdown-markup-face font-lock-multiline t rear-nonsticky t invisible markdown-markup fontified t wrap-prefix "  ") 2 3 (face markdown-markup-face font-lock-multiline t rear-nonsticky t invisible markdown-markup fontified t wrap-prefix "  ") 3 5 (face markdown-link-face help-echo "{{site.baseurl}}/assets/" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ") 5 6 (face markdown-markup-face font-lock-multiline t rear-nonsticky t invisible markdown-markup fontified t wrap-prefix "  ") 6 7 (face markdown-markup-face font-lock-multiline t rear-nonsticky t invisible markdown-markup fontified t wrap-prefix "  ") 7 31 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ") 31 32 (face markdown-markup-face font-lock-multiline t rear-nonsticky t invisible markdown-markup fontified t wrap-prefix "  ")) . 4968) (undo-tree-id4995 . 1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -31) (undo-tree-id5015 . -1) (undo-tree-id5016 . -31) (undo-tree-id5017 . -31) (undo-tree-id5018 . -31) (undo-tree-id5019 . -31) (undo-tree-id5020 . -31) (undo-tree-id5021 . -31) (undo-tree-id5022 . -31) (undo-tree-id5023 . -31) (undo-tree-id5024 . -31) (undo-tree-id5025 . -31) (undo-tree-id5026 . -31) (undo-tree-id5027 . -31) (undo-tree-id5028 . -31) (undo-tree-id5029 . -31) (undo-tree-id5030 . -31) (undo-tree-id5031 . -31) (undo-tree-id5032 . -31) (undo-tree-id5033 . -31) (undo-tree-id5034 . -31) (undo-tree-id5035 . -31) (undo-tree-id5036 . -31) (undo-tree-id5037 . -31) (undo-tree-id5038 . -31) (undo-tree-id5039 . -31) (undo-tree-id5040 . -31) (undo-tree-id5041 . -31) (undo-tree-id5042 . -31) (undo-tree-id5043 . -31) (undo-tree-id5044 . -31) (undo-tree-id5045 . -31) (undo-tree-id5046 . -31) (undo-tree-id5047 . -31) (undo-tree-id5048 . -31) (undo-tree-id5049 . -31) (undo-tree-id5050 . -31) (undo-tree-id5051 . -31) (undo-tree-id5052 . -31) (undo-tree-id5053 . -31) (undo-tree-id5054 . -31) (undo-tree-id5055 . -31) (undo-tree-id5056 . -31) (undo-tree-id5057 . -31) (undo-tree-id5058 . -31) (undo-tree-id5059 . -31) (undo-tree-id5060 . -31) (undo-tree-id5061 . -31) (undo-tree-id5062 . -31) (undo-tree-id5063 . -31) (undo-tree-id5064 . -31) (undo-tree-id5065 . -31) (undo-tree-id5066 . -31) (undo-tree-id5067 . -30) (undo-tree-id5068 . -30) (undo-tree-id5069 . -30) (undo-tree-id5070 . -30) (undo-tree-id5071 . -30) (undo-tree-id5072 . -30) (undo-tree-id5073 . -30) (undo-tree-id5074 . -30) (undo-tree-id5075 . -30) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) 4969) nil (26349 32714 324488 654000) 0 nil])
([nil nil ((4963 . 4966) (#("m" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4963) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (#("o" 0 1 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4964) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) 4965 (4954 . 4965) (#("lowpass_" 0 8 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4954) (undo-tree-id4979 . -8) (undo-tree-id4980 . -8) (undo-tree-id4981 . -8) (undo-tree-id4982 . -8) (undo-tree-id4983 . -8) (undo-tree-id4984 . -8) (undo-tree-id4985 . -8) (undo-tree-id4986 . -8) (undo-tree-id4987 . -8) 4962 (#("mundi" 0 5 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4962) (undo-tree-id4988 . -5) (undo-tree-id4989 . -5) (undo-tree-id4990 . -5) (undo-tree-id4991 . -5) (undo-tree-id4992 . -5) (undo-tree-id4993 . -5) (undo-tree-id4994 . -5) 4967) nil (26349 32714 317028 184000) 0 nil])
([nil nil ((4966 . 4967)) nil (26349 32714 316996 795000) 0 nil])
([nil nil ((4968 . 4969) 4966) nil (26349 32714 316989 361000) 0 nil])
([nil nil ((4954 . 4967) (#("salvator_" 0 9 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -4954) (undo-tree-id5505 . -9) (undo-tree-id5506 . -9) (undo-tree-id5507 . -9) (undo-tree-id5508 . -9) (undo-tree-id5509 . -9) (undo-tree-id5510 . -9) (undo-tree-id5511 . -9) (undo-tree-id5512 . -9) (undo-tree-id5513 . -9) (undo-tree-id5514 . -9) (undo-tree-id5515 . -9) (undo-tree-id5516 . -9) (undo-tree-id5517 . -9) 4963 (#("lisa" 0 4 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . 4963) (undo-tree-id5518 . -3) (undo-tree-id5519 . -3) (undo-tree-id5520 . -3) (undo-tree-id5521 . -3) (undo-tree-id5522 . -3) (undo-tree-id5523 . -3) (undo-tree-id5524 . -3) (undo-tree-id5525 . -3) (undo-tree-id5526 . -3) 4966 (t 26349 32714 337583 322000)) nil (26349 32734 596678 338000) 0 nil])
([nil nil ((4818 . 4820) (#("for" 0 3 (fontified t wrap-prefix "  ")) . 4818) (t 26349 32734 611780 827000)) nil (26349 32747 111705 860000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4351 . 4352) (nil fontified nil 4001 . 4352) (4001 . 4352) (t 26349 32747 128902 764000)) nil (26349 32880 909348 323000) 0 nil])
([nil nil ((4001 . 4002)) nil (26349 32880 909346 400000) 0 nil])
([nil nil ((4004 . 4013) (#("Before" 0 6 (face (markdown-table-face) wrap-prefix "  " fontified t)) . 4004)) nil (26349 32880 909344 406000) 0 nil])
([nil nil ((4063 . 4077) (#("After" 0 5 (face (markdown-table-face) wrap-prefix "  " fontified t)) . 4063)) nil (26349 32880 909341 300000) 0 nil])
([nil nil ((#("callas" 0 6 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 4288) (undo-tree-id5584 . -5) (undo-tree-id5585 . -5) (undo-tree-id5586 . -5) (undo-tree-id5587 . -5) (undo-tree-id5588 . -5) (undo-tree-id5589 . -5) (undo-tree-id5590 . -5) (undo-tree-id5591 . -5) (undo-tree-id5592 . -5) (undo-tree-id5593 . -5) (undo-tree-id5594 . -5) (undo-tree-id5595 . -5) (undo-tree-id5596 . -5) (undo-tree-id5597 . -5) (undo-tree-id5598 . -5) (undo-tree-id5599 . -5) (undo-tree-id5600 . -5) (undo-tree-id5601 . -5) (undo-tree-id5602 . -5) (undo-tree-id5603 . -5) (undo-tree-id5604 . -5) (undo-tree-id5605 . -5) 4293) nil (26349 32880 909337 623000) 0 nil])
([nil nil ((4288 . 4297) (#("s" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4288) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (#("a" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4289) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) 4290 (4288 . 4290) (#("c" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4288) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (#("a" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4289) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) 4290 (4288 . 4290) (#("_" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4288) (undo-tree-id5574 . 1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) 4289 (#("medea" 0 5 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 4289)) nil (26349 32880 909298 8000) 0 nil])
([nil nil ((4337 . 4349) (#("callas_" 0 7 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4337) (undo-tree-id5527 . -7) (undo-tree-id5528 . -7) (undo-tree-id5529 . -7) (undo-tree-id5530 . -7) (undo-tree-id5531 . -7) (undo-tree-id5532 . -7) (undo-tree-id5533 . -7) (undo-tree-id5534 . -7) (undo-tree-id5535 . -7) (undo-tree-id5536 . -7) (undo-tree-id5537 . -7) 4344 (#("sharpened." 0 10 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4344) (undo-tree-id5538 . -10) (undo-tree-id5539 . -10) (undo-tree-id5540 . -10) (undo-tree-id5541 . -10) (undo-tree-id5542 . -10) (undo-tree-id5543 . -10) (undo-tree-id5544 . -10) (undo-tree-id5545 . -10) (undo-tree-id5546 . -10) 4354 (#("png" 0 3 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -4354) (undo-tree-id5547 . -3) (undo-tree-id5548 . -3) (undo-tree-id5549 . -3) (undo-tree-id5550 . -3) (undo-tree-id5551 . -3) (undo-tree-id5552 . -3) (undo-tree-id5553 . -3) 4357) nil (26349 32880 909234 608000) 0 nil])
([nil nil ((5343 . 5357) (5322 . 5343) (5321 . 5322) (t 26349 32880 928206 205000) 5321) nil (26349 33228 876259 919000) 0 nil])
([nil nil ((5400 . 5401) (5390 . 5400) (5382 . 5390) (#("with" 0 4 (wrap-prefix "  " fontified t)) . -5382) (undo-tree-id6149 . -4) 5386 (5377 . 5386) (#("l" 0 1 (wrap-prefix "  " fontified t)) . -5377) (undo-tree-id6150 . -1) 5378 (5377 . 5378) (#("l" 0 1 (wrap-prefix "  " fontified t)) . -5377) (undo-tree-id6151 . -1) 5378 (5376 . 5378) (5355 . 5376) (#("po" 0 2 (wrap-prefix "  " fontified t)) . 5355) (undo-tree-id6152 . -1) 5356) nil (26349 33228 876258 486000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5752 . 5753) (nil fontified nil 5401 . 5753) (5401 . 5753)) nil (26349 33228 876256 983000) 0 nil])
([nil nil ((5401 . 5402)) nil (26349 33228 876256 633000) 0 nil])
([nil nil ((#("Mona Lisa" 0 9 (face (markdown-table-face) wrap-prefix "  " fontified t)) . 5404) (undo-tree-id6146 . -8) (undo-tree-id6147 . -8) (undo-tree-id6148 . -8) 5412) nil (26349 33228 876256 142000) 0 nil])
([nil nil ((5408 . 5410) (#("a" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified t)) . -5408) (undo-tree-id6143 . -1) (#("r" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified t)) . -5409) (undo-tree-id6144 . -1) (#("t" 0 1 (face (markdown-table-face) wrap-prefix "  " fontified t)) . -5410) (undo-tree-id6145 . -1) 5411 (5404 . 5411)) nil (26349 33228 876254 489000) 0 nil])
([nil nil ((5460 . 5466) (#("Salvator" 0 8 (face (markdown-table-face) wrap-prefix "  " fontified t)) . -5460) (undo-tree-id6141 . -8) 5468 (#(" " 0 1 (face (markdown-table-face) wrap-prefix "  " fontified t)) . -5468) (undo-tree-id6142 . -1) 5469 (#("Mundi" 0 5 (face (markdown-table-face) wrap-prefix "  " fontified t)) . 5469)) nil (26349 33228 876252 635000) 0 nil])
([nil nil ((5466 . 5471)) nil (26349 33228 876251 453000) 0 nil])
([nil nil ((#("|:-----------------------------------------------------:|:---------------------------------------------------------:|
" 0 117 (face (markdown-table-face) fontified nil wrap-prefix "  ") 117 118 (font-lock-multiline t face (markdown-table-face) fontified nil wrap-prefix "  ")) . 5608) (undo-tree-id6101 . 118) (undo-tree-id6102 . 118) (5505 . 5608) (#("| Mozart                                                | Ermine Lady                                                     |
" 0 123 (face (markdown-table-face) wrap-prefix "  " fontified nil) 123 124 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 5505) (undo-tree-id6103 . -2) (undo-tree-id6104 . 55) (undo-tree-id6105 . -2) (undo-tree-id6106 . 116) (undo-tree-id6107 . -2) (undo-tree-id6108 . -2) (undo-tree-id6109 . -122) (undo-tree-id6110 . -63) (undo-tree-id6111 . -63) (undo-tree-id6112 . -63) (undo-tree-id6113 . -64) (undo-tree-id6114 . -63) (undo-tree-id6115 . -64) (undo-tree-id6116 . -64) (undo-tree-id6117 . -65) (undo-tree-id6118 . -64) (undo-tree-id6119 . -66) (undo-tree-id6120 . -65) (undo-tree-id6121 . -67) (undo-tree-id6122 . -66) (undo-tree-id6123 . -68) (undo-tree-id6124 . -67) (undo-tree-id6125 . -69) (undo-tree-id6126 . -68) (undo-tree-id6127 . -68) (undo-tree-id6128 . -68) (undo-tree-id6129 . -68) (undo-tree-id6130 . -68) (undo-tree-id6131 . -68) (undo-tree-id6132 . -68) (undo-tree-id6133 . -68) (undo-tree-id6134 . -122) (undo-tree-id6135 . -68) (undo-tree-id6136 . -122) (undo-tree-id6137 . -122) (undo-tree-id6138 . -122) (undo-tree-id6139 . -122) (undo-tree-id6140 . -122) (5402 . 5505) 5524) nil (26349 33228 876250 481000) 0 nil])
([nil nil ((5514 . 5515) (5504 . 5514)) nil (26349 33228 876237 717000) 0 nil])
([nil nil ((#("| ![dx]({{site.baseurl}}/assets/proj2/mona.webp) | ![dx]({{site.baseurl}}/assets/proj2/salvator.jpg) |
" 0 2 (face (markdown-table-face) fontified nil wrap-prefix "  ") 2 3 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 3 4 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 4 6 (help-echo "{{site.baseurl}}/assets/proj2/mona.webp" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil wrap-prefix "  ") 6 7 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 7 8 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 8 47 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil wrap-prefix "  ") 47 48 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 48 51 (face (markdown-table-face) fontified nil wrap-prefix "  ") 51 52 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 52 53 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 53 55 (help-echo "{{site.baseurl}}/assets/proj2/salvator.jpg" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) fontified nil wrap-prefix "  ") 55 56 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 56 57 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 57 99 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified nil wrap-prefix "  ") 99 100 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) fontified nil wrap-prefix "  ") 100 102 (face (markdown-table-face) fontified nil wrap-prefix "  ") 102 103 (font-lock-multiline t face (markdown-table-face) fontified t wrap-prefix "  ")) . 5744) (undo-tree-id6081 . -103) (undo-tree-id6082 . 103) (undo-tree-id6083 . -103) (undo-tree-id6084 . -103) (undo-tree-id6085 . -2) (undo-tree-id6086 . -103) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -103) (undo-tree-id6095 . -103) (undo-tree-id6096 . -103) (5630 . 5744) (#("|:----------------------------------------------:|:-------------------------------------------------:|
" 0 102 (face (markdown-table-face) wrap-prefix "  " fontified nil) 102 103 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 5630) (undo-tree-id6097 . -1) (undo-tree-id6098 . -101) (undo-tree-id6099 . -1) (undo-tree-id6100 . -101) (5516 . 5630) 5514) nil (26349 33228 876236 885000) 0 nil])
([nil nil ((5668 . 5674) (#("mona" 0 4 (wrap-prefix "  " font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified t)) . 5668) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) 5669) nil (26349 33228 876226 496000) 0 nil])
([nil nil ((#("|:----------------------------------------------:|:-------------------------------------------------:|----------|
" 0 113 (face (markdown-table-face) wrap-prefix "  " fontified nil) 113 114 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 5632) (undo-tree-id5970 . -114) (undo-tree-id5971 . -114) (undo-tree-id5972 . -114) (undo-tree-id5973 . -114) (undo-tree-id5974 . -114) (undo-tree-id5975 . -114) (5517 . 5632) (#("| Mozart                                         | Ermine Lady                                       | Combined |
" 0 113 (face (markdown-table-face) wrap-prefix "  " fontified nil) 113 114 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 5517) (undo-tree-id5976 . -114) (undo-tree-id5977 . -114) (undo-tree-id5978 . -114) (undo-tree-id5979 . -114) (undo-tree-id5980 . -114) (undo-tree-id5981 . -114) (undo-tree-id5982 . -114) (undo-tree-id5983 . -114) (undo-tree-id5984 . -114) (undo-tree-id5985 . -114) (undo-tree-id5986 . -114) (undo-tree-id5987 . -114) (undo-tree-id5988 . -114) (undo-tree-id5989 . -114) (undo-tree-id5990 . -114) (undo-tree-id5991 . -114) (undo-tree-id5992 . -114) (undo-tree-id5993 . -114) (undo-tree-id5994 . -114) (undo-tree-id5995 . -114) (undo-tree-id5996 . -114) (undo-tree-id5997 . -114) (undo-tree-id5998 . -114) (undo-tree-id5999 . -114) (undo-tree-id6000 . -114) (undo-tree-id6001 . -114) (undo-tree-id6002 . -114) (undo-tree-id6003 . -114) (undo-tree-id6004 . -114) (undo-tree-id6005 . -114) (undo-tree-id6006 . -114) (undo-tree-id6007 . -114) (undo-tree-id6008 . -114) (undo-tree-id6009 . -114) (undo-tree-id6010 . -101) (undo-tree-id6011 . -102) (undo-tree-id6012 . -101) (undo-tree-id6013 . -102) (undo-tree-id6014 . -102) (undo-tree-id6015 . -102) (undo-tree-id6016 . -103) (undo-tree-id6017 . -102) (undo-tree-id6018 . -104) (undo-tree-id6019 . -103) (undo-tree-id6020 . -105) (undo-tree-id6021 . -104) (undo-tree-id6022 . -106) (undo-tree-id6023 . -105) (undo-tree-id6024 . -107) (undo-tree-id6025 . -106) (undo-tree-id6026 . -108) (undo-tree-id6027 . -107) (undo-tree-id6028 . -108) (undo-tree-id6029 . -109) (undo-tree-id6030 . -108) (undo-tree-id6031 . -109) (undo-tree-id6032 . -110) (undo-tree-id6033 . -109) (undo-tree-id6034 . -110) (undo-tree-id6035 . -110) (undo-tree-id6036 . -111) (undo-tree-id6037 . -110) (undo-tree-id6038 . -112) (undo-tree-id6039 . -111) (undo-tree-id6040 . -113) (undo-tree-id6041 . -112) (undo-tree-id6042 . -112) (undo-tree-id6043 . -112) (undo-tree-id6044 . -112) (undo-tree-id6045 . -112) (undo-tree-id6046 . -112) (undo-tree-id6047 . -112) (undo-tree-id6048 . -112) (undo-tree-id6049 . -112) (undo-tree-id6050 . -112) (undo-tree-id6051 . -112) (undo-tree-id6052 . -112) (5402 . 5517) 5678 (5676 . 5678) (#("o" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -5676) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (#("p" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -5677) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) 5678 (5675 . 5678) (#("webp" 0 4 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5675)) nil (26349 33228 876216 256000) 0 nil])
([nil nil ((5720 . 5728) (#("salvator" 0 8 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5720)) nil (26349 33228 876184 396000) 0 nil])
([nil nil ((5729 . 5733) (#("jpg" 0 3 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5729)) nil (26349 33228 876183 945000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5787 . 5788) (nil fontified nil 5738 . 5788) (5738 . 5788) 5737) nil (26349 33228 876183 524000) 0 nil])
([nil nil ((5876 . 6034) (#("| ![dx]({{site.baseurl}}/assets/proj2/mozart.jpg) | ![dx]({{site.baseurl}}/assets/proj2/goatlady.webp) |  ![dx]({{site.baseurl}}/assets/proj2/goatlady.webp)        |
" 0 2 (face (markdown-table-face) wrap-prefix "  " fontified nil) 2 3 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 3 4 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 4 6 (help-echo "{{site.baseurl}}/assets/proj2/mozart.jpg" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  " fontified nil) 6 7 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 7 8 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 8 48 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified nil) 48 49 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 49 52 (face (markdown-table-face) wrap-prefix "  " fontified nil) 52 53 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 53 54 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 54 56 (help-echo "{{site.baseurl}}/assets/proj2/goatlady.webp" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  " fontified nil) 56 57 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 57 58 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 58 101 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified nil) 101 102 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 102 106 (face (markdown-table-face) wrap-prefix "  " fontified nil) 106 107 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 107 108 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 108 110 (help-echo "{{site.baseurl}}/assets/proj2/goatlady.webp" font-lock-multiline t mouse-face markdown-highlight-face keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-link-face markdown-table-face) wrap-prefix "  " fontified nil) 110 111 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 111 112 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 112 155 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified nil) 155 156 (font-lock-multiline t rear-nonsticky t invisible markdown-markup face (markdown-markup-face markdown-table-face) wrap-prefix "  " fontified nil) 156 165 (face (markdown-table-face) wrap-prefix "  " fontified nil) 165 166 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified t)) . 5876) (undo-tree-id5622 . -106) (undo-tree-id5623 . -106) (undo-tree-id5624 . -155) (undo-tree-id5625 . 65) (undo-tree-id5626 . -52) (undo-tree-id5627 . 64) (undo-tree-id5628 . -101) (undo-tree-id5629 . -52) (undo-tree-id5630 . -38) (undo-tree-id5631 . -166) (undo-tree-id5632 . -166) (undo-tree-id5633 . -166) (undo-tree-id5634 . -166) (undo-tree-id5635 . -166) (undo-tree-id5636 . -166) (undo-tree-id5637 . -166) (undo-tree-id5638 . -166) (undo-tree-id5639 . -166) (undo-tree-id5640 . -166) (undo-tree-id5641 . -166) (undo-tree-id5642 . -166) (undo-tree-id5643 . -166) (undo-tree-id5644 . -2) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -166) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -166) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -38) (undo-tree-id5659 . -38) (undo-tree-id5660 . -38) (undo-tree-id5661 . -38) (undo-tree-id5662 . -38) (undo-tree-id5663 . -38) (undo-tree-id5664 . -38) (undo-tree-id5665 . -38) (undo-tree-id5666 . -156) (undo-tree-id5667 . -38) (undo-tree-id5668 . -38) (undo-tree-id5669 . -38) (undo-tree-id5670 . -38) (undo-tree-id5671 . -38) (undo-tree-id5672 . -38) (undo-tree-id5673 . -38) (undo-tree-id5674 . -38) (undo-tree-id5675 . -38) (undo-tree-id5676 . -38) (undo-tree-id5677 . -166) (undo-tree-id5678 . -38) (undo-tree-id5679 . -39) (undo-tree-id5680 . -38) (undo-tree-id5681 . -40) (undo-tree-id5682 . -39) (undo-tree-id5683 . -41) (undo-tree-id5684 . -40) (undo-tree-id5685 . -42) (undo-tree-id5686 . -41) (undo-tree-id5687 . -43) (undo-tree-id5688 . -42) (undo-tree-id5689 . -43) (undo-tree-id5690 . -44) (undo-tree-id5691 . -43) (undo-tree-id5692 . -44) (undo-tree-id5693 . -44) (undo-tree-id5694 . -44) (undo-tree-id5695 . -44) (undo-tree-id5696 . -43) (undo-tree-id5697 . -43) (undo-tree-id5698 . -43) (undo-tree-id5699 . -43) (undo-tree-id5700 . -43) (undo-tree-id5701 . -43) (undo-tree-id5702 . -44) (undo-tree-id5703 . -43) (undo-tree-id5704 . -45) (undo-tree-id5705 . -44) (undo-tree-id5706 . -45) (undo-tree-id5707 . -45) (undo-tree-id5708 . -45) (undo-tree-id5709 . -45) (undo-tree-id5710 . -45) (undo-tree-id5711 . -45) (undo-tree-id5712 . -46) (undo-tree-id5713 . -45) (undo-tree-id5714 . -46) (undo-tree-id5715 . -46) (undo-tree-id5716 . -46) (undo-tree-id5717 . -46) (undo-tree-id5718 . -166) (undo-tree-id5719 . -46) (undo-tree-id5720 . -46) (undo-tree-id5721 . -46) (undo-tree-id5722 . -46) (undo-tree-id5723 . -47) (undo-tree-id5724 . -46) (undo-tree-id5725 . -48) (undo-tree-id5726 . -47) (undo-tree-id5727 . -52) (undo-tree-id5728 . -48) (undo-tree-id5729 . -51) (undo-tree-id5730 . -51) (undo-tree-id5731 . -51) (undo-tree-id5732 . -51) (undo-tree-id5733 . -51) (undo-tree-id5734 . -51) (undo-tree-id5735 . -52) (undo-tree-id5736 . -51) (undo-tree-id5737 . -54) (undo-tree-id5738 . -52) (undo-tree-id5739 . -56) (undo-tree-id5740 . -54) (undo-tree-id5741 . -60) (undo-tree-id5742 . -56) (undo-tree-id5743 . -64) (undo-tree-id5744 . -60) (undo-tree-id5745 . -65) (undo-tree-id5746 . -64) (undo-tree-id5747 . -72) (undo-tree-id5748 . -65) (undo-tree-id5749 . -75) (undo-tree-id5750 . -72) (undo-tree-id5751 . -81) (undo-tree-id5752 . -75) (undo-tree-id5753 . -82) (undo-tree-id5754 . -81) (undo-tree-id5755 . -87) (undo-tree-id5756 . -82) (undo-tree-id5757 . -88) (undo-tree-id5758 . -87) (undo-tree-id5759 . -88) (undo-tree-id5760 . -88) (undo-tree-id5761 . -88) (undo-tree-id5762 . -88) (undo-tree-id5763 . -88) (undo-tree-id5764 . -88) (undo-tree-id5765 . -166) (undo-tree-id5766 . -89) (undo-tree-id5767 . -88) (undo-tree-id5768 . -90) (undo-tree-id5769 . -89) (undo-tree-id5770 . -91) (undo-tree-id5771 . -90) (undo-tree-id5772 . -92) (undo-tree-id5773 . -91) (undo-tree-id5774 . -93) (undo-tree-id5775 . -92) (undo-tree-id5776 . -94) (undo-tree-id5777 . -93) (undo-tree-id5778 . -95) (undo-tree-id5779 . -94) (undo-tree-id5780 . -96) (undo-tree-id5781 . -95) (undo-tree-id5782 . -166) (undo-tree-id5783 . -95) (undo-tree-id5784 . -95) (undo-tree-id5785 . -95) (undo-tree-id5786 . -95) (undo-tree-id5787 . -95) (undo-tree-id5788 . -95) (undo-tree-id5789 . -96) (undo-tree-id5790 . -95) (undo-tree-id5791 . -97) (undo-tree-id5792 . -96) (undo-tree-id5793 . -97) (undo-tree-id5794 . -97) (undo-tree-id5795 . -97) (undo-tree-id5796 . -97) (undo-tree-id5797 . -97) (undo-tree-id5798 . -97) (undo-tree-id5799 . -98) (undo-tree-id5800 . -97) (undo-tree-id5801 . -99) (undo-tree-id5802 . -98) (undo-tree-id5803 . -100) (undo-tree-id5804 . -99) (undo-tree-id5805 . -101) (undo-tree-id5806 . -100) (undo-tree-id5807 . -101) (undo-tree-id5808 . -101) (undo-tree-id5809 . -166) (undo-tree-id5810 . -100) (undo-tree-id5811 . -100) (undo-tree-id5812 . -100) (undo-tree-id5813 . -100) (undo-tree-id5814 . -100) (undo-tree-id5815 . -100) (undo-tree-id5816 . -101) (undo-tree-id5817 . -100) (undo-tree-id5818 . -103) (undo-tree-id5819 . -101) (undo-tree-id5820 . -101) (undo-tree-id5821 . -103) (undo-tree-id5822 . -101) (undo-tree-id5823 . -101) (undo-tree-id5824 . -101) (undo-tree-id5825 . -101) (undo-tree-id5826 . -97) (undo-tree-id5827 . -101) (undo-tree-id5828 . -96) (undo-tree-id5829 . -97) (undo-tree-id5830 . -88) (undo-tree-id5831 . -96) (undo-tree-id5832 . -87) (undo-tree-id5833 . -88) (undo-tree-id5834 . -82) (undo-tree-id5835 . -87) (undo-tree-id5836 . -81) (undo-tree-id5837 . -82) (undo-tree-id5838 . -75) (undo-tree-id5839 . -81) (undo-tree-id5840 . -72) (undo-tree-id5841 . -75) (undo-tree-id5842 . -65) (undo-tree-id5843 . -72) (undo-tree-id5844 . -64) (undo-tree-id5845 . -65) (undo-tree-id5846 . -60) (undo-tree-id5847 . -64) (undo-tree-id5848 . -56) (undo-tree-id5849 . -60) (undo-tree-id5850 . -54) (undo-tree-id5851 . -56) (undo-tree-id5852 . -52) (undo-tree-id5853 . -54) (undo-tree-id5854 . -52) (undo-tree-id5855 . -52) (undo-tree-id5856 . -52) (undo-tree-id5857 . -52) (undo-tree-id5858 . -164) (undo-tree-id5859 . -52) (undo-tree-id5860 . -163) (undo-tree-id5861 . -164) (undo-tree-id5862 . -162) (undo-tree-id5863 . -163) (undo-tree-id5864 . -161) (undo-tree-id5865 . -162) (undo-tree-id5866 . -160) (undo-tree-id5867 . -161) (undo-tree-id5868 . -159) (undo-tree-id5869 . -160) (undo-tree-id5870 . -158) (undo-tree-id5871 . -159) (undo-tree-id5872 . -157) (undo-tree-id5873 . -158) (undo-tree-id5874 . -106) (undo-tree-id5875 . -157) (undo-tree-id5876 . -105) (undo-tree-id5877 . -106) (undo-tree-id5878 . -101) (undo-tree-id5879 . -106) (undo-tree-id5880 . -155) (undo-tree-id5881 . -105) (undo-tree-id5882 . -166) (undo-tree-id5883 . -155) (undo-tree-id5884 . -156) (undo-tree-id5885 . -155) (undo-tree-id5886 . -156) (undo-tree-id5887 . -156) (undo-tree-id5888 . -156) (undo-tree-id5889 . -166) (5718 . 5876) (#("|:-----------------------------------------------:|:-------------------------------------------------:|----------|
" 0 114 (face (markdown-table-face) wrap-prefix "  " fontified nil) 114 115 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 5718) (undo-tree-id5890 . -115) (undo-tree-id5891 . -115) (undo-tree-id5892 . -115) (undo-tree-id5893 . -115) (undo-tree-id5894 . -115) (undo-tree-id5895 . -115) (5560 . 5718) (#("| Mozart                                          | Ermine Lady                                       | Combined |
" 0 114 (face (markdown-table-face) wrap-prefix "  " fontified nil) 114 115 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 5560) (undo-tree-id5896 . -115) (undo-tree-id5897 . -115) (undo-tree-id5898 . -115) (undo-tree-id5899 . -115) (undo-tree-id5900 . -115) (undo-tree-id5901 . -115) (undo-tree-id5902 . -115) (undo-tree-id5903 . -115) (undo-tree-id5904 . -115) (undo-tree-id5905 . -115) (undo-tree-id5906 . -115) (undo-tree-id5907 . -115) (undo-tree-id5908 . -115) (undo-tree-id5909 . -115) (undo-tree-id5910 . -115) (undo-tree-id5911 . -115) (undo-tree-id5912 . -115) (undo-tree-id5913 . -115) (undo-tree-id5914 . -115) (undo-tree-id5915 . -115) (undo-tree-id5916 . -115) (undo-tree-id5917 . -115) (undo-tree-id5918 . -115) (undo-tree-id5919 . -115) (undo-tree-id5920 . -115) (undo-tree-id5921 . -115) (undo-tree-id5922 . -115) (undo-tree-id5923 . -115) (undo-tree-id5924 . -115) (undo-tree-id5925 . -115) (undo-tree-id5926 . -115) (undo-tree-id5927 . -115) (undo-tree-id5928 . -115) (undo-tree-id5929 . -115) (undo-tree-id5930 . -115) (undo-tree-id5931 . -115) (undo-tree-id5932 . -115) (undo-tree-id5933 . -115) (undo-tree-id5934 . -115) (undo-tree-id5935 . -115) (undo-tree-id5936 . -115) (undo-tree-id5937 . -115) (undo-tree-id5938 . -115) (undo-tree-id5939 . -115) (undo-tree-id5940 . -115) (undo-tree-id5941 . -115) (undo-tree-id5942 . -115) (undo-tree-id5943 . -115) (undo-tree-id5944 . -115) (undo-tree-id5945 . -115) (undo-tree-id5946 . -115) (undo-tree-id5947 . -115) (undo-tree-id5948 . -115) (undo-tree-id5949 . -115) (undo-tree-id5950 . -115) (undo-tree-id5951 . -115) (undo-tree-id5952 . -115) (undo-tree-id5953 . -115) (undo-tree-id5954 . -115) (undo-tree-id5955 . -115) (undo-tree-id5956 . -115) (undo-tree-id5957 . -115) (undo-tree-id5958 . -115) (undo-tree-id5959 . -115) (undo-tree-id5960 . -115) (undo-tree-id5961 . -115) (undo-tree-id5962 . -115) (undo-tree-id5963 . -115) (undo-tree-id5964 . -115) (undo-tree-id5965 . -115) (undo-tree-id5966 . -115) (undo-tree-id5967 . -115) (undo-tree-id5968 . -115) (undo-tree-id5969 . -115) (5402 . 5560) 5788) nil (26349 33228 876174 207000) 0 nil])
([nil nil ((#("p" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5869) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (#("b" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5869) (#("e" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5869) (#("w" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5869) (#("." 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 5869) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (5866 . 5869) (#("r" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -5866) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (#("t" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -5867) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) 5868 (5859 . 5868) (#("goatlady" 0 8 (wrap-prefix "  " font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) fontified t)) . 5859) (undo-tree-id5620 . -8) (undo-tree-id5621 . -8)) nil (26349 33228 867949 660000) 0 nil])
([nil nil ((5863 . 5864) (t 26349 33228 891596 7000)) nil (26349 33238 137725 320000) 0 nil])
([nil nil ((6104 . 6121) (#("sleeping" 0 8 (fontified t wrap-prefix "  ")) . -6104) (undo-tree-id6377 . -8) (undo-tree-id6378 . -1) (undo-tree-id6379 . -2) (undo-tree-id6380 . -1) (undo-tree-id6381 . -3) (undo-tree-id6382 . -2) (undo-tree-id6383 . -4) (undo-tree-id6384 . -3) (undo-tree-id6385 . -5) (undo-tree-id6386 . -4) (undo-tree-id6387 . -6) (undo-tree-id6388 . -5) (undo-tree-id6389 . -7) (undo-tree-id6390 . -6) (undo-tree-id6391 . -8) (undo-tree-id6392 . -7) (undo-tree-id6393 . -8) (undo-tree-id6394 . -8) (undo-tree-id6395 . -8) (undo-tree-id6396 . -8) (undo-tree-id6397 . -8) (undo-tree-id6398 . -8) (undo-tree-id6399 . -8) (undo-tree-id6400 . -8) (undo-tree-id6401 . -8) (undo-tree-id6402 . -8) (undo-tree-id6403 . -8) (undo-tree-id6404 . -8) (undo-tree-id6405 . -8) (undo-tree-id6406 . -8) (undo-tree-id6407 . -8) (undo-tree-id6408 . -8) (undo-tree-id6409 . -8) (undo-tree-id6410 . -8) (undo-tree-id6411 . -8) 6112 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6112) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) 6113 (#("beauty" 0 6 (fontified t wrap-prefix "  ")) . -6113) (undo-tree-id6430 . -6) (undo-tree-id6431 . -1) (undo-tree-id6432 . -2) (undo-tree-id6433 . -1) (undo-tree-id6434 . -3) (undo-tree-id6435 . -2) (undo-tree-id6436 . -4) (undo-tree-id6437 . -3) (undo-tree-id6438 . -5) (undo-tree-id6439 . -4) (undo-tree-id6440 . -6) (undo-tree-id6441 . -5) (undo-tree-id6442 . -6) 6119 (6112 . 6119) (6099 . 6112) (6094 . 6099) (6078 . 6095) (#("the" 0 3 (fontified t wrap-prefix "  ")) . -6078) (undo-tree-id6443 . -3) (undo-tree-id6444 . -3) (undo-tree-id6445 . -3) (undo-tree-id6446 . -3) (undo-tree-id6447 . -3) (undo-tree-id6448 . -3) (undo-tree-id6449 . -3) 6081 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6081) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) 6082 (6073 . 6082) (6058 . 6073) (#("f" 0 1 (fontified t wrap-prefix "  ")) . -6058) (undo-tree-id6455 . -1) 6059 (6055 . 6059) (6034 . 6055) (6033 . 6034) (#("
" 0 1 (wrap-prefix "  " fontified t)) . -6033) (undo-tree-id6456 . -1) 6034 (6033 . 6034) (t 26349 33238 154686 248000) 6033) nil (26349 33370 392356 513000) 0 nil])
([nil nil ((6122 . 6123)) nil (26349 33370 392314 995000) 0 nil])
([nil nil ((6124 . 6125) (6123 . 6124) 6034) nil (26349 33370 392314 434000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6755 . 6756) (nil fontified nil 6125 . 6756) (6125 . 6756)) nil (26349 33370 392313 752000) 0 nil])
([nil nil ((6131 . 6137) (6127 . 6131) (#("Mozart" 0 6 (wrap-prefix "  " face (markdown-table-face) fontified t)) . 6127)) nil (26349 33370 392312 891000) 0 nil])
([nil nil ((#("|                                                 |                                                    |                                                    |
" 0 157 (face (markdown-table-face) wrap-prefix "  " fontified nil) 157 158 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified t)) . 6749) (undo-tree-id6334 . -158) (undo-tree-id6335 . -158) (undo-tree-id6336 . -158) (undo-tree-id6337 . -158) (undo-tree-id6338 . -158) (undo-tree-id6339 . -158) (6593 . 6749) (#("|:-----------------------------------------------:|:--------------------------------------------------:|----------------------------------------------------|
" 0 157 (face (markdown-table-face) wrap-prefix "  " fontified nil) 157 158 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 6437) (undo-tree-id6340 . 158) (undo-tree-id6341 . -158) (undo-tree-id6342 . -158) (6281 . 6437) (#("| Maleficent                                          | Ermine Lady                                        | Combined                                           |
" 0 6 (face (markdown-table-face) wrap-prefix "  " fontified nil) 6 12 (face (markdown-table-face) wrap-prefix "  " fontified nil) 12 161 (face (markdown-table-face) wrap-prefix "  " fontified nil) 161 162 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 6281) (undo-tree-id6343 . 150) (undo-tree-id6344 . -12) (undo-tree-id6345 . -162) (undo-tree-id6346 . -162) (undo-tree-id6347 . -2) (undo-tree-id6348 . -2) (undo-tree-id6349 . -2) (undo-tree-id6350 . -2) (undo-tree-id6351 . -2) (undo-tree-id6352 . -2) (undo-tree-id6353 . -2) (undo-tree-id6354 . -3) (undo-tree-id6355 . -2) (undo-tree-id6356 . -4) (undo-tree-id6357 . -3) (undo-tree-id6358 . -5) (undo-tree-id6359 . -4) (undo-tree-id6360 . -6) (undo-tree-id6361 . -5) (undo-tree-id6362 . -12) (undo-tree-id6363 . -6) (undo-tree-id6364 . -12) (undo-tree-id6365 . -12) (undo-tree-id6366 . -11) (undo-tree-id6367 . -11) (undo-tree-id6368 . -11) (undo-tree-id6369 . -11) (undo-tree-id6370 . -11) (undo-tree-id6371 . -11) (undo-tree-id6372 . -12) (undo-tree-id6373 . -11) (undo-tree-id6374 . -12) (undo-tree-id6375 . -12) (undo-tree-id6376 . -12) (6125 . 6281) 6137) nil (26349 33370 392311 107000) 0 nil])
([nil nil ((#("Ermine Lady                       " 0 34 (face (markdown-table-face) wrap-prefix "  " fontified t)) . 6177) (undo-tree-id6324 . -33) (undo-tree-id6325 . 34) (undo-tree-id6326 . -33) (undo-tree-id6327 . -33) (undo-tree-id6328 . -7) (undo-tree-id6329 . -7) (undo-tree-id6330 . -34) (undo-tree-id6331 . -33) (undo-tree-id6332 . -34) (undo-tree-id6333 . -33) 6210) nil (26349 33370 392245 62000) 0 nil])
([nil nil ((#("| Maleficent                                      | Merryweather                 | Combined                                         |
" 0 57 (face (markdown-table-face) wrap-prefix "  " fontified nil) 57 64 (face (markdown-table-face) wrap-prefix "  " fontified nil) 64 133 (face (markdown-table-face) wrap-prefix "  " fontified nil) 133 134 (font-lock-multiline t face (markdown-table-face) wrap-prefix "  " fontified nil)) . 6281) (undo-tree-id6208 . -52) (undo-tree-id6209 . 70) (undo-tree-id6210 . -52) (undo-tree-id6211 . 70) (undo-tree-id6212 . -52) (undo-tree-id6213 . -52) (undo-tree-id6214 . -64) (undo-tree-id6215 . -134) (undo-tree-id6216 . -134) (undo-tree-id6217 . -134) (undo-tree-id6218 . -134) (undo-tree-id6219 . -134) (undo-tree-id6220 . -134) (undo-tree-id6221 . -134) (undo-tree-id6222 . -134) (undo-tree-id6223 . -134) (undo-tree-id6224 . -134) (undo-tree-id6225 . -134) (undo-tree-id6226 . -134) (undo-tree-id6227 . -134) (undo-tree-id6228 . -134) (undo-tree-id6229 . -134) (undo-tree-id6230 . -134) (undo-tree-id6231 . -134) (undo-tree-id6232 . -134) (undo-tree-id6233 . -134) (undo-tree-id6234 . -134) (undo-tree-id6235 . -134) (undo-tree-id6236 . -134) (undo-tree-id6237 . -134) (undo-tree-id6238 . -134) (undo-tree-id6239 . -134) (undo-tree-id6240 . -134) (undo-tree-id6241 . -134) (undo-tree-id6242 . -134) (undo-tree-id6243 . -134) (undo-tree-id6244 . -134) (undo-tree-id6245 . -134) (undo-tree-id6246 . -52) (undo-tree-id6247 . -134) (undo-tree-id6248 . -51) (undo-tree-id6249 . -51) (undo-tree-id6250 . -51) (undo-tree-id6251 . -51) (undo-tree-id6252 . -51) (undo-tree-id6253 . -51) (undo-tree-id6254 . -52) (undo-tree-id6255 . -51) (undo-tree-id6256 . -52) (undo-tree-id6257 . -52) (undo-tree-id6258 . -52) (undo-tree-id6259 . -52) (undo-tree-id6260 . -52) (undo-tree-id6261 . -52) (undo-tree-id6262 . -81) (undo-tree-id6263 . -52) (undo-tree-id6264 . -80) (undo-tree-id6265 . -81) (undo-tree-id6266 . -79) (undo-tree-id6267 . -80) (undo-tree-id6268 . -78) (undo-tree-id6269 . -79) (undo-tree-id6270 . -77) (undo-tree-id6271 . -78) (undo-tree-id6272 . -76) (undo-tree-id6273 . -77) (undo-tree-id6274 . -75) (undo-tree-id6275 . -76) (undo-tree-id6276 . -74) (undo-tree-id6277 . -75) (undo-tree-id6278 . -73) (undo-tree-id6279 . -74) (undo-tree-id6280 . -72) (undo-tree-id6281 . -73) (undo-tree-id6282 . -71) (undo-tree-id6283 . -72) (undo-tree-id6284 . -70) (undo-tree-id6285 . -71) (undo-tree-id6286 . -69) (undo-tree-id6287 . -70) (undo-tree-id6288 . -68) (undo-tree-id6289 . -69) (undo-tree-id6290 . -67) (undo-tree-id6291 . -68) (undo-tree-id6292 . -66) (undo-tree-id6293 . -67) (undo-tree-id6294 . -65) (undo-tree-id6295 . -66) (undo-tree-id6296 . -52) (undo-tree-id6297 . -65) (undo-tree-id6298 . -52) (undo-tree-id6299 . -52) (undo-tree-id6300 . -52) (undo-tree-id6301 . -52) (undo-tree-id6302 . -52) (undo-tree-id6303 . -52) (undo-tree-id6304 . -52) (undo-tree-id6305 . -52) (undo-tree-id6306 . -52) (undo-tree-id6307 . -52) (undo-tree-id6308 . -53) (undo-tree-id6309 . -52) (undo-tree-id6310 . -54) (undo-tree-id6311 . -53) (undo-tree-id6312 . -55) (undo-tree-id6313 . -54) (undo-tree-id6314 . -56) (undo-tree-id6315 . -55) (undo-tree-id6316 . -57) (undo-tree-id6317 . -56) (undo-tree-id6318 . -57) (undo-tree-id6319 . -64) (undo-tree-id6320 . -57) (undo-tree-id6321 . -64) (undo-tree-id6322 . -64) (undo-tree-id6323 . -64) (6125 . 6281) 6189 (6182 . 6189) (6179 . 6182) (6177 . 6179)) nil (26349 33370 392232 158000) 0 nil])
([nil nil ((6585 . 6594) (#("i" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6585) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (#("e" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6586) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (#("n" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6587) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) 6588 (6582 . 6588) (#("c" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6582) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) 6583 (6578 . 6583) (#("lady_" 0 5 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6578) (undo-tree-id6195 . -5) (undo-tree-id6196 . -5) (undo-tree-id6197 . -5) (undo-tree-id6198 . -5) (undo-tree-id6199 . -5) (undo-tree-id6200 . -5) (undo-tree-id6201 . -5) (undo-tree-id6202 . -5) (undo-tree-id6203 . -5) (undo-tree-id6204 . -5) (undo-tree-id6205 . -5) 6583 (#("mozart" 0 6 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 6583) (undo-tree-id6206 . -6) (undo-tree-id6207 . -6)) nil (26349 33370 382303 113000) 0 nil])
([nil nil ((6479 . 6485) (6475 . 6479) (#("mozart" 0 6 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 6475) (undo-tree-id6167 . -6) (undo-tree-id6168 . -6)) nil (26349 33370 382270 771000) 0 nil])
([nil nil ((6534 . 6541) (6531 . 6534) (#("e" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6531) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (#("r" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6532) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) 6533 (6529 . 6533) (#("goatlady" 0 8 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 6529) (undo-tree-id6163 . -8) (undo-tree-id6164 . -8) (undo-tree-id6165 . -8) (undo-tree-id6166 . -8)) nil (26349 33370 382262 736000) 0 nil])
([nil nil ((6488 . 6489) (#("g" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . -6488) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) 6489 (6488 . 6489) (t 26349 33370 407974 749000)) nil (26349 33402 315708 648000) 0 nil])
([nil nil ((6599 . 6600) (#("a" 0 1 (font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) face (markdown-url-face markdown-table-face) wrap-prefix "  " fontified t)) . 6599) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1)) nil (26349 33402 315699 380000) 0 nil])
([nil nil ((6171 . 6172) (#(":" 0 1 (fontified t wrap-prefix "  ")) . -6171) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) 6172 (6164 . 6172) (6143 . 6164) (6122 . 6143) (#(":" 0 1 (fontified t wrap-prefix "  ")) . -6122) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) 6123 (t 26349 33402 334286 45000)) nil (26349 33425 4899 194000) 0 nil])
([nil nil ((6171 . 6172) (#("." 0 1 (fontified t wrap-prefix "  ")) . -6171) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) 6172 (t 26349 33425 22507 273000)) nil (26349 33426 709985 194000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6813 . 6814) (#("
" 0 1 (fontified nil wrap-prefix "  " font-lock-multiline t)) . -6834) (6813 . 6835) (t 26349 33426 725523 878000)) nil (26349 33674 573704 495000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "  " fontified t)) . 6813) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1)) nil (26349 33674 573702 902000) 0 nil])
([nil nil ((6817 . 6818) (#("2" 0 1 (face markdown-header-face-1 markdown-heading-1-atx (6813 6833 nil nil nil nil nil nil 6813 6815 6815 6833 6833 6833 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6833 nil nil nil nil nil nil 6813 6815 6815 6833 6833 6833 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . -6817) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) 6818) nil (26349 33674 573698 93000) 0 nil])
([nil nil ((#("Hybrid Images." 0 13 (face markdown-header-face-1 markdown-heading-1-atx (6813 6833 nil nil nil nil nil nil 6813 6815 6815 6833 6833 6833 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6833 nil nil nil nil nil nil 6813 6815 6815 6833 6833 6833 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ") 13 14 (font-lock-multiline t face markdown-header-face-1 markdown-heading-1-atx (6813 6833 nil nil nil nil nil nil 6813 6815 6815 6833 6833 6833 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6833 nil nil nil nil nil nil 6813 6815 6815 6833 6833 6833 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . 6819) (undo-tree-id6476 . -14) (undo-tree-id6477 . -14) (undo-tree-id6478 . -7) (undo-tree-id6479 . -7)) nil (26349 33674 569582 187000) 0 nil])
([nil nil ((6819 . 6834)) nil (26349 33674 569566 297000) 0 nil])
([nil nil ((6834 . 6835) 6833) nil (26349 33674 569558 883000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6835 . 6836) (#("
" 0 1 (fontified nil wrap-prefix "  ")) . -6886) (6835 . 6887) (t 26349 33674 588940 645000)) nil (26349 34050 194864 287000) 0 nil])
([nil nil ((6872 . 6887) (#("highpass_" 0 9 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -6872) (undo-tree-id6489 . -9) (undo-tree-id6490 . -9) (undo-tree-id6491 . -9) (undo-tree-id6492 . -9) (undo-tree-id6493 . -9) (undo-tree-id6494 . -9) (undo-tree-id6495 . -9) (undo-tree-id6496 . -9) (undo-tree-id6497 . -9) 6881 (#("lisa" 0 4 (face markdown-url-face font-lock-multiline t mouse-face markdown-highlight-face invisible markdown-markup keymap (keymap (mouse-2 . markdown-follow-thing-at-point) (follow-link . mouse-face)) fontified t wrap-prefix "  ")) . -6881) (undo-tree-id6498 . -4) (undo-tree-id6499 . -4) (undo-tree-id6500 . -4) (undo-tree-id6501 . -4) (undo-tree-id6502 . -4) (undo-tree-id6503 . -4) (undo-tree-id6504 . -4) 6885) nil (26349 34050 194862 263000) 0 nil])
([nil nil ((6888 . 6889) 6886) nil (26349 34050 194833 900000) 0 nil])
([nil nil ((6848 . 6859) (6838 . 6848) (#("l" 0 1 (wrap-prefix "  " fontified t)) . -6838) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) 6839 (6836 . 6839) (6835 . 6836) (t 26349 34050 215603 157000) 6835) nil (26349 49277 203640 649000) 0 nil])
([nil nil ((6838 . 6840)) nil (26349 49277 203628 96000) 0 nil])
([nil nil ((6840 . 6841)) nil (26349 49277 203627 514000) 0 nil])
([nil nil ((6856 . 6859)) nil (26349 49277 203620 301000) 0 nil])
([nil nil ((#("*" 0 1 (face (markdown-markup-face) invisible markdown-markup wrap-prefix "  " fontified t)) . 6857) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (t 26349 49277 232137 984000)) nil (26349 49286 244905 483000) 0 nil])
([nil nil ((#("*" 0 1 (face (markdown-bold-face) wrap-prefix "  " fontified t)) . 6840) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1)) nil (26349 49295 144874 456000) 0 nil])
([nil nil ((#("*" 0 1 (face (markdown-markup-face) invisible markdown-markup wrap-prefix "  " fontified t)) . 6839) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (t 26349 49286 261195 198000)) nil (26349 49300 117059 228000) 0 nil] [nil nil ((#("L" 0 1 (face (markdown-bold-face) wrap-prefix "  " fontified t)) . 6840) (t 26349 49286 261195 198000)) ((6840 . 6841)) (26349 49295 144221 151000) 0 nil])
([nil nil ((#("*" 0 1 (face (markdown-markup-face) invisible markdown-markup wrap-prefix "  " fontified t)) . 6854)) nil (26349 49300 117040 672000) 0 nil])
nil
([nil nil ((6861 . 6862) 6854) nil (26349 49300 117034 210000) 0 nil])
([nil nil ((6964 . 6967) (6943 . 6964) (6934 . 6943) (#("cap" 0 3 (wrap-prefix "  " fontified t)) . -6934) (undo-tree-id6530 . -3) (undo-tree-id6531 . -1) (undo-tree-id6532 . -2) (undo-tree-id6533 . -1) (undo-tree-id6534 . -3) (undo-tree-id6535 . -2) (undo-tree-id6536 . -3) 6937 (6922 . 6937) (6901 . 6922) (6882 . 6901) (6861 . 6882) (t 26349 49300 133278 218000)) nil (26349 49390 926996 883000) 0 nil])
([nil nil ((#("s" 0 1 (wrap-prefix "  " fontified t)) . 6941) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1)) nil (26349 49390 926985 923000) 0 nil])
([nil nil ((6966 . 6967)) nil (26349 49390 926964 745000) 0 nil])
([nil nil ((6829 . 6836) (#("Stack" 0 1 (face markdown-header-face-1 markdown-heading-1-atx (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ") 1 2 (face markdown-header-face-1 markdown-heading-1-atx (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ") 2 3 (face markdown-header-face-1 markdown-heading-1-atx (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ") 3 4 (face markdown-header-face-1 markdown-heading-1-atx (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ") 4 5 (face markdown-header-face-1 markdown-heading-1-atx (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) markdown-heading (6813 6834 nil nil nil nil nil nil 6813 6815 6815 6834 6834 6834 #<buffer 2024-09-18-project2.markdown>) fontified t wrap-prefix "  ")) . 6829) (undo-tree-id7660 . -4) 6833 (t 26349 49390 949389 634000)) nil (26349 49638 639320 100000) 0 nil])
([nil nil ((6851 . 6858) (#("Stack" 0 5 (face (markdown-italic-face) wrap-prefix "  " fontified t)) . 6851) (undo-tree-id7659 . -3) 6854) nil (26349 49638 639319 108000) 0 nil])
([nil nil ((6945 . 6946)) nil (26349 49638 639318 96000) 0 nil])
([nil nil ((6959 . 6967)) nil (26349 49638 639317 786000) 0 nil])
([nil nil ((6979 . 6980)) nil (26349 49638 639317 435000) 0 nil])
([nil nil ((7023 . 7026) (7020 . 7024) (7014 . 7021) (6993 . 7014) (6980 . 6993) (#("At" 0 2 (fontified t wrap-prefix "  ")) . -6980) (undo-tree-id6537 . -2) (undo-tree-id6538 . -1) (undo-tree-id6539 . -2) (undo-tree-id6540 . -1) (undo-tree-id6541 . -2) (undo-tree-id6542 . -2) (undo-tree-id6543 . -2) (undo-tree-id6544 . -2) (undo-tree-id6545 . -2) (undo-tree-id6546 . -2) (undo-tree-id6547 . -2) (undo-tree-id6548 . -2) (undo-tree-id6549 . -2) (undo-tree-id6550 . -2) (undo-tree-id6551 . -2) (undo-tree-id6552 . -2) (undo-tree-id6553 . -2) (undo-tree-id6554 . -2) (undo-tree-id6555 . -2) (undo-tree-id6556 . -2) (undo-tree-id6557 . -2) (undo-tree-id6558 . -2) (undo-tree-id6559 . -2) (undo-tree-id6560 . -2) (undo-tree-id6561 . -2) (undo-tree-id6562 . -2) (undo-tree-id6563 . -2) (undo-tree-id6564 . -2) (undo-tree-id6565 . -2) (undo-tree-id6566 . -2) (undo-tree-id6567 . -2) (undo-tree-id6568 . -2) (undo-tree-id6569 . -2) (undo-tree-id6570 . -2) (undo-tree-id6571 . -2) (undo-tree-id6572 . -2) (undo-tree-id6573 . -2) (undo-tree-id6574 . -2) (undo-tree-id6575 . -2) (undo-tree-id6576 . -2) (undo-tree-id6577 . -2) (undo-tree-id6578 . -2) (undo-tree-id6579 . -2) (undo-tree-id6580 . -2) (undo-tree-id6581 . -2) (undo-tree-id6582 . -2) (undo-tree-id6583 . -2) (undo-tree-id6584 . -2) (undo-tree-id6585 . -2) (undo-tree-id6586 . -2) (undo-tree-id6587 . -2) (undo-tree-id6588 . -2) (undo-tree-id6589 . -2) (undo-tree-id6590 . -2) (undo-tree-id6591 . -2) (undo-tree-id6592 . -2) (undo-tree-id6593 . -2) (undo-tree-id6594 . -2) (undo-tree-id6595 . -2) (undo-tree-id6596 . -2) (undo-tree-id6597 . -2) (undo-tree-id6598 . -2) (undo-tree-id6599 . -2) (undo-tree-id6600 . -2) (undo-tree-id6601 . -2) (undo-tree-id6602 . -2) (undo-tree-id6603 . -2) (undo-tree-id6604 . -2) (undo-tree-id6605 . -2) (undo-tree-id6606 . -2) (undo-tree-id6607 . -2) (undo-tree-id6608 . -2) (undo-tree-id6609 . -2) (undo-tree-id6610 . -2) (undo-tree-id6611 . -2) (undo-tree-id6612 . -2) (undo-tree-id6613 . -2) (undo-tree-id6614 . -2) (undo-tree-id6615 . -2) (undo-tree-id6616 . -2) (undo-tree-id6617 . -2) (undo-tree-id6618 . -2) (undo-tree-id6619 . -2) (undo-tree-id6620 . -2) (undo-tree-id6621 . -2) (undo-tree-id6622 . -2) (undo-tree-id6623 . -2) (undo-tree-id6624 . -2) (undo-tree-id6625 . -2) (undo-tree-id6626 . -2) (undo-tree-id6627 . -2) (undo-tree-id6628 . -2) (undo-tree-id6629 . -2) (undo-tree-id6630 . -2) (undo-tree-id6631 . -2) (undo-tree-id6632 . -2) 6982 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6982) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) 6983 (#("each" 0 4 (fontified t wrap-prefix "  ")) . -6983) (undo-tree-id6724 . -4) (undo-tree-id6725 . -1) (undo-tree-id6726 . -2) (undo-tree-id6727 . -1) (undo-tree-id6728 . -3) (undo-tree-id6729 . -2) (undo-tree-id6730 . -4) (undo-tree-id6731 . -3) (undo-tree-id6732 . -4) (undo-tree-id6733 . -4) (undo-tree-id6734 . -4) (undo-tree-id6735 . -4) (undo-tree-id6736 . -4) (undo-tree-id6737 . -4) (undo-tree-id6738 . -4) (undo-tree-id6739 . -4) (undo-tree-id6740 . -4) (undo-tree-id6741 . -4) (undo-tree-id6742 . -4) (undo-tree-id6743 . -4) (undo-tree-id6744 . -4) (undo-tree-id6745 . -4) (undo-tree-id6746 . -4) (undo-tree-id6747 . -4) (undo-tree-id6748 . -4) (undo-tree-id6749 . -4) (undo-tree-id6750 . -4) (undo-tree-id6751 . -4) (undo-tree-id6752 . -4) (undo-tree-id6753 . -4) (undo-tree-id6754 . -4) (undo-tree-id6755 . -4) (undo-tree-id6756 . -4) (undo-tree-id6757 . -4) (undo-tree-id6758 . -4) (undo-tree-id6759 . -4) (undo-tree-id6760 . -4) (undo-tree-id6761 . -4) (undo-tree-id6762 . -4) (undo-tree-id6763 . -4) (undo-tree-id6764 . -4) (undo-tree-id6765 . -4) (undo-tree-id6766 . -4) (undo-tree-id6767 . -4) (undo-tree-id6768 . -4) (undo-tree-id6769 . -4) (undo-tree-id6770 . -4) (undo-tree-id6771 . -4) (undo-tree-id6772 . -4) (undo-tree-id6773 . -4) (undo-tree-id6774 . -4) (undo-tree-id6775 . -4) (undo-tree-id6776 . -4) (undo-tree-id6777 . -4) (undo-tree-id6778 . -4) (undo-tree-id6779 . -4) (undo-tree-id6780 . -4) (undo-tree-id6781 . -4) (undo-tree-id6782 . -4) (undo-tree-id6783 . -4) (undo-tree-id6784 . -4) (undo-tree-id6785 . -4) (undo-tree-id6786 . -4) (undo-tree-id6787 . -4) (undo-tree-id6788 . -4) (undo-tree-id6789 . -4) (undo-tree-id6790 . -4) (undo-tree-id6791 . -4) (undo-tree-id6792 . -4) (undo-tree-id6793 . -4) (undo-tree-id6794 . -4) (undo-tree-id6795 . -4) (undo-tree-id6796 . -4) (undo-tree-id6797 . -4) (undo-tree-id6798 . -4) (undo-tree-id6799 . -4) (undo-tree-id6800 . -4) (undo-tree-id6801 . -4) (undo-tree-id6802 . -4) (undo-tree-id6803 . -4) (undo-tree-id6804 . -4) (undo-tree-id6805 . -4) (undo-tree-id6806 . -4) (undo-tree-id6807 . -4) (undo-tree-id6808 . -4) (undo-tree-id6809 . -4) 6987 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6987) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -1) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (undo-tree-id6857 . -1) (undo-tree-id6858 . -1) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -1) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) 6988 (#("level" 0 5 (fontified t wrap-prefix "  ")) . -6988) (undo-tree-id6887 . -5) (undo-tree-id6888 . -1) (undo-tree-id6889 . -2) (undo-tree-id6890 . -1) (undo-tree-id6891 . -3) (undo-tree-id6892 . -2) (undo-tree-id6893 . -4) (undo-tree-id6894 . -3) (undo-tree-id6895 . -5) (undo-tree-id6896 . -4) (undo-tree-id6897 . -5) (undo-tree-id6898 . -5) (undo-tree-id6899 . -5) (undo-tree-id6900 . -5) (undo-tree-id6901 . -5) (undo-tree-id6902 . -5) (undo-tree-id6903 . -5) (undo-tree-id6904 . -5) (undo-tree-id6905 . -5) (undo-tree-id6906 . -5) (undo-tree-id6907 . -5) (undo-tree-id6908 . -5) (undo-tree-id6909 . -5) (undo-tree-id6910 . -5) (undo-tree-id6911 . -5) (undo-tree-id6912 . -5) (undo-tree-id6913 . -5) (undo-tree-id6914 . -5) (undo-tree-id6915 . -5) (undo-tree-id6916 . -5) (undo-tree-id6917 . -5) (undo-tree-id6918 . -5) (undo-tree-id6919 . -5) (undo-tree-id6920 . -5) (undo-tree-id6921 . -5) (undo-tree-id6922 . -5) (undo-tree-id6923 . -5) (undo-tree-id6924 . -5) (undo-tree-id6925 . -5) (undo-tree-id6926 . -5) (undo-tree-id6927 . -5) (undo-tree-id6928 . -5) (undo-tree-id6929 . -5) (undo-tree-id6930 . -5) (undo-tree-id6931 . -5) (undo-tree-id6932 . -5) (undo-tree-id6933 . -5) (undo-tree-id6934 . -5) (undo-tree-id6935 . -5) (undo-tree-id6936 . -5) (undo-tree-id6937 . -5) (undo-tree-id6938 . -5) (undo-tree-id6939 . -5) (undo-tree-id6940 . -5) (undo-tree-id6941 . -5) (undo-tree-id6942 . -5) (undo-tree-id6943 . -5) (undo-tree-id6944 . -5) (undo-tree-id6945 . -5) (undo-tree-id6946 . -5) (undo-tree-id6947 . -5) (undo-tree-id6948 . -5) (undo-tree-id6949 . -5) (undo-tree-id6950 . -5) (undo-tree-id6951 . -5) (undo-tree-id6952 . -5) (undo-tree-id6953 . -5) (undo-tree-id6954 . -5) (undo-tree-id6955 . -5) (undo-tree-id6956 . -5) (undo-tree-id6957 . -5) (undo-tree-id6958 . -5) 6993 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6993) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) 6994 (#("of" 0 2 (fontified t wrap-prefix "  ")) . -6994) (undo-tree-id7020 . -2) (undo-tree-id7021 . -1) (undo-tree-id7022 . -2) (undo-tree-id7023 . -1) (undo-tree-id7024 . -2) (undo-tree-id7025 . -2) (undo-tree-id7026 . -2) (undo-tree-id7027 . -2) (undo-tree-id7028 . -2) (undo-tree-id7029 . -2) (undo-tree-id7030 . -2) (undo-tree-id7031 . -2) (undo-tree-id7032 . -2) (undo-tree-id7033 . -2) (undo-tree-id7034 . -2) (undo-tree-id7035 . -2) (undo-tree-id7036 . -2) (undo-tree-id7037 . -2) (undo-tree-id7038 . -2) (undo-tree-id7039 . -2) (undo-tree-id7040 . -2) (undo-tree-id7041 . -2) (undo-tree-id7042 . -2) (undo-tree-id7043 . -2) (undo-tree-id7044 . -2) (undo-tree-id7045 . -2) (undo-tree-id7046 . -2) (undo-tree-id7047 . -2) (undo-tree-id7048 . -2) (undo-tree-id7049 . -2) (undo-tree-id7050 . -2) (undo-tree-id7051 . -2) (undo-tree-id7052 . -2) (undo-tree-id7053 . -2) (undo-tree-id7054 . -2) (undo-tree-id7055 . -2) (undo-tree-id7056 . -2) (undo-tree-id7057 . -2) (undo-tree-id7058 . -2) (undo-tree-id7059 . -2) (undo-tree-id7060 . -2) (undo-tree-id7061 . -2) (undo-tree-id7062 . -2) (undo-tree-id7063 . -2) (undo-tree-id7064 . -2) (undo-tree-id7065 . -2) (undo-tree-id7066 . -2) (undo-tree-id7067 . -2) (undo-tree-id7068 . -2) (undo-tree-id7069 . -2) (undo-tree-id7070 . -2) (undo-tree-id7071 . -2) (undo-tree-id7072 . -2) (undo-tree-id7073 . -2) (undo-tree-id7074 . -2) (undo-tree-id7075 . -2) 6996 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6996) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1) 6997 (#("the" 0 3 (fontified t wrap-prefix "  ")) . -6997) (undo-tree-id7127 . -3) (undo-tree-id7128 . -1) (undo-tree-id7129 . -2) (undo-tree-id7130 . -1) (undo-tree-id7131 . -3) (undo-tree-id7132 . -2) (undo-tree-id7133 . -3) (undo-tree-id7134 . -3) (undo-tree-id7135 . -3) (undo-tree-id7136 . -3) (undo-tree-id7137 . -3) (undo-tree-id7138 . -3) (undo-tree-id7139 . -3) (undo-tree-id7140 . -3) (undo-tree-id7141 . -3) (undo-tree-id7142 . -3) (undo-tree-id7143 . -3) (undo-tree-id7144 . -3) (undo-tree-id7145 . -3) (undo-tree-id7146 . -3) (undo-tree-id7147 . -3) (undo-tree-id7148 . -3) (undo-tree-id7149 . -3) (undo-tree-id7150 . -3) (undo-tree-id7151 . -3) (undo-tree-id7152 . -3) (undo-tree-id7153 . -3) (undo-tree-id7154 . -3) (undo-tree-id7155 . -3) (undo-tree-id7156 . -3) (undo-tree-id7157 . -3) (undo-tree-id7158 . -3) (undo-tree-id7159 . -3) (undo-tree-id7160 . -3) (undo-tree-id7161 . -3) (undo-tree-id7162 . -3) (undo-tree-id7163 . -3) (undo-tree-id7164 . -3) (undo-tree-id7165 . -3) (undo-tree-id7166 . -3) (undo-tree-id7167 . -3) (undo-tree-id7168 . -3) (undo-tree-id7169 . -3) (undo-tree-id7170 . -3) (undo-tree-id7171 . -3) (undo-tree-id7172 . -3) 7000 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -7000) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) 7001 (#("pyramid," 0 8 (fontified t wrap-prefix "  ")) . -7001) (undo-tree-id7212 . -8) (undo-tree-id7213 . -1) (undo-tree-id7214 . -2) (undo-tree-id7215 . -1) (undo-tree-id7216 . -3) (undo-tree-id7217 . -2) (undo-tree-id7218 . -4) (undo-tree-id7219 . -3) (undo-tree-id7220 . -5) (undo-tree-id7221 . -4) (undo-tree-id7222 . -6) (undo-tree-id7223 . -5) (undo-tree-id7224 . -7) (undo-tree-id7225 . -6) (undo-tree-id7226 . -7) (undo-tree-id7227 . -7) (undo-tree-id7228 . -8) (undo-tree-id7229 . -7) (undo-tree-id7230 . -8) (undo-tree-id7231 . -8) (undo-tree-id7232 . -8) (undo-tree-id7233 . -8) (undo-tree-id7234 . -8) (undo-tree-id7235 . -8) (undo-tree-id7236 . -8) (undo-tree-id7237 . -8) (undo-tree-id7238 . -8) (undo-tree-id7239 . -8) (undo-tree-id7240 . -8) (undo-tree-id7241 . -8) (undo-tree-id7242 . -8) (undo-tree-id7243 . -8) (undo-tree-id7244 . -8) (undo-tree-id7245 . -8) 7009 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -7009) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) 7010 (#("we" 0 2 (fontified t wrap-prefix "  ")) . -7010) (undo-tree-id7261 . -2) (undo-tree-id7262 . -1) (undo-tree-id7263 . -2) (undo-tree-id7264 . -1) (undo-tree-id7265 . -2) (undo-tree-id7266 . -2) (undo-tree-id7267 . -2) (undo-tree-id7268 . -2) (undo-tree-id7269 . -2) (undo-tree-id7270 . -2) 7012 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -7012) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) 7013 (7004 . 7013) (7001 . 7004) (6980 . 7001) (#("At" 0 2 (fontified t wrap-prefix "  ")) . -6980) (undo-tree-id7276 . -2) (undo-tree-id7277 . -2) (undo-tree-id7278 . -1) (undo-tree-id7279 . -2) (undo-tree-id7280 . -1) (undo-tree-id7281 . -2) (undo-tree-id7282 . -2) (undo-tree-id7283 . -2) (undo-tree-id7284 . -2) (undo-tree-id7285 . -2) (undo-tree-id7286 . -2) (undo-tree-id7287 . -2) (undo-tree-id7288 . -2) (undo-tree-id7289 . -2) (undo-tree-id7290 . -2) (undo-tree-id7291 . -2) (undo-tree-id7292 . -2) (undo-tree-id7293 . -2) (undo-tree-id7294 . -2) (undo-tree-id7295 . -2) (undo-tree-id7296 . -2) (undo-tree-id7297 . -2) (undo-tree-id7298 . -2) (undo-tree-id7299 . -2) (undo-tree-id7300 . -2) (undo-tree-id7301 . -2) (undo-tree-id7302 . -2) (undo-tree-id7303 . -2) (undo-tree-id7304 . -2) (undo-tree-id7305 . -2) (undo-tree-id7306 . -2) (undo-tree-id7307 . -2) (undo-tree-id7308 . -2) (undo-tree-id7309 . -2) (undo-tree-id7310 . -2) (undo-tree-id7311 . -2) (undo-tree-id7312 . -2) (undo-tree-id7313 . -2) (undo-tree-id7314 . -2) (undo-tree-id7315 . -2) (undo-tree-id7316 . -2) (undo-tree-id7317 . -2) (undo-tree-id7318 . -2) (undo-tree-id7319 . -2) (undo-tree-id7320 . -2) (undo-tree-id7321 . -2) (undo-tree-id7322 . -2) (undo-tree-id7323 . -2) (undo-tree-id7324 . -2) (undo-tree-id7325 . -2) (undo-tree-id7326 . -2) (undo-tree-id7327 . -2) (undo-tree-id7328 . -2) (undo-tree-id7329 . -2) (undo-tree-id7330 . -2) (undo-tree-id7331 . -2) (undo-tree-id7332 . -2) (undo-tree-id7333 . -2) (undo-tree-id7334 . -2) (undo-tree-id7335 . -2) (undo-tree-id7336 . -2) (undo-tree-id7337 . -2) (undo-tree-id7338 . -2) (undo-tree-id7339 . -2) 6982 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6982) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) 6983 (#("each" 0 4 (fontified t wrap-prefix "  ")) . -6983) (undo-tree-id7399 . -4) (undo-tree-id7400 . -4) (undo-tree-id7401 . -1) (undo-tree-id7402 . -2) (undo-tree-id7403 . -1) (undo-tree-id7404 . -3) (undo-tree-id7405 . -2) (undo-tree-id7406 . -4) (undo-tree-id7407 . -3) (undo-tree-id7408 . -4) (undo-tree-id7409 . -4) (undo-tree-id7410 . -4) (undo-tree-id7411 . -4) (undo-tree-id7412 . -4) (undo-tree-id7413 . -4) (undo-tree-id7414 . -4) (undo-tree-id7415 . -4) (undo-tree-id7416 . -4) (undo-tree-id7417 . -4) (undo-tree-id7418 . -4) (undo-tree-id7419 . -4) (undo-tree-id7420 . -4) (undo-tree-id7421 . -4) (undo-tree-id7422 . -4) (undo-tree-id7423 . -4) (undo-tree-id7424 . -4) (undo-tree-id7425 . -4) (undo-tree-id7426 . -4) (undo-tree-id7427 . -4) (undo-tree-id7428 . -4) (undo-tree-id7429 . -4) (undo-tree-id7430 . -4) (undo-tree-id7431 . -4) (undo-tree-id7432 . -4) (undo-tree-id7433 . -4) (undo-tree-id7434 . -4) (undo-tree-id7435 . -4) (undo-tree-id7436 . -4) (undo-tree-id7437 . -4) (undo-tree-id7438 . -4) (undo-tree-id7439 . -4) (undo-tree-id7440 . -4) (undo-tree-id7441 . -4) (undo-tree-id7442 . -4) (undo-tree-id7443 . -4) (undo-tree-id7444 . -4) (undo-tree-id7445 . -4) (undo-tree-id7446 . -4) (undo-tree-id7447 . -4) (undo-tree-id7448 . -4) (undo-tree-id7449 . -4) (undo-tree-id7450 . -4) (undo-tree-id7451 . -4) (undo-tree-id7452 . -4) 6987 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6987) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) (undo-tree-id7461 . -1) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) 6988 (#("level" 0 5 (fontified t wrap-prefix "  ")) . -6988) (undo-tree-id7498 . -5) (undo-tree-id7499 . -5) (undo-tree-id7500 . -1) (undo-tree-id7501 . -2) (undo-tree-id7502 . -1) (undo-tree-id7503 . -3) (undo-tree-id7504 . -2) (undo-tree-id7505 . -4) (undo-tree-id7506 . -3) (undo-tree-id7507 . -5) (undo-tree-id7508 . -4) (undo-tree-id7509 . -5) (undo-tree-id7510 . -5) (undo-tree-id7511 . -5) (undo-tree-id7512 . -5) (undo-tree-id7513 . -5) (undo-tree-id7514 . -5) (undo-tree-id7515 . -5) (undo-tree-id7516 . -5) (undo-tree-id7517 . -5) (undo-tree-id7518 . -5) (undo-tree-id7519 . -5) (undo-tree-id7520 . -5) (undo-tree-id7521 . -5) (undo-tree-id7522 . -5) (undo-tree-id7523 . -5) (undo-tree-id7524 . -5) (undo-tree-id7525 . -5) (undo-tree-id7526 . -5) (undo-tree-id7527 . -5) (undo-tree-id7528 . -5) (undo-tree-id7529 . -5) (undo-tree-id7530 . -5) (undo-tree-id7531 . -5) (undo-tree-id7532 . -5) (undo-tree-id7533 . -5) (undo-tree-id7534 . -5) (undo-tree-id7535 . -5) (undo-tree-id7536 . -5) (undo-tree-id7537 . -5) 6993 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6993) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) 6994 (#("of" 0 2 (fontified t wrap-prefix "  ")) . -6994) (undo-tree-id7567 . -2) (undo-tree-id7568 . -2) (undo-tree-id7569 . -1) (undo-tree-id7570 . -2) (undo-tree-id7571 . -1) (undo-tree-id7572 . -2) (undo-tree-id7573 . -2) (undo-tree-id7574 . -2) (undo-tree-id7575 . -2) (undo-tree-id7576 . -2) (undo-tree-id7577 . -2) (undo-tree-id7578 . -2) (undo-tree-id7579 . -2) (undo-tree-id7580 . -2) (undo-tree-id7581 . -2) (undo-tree-id7582 . -2) (undo-tree-id7583 . -2) (undo-tree-id7584 . -2) (undo-tree-id7585 . -2) (undo-tree-id7586 . -2) (undo-tree-id7587 . -2) (undo-tree-id7588 . -2) (undo-tree-id7589 . -2) (undo-tree-id7590 . -2) 6996 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6996) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) 6997 (#("the" 0 3 (fontified t wrap-prefix "  ")) . -6997) (undo-tree-id7610 . -3) (undo-tree-id7611 . -1) (undo-tree-id7612 . -2) (undo-tree-id7613 . -1) (undo-tree-id7614 . -3) (undo-tree-id7615 . -2) (undo-tree-id7616 . -3) (undo-tree-id7617 . -3) (undo-tree-id7618 . -3) (undo-tree-id7619 . -3) (undo-tree-id7620 . -3) 7000 (#(" " 0 1 (fontified t wrap-prefix "  ")) . -7000) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) 7001 (6980 . 7001) (6979 . 6980) (#(" " 0 1 (fontified t wrap-prefix "  ")) . -6979) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (#(" " 0 1 (face (markdown-line-break-face) fontified t wrap-prefix "  ")) . -6980) (undo-tree-id7646 . 1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) 6981) nil (26349 49638 639286 55000) 0 nil])
([nil nil ((7028 . 7030)) nil (26349 49638 631329 256000) 0 nil])
([nil nil ((7005 . 7019) (t 26349 49638 655054 389000)) nil (26349 49659 879696 950000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t wrap-prefix "  ")) . 7018) (undo-tree-id7661 . 1)) nil (26349 49659 879695 628000) 0 nil])
([nil nil ((7041 . 7042) (#(")" 0 1 (fontified nil wrap-prefix "  ")) . -7041) (7041 . 7042)) nil (26349 49659 879676 872000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7074) (7074 . 7075) (#(")" 0 1 (fontified nil wrap-prefix "  ")) . -7074) (7074 . 7075) (7062 . 7075) (7053 . 7062) (7044 . 7053) (t 26349 49659 898259 454000)) nil (26349 49719 652884 844000) 0 nil])
([nil nil ((7078 . 7080) (#(" " 0 1 (fontified t wrap-prefix "  ")) . -7078) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (#("-" 0 1 (fontified t wrap-prefix "  ")) . -7079) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) 7080 (7077 . 7080) (#("P" 0 1 (fontified t wrap-prefix "  ")) . -7077) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) 7078 (7077 . 7078) (7076 . 7078) (#("i" 0 1 (fontified t wrap-prefix "  ")) . -7076) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) 7077 (#("{" 0 1 (fontified nil wrap-prefix "  ")) . -7077) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (#("}" 0 1 (fontified t wrap-prefix "  ")) . 7078) (7074 . 7079)) nil (26349 49719 652879 935000) 0 nil])
([nil nil ((7083 . 7084) (7082 . 7083)) nil (26349 49719 648017 86000) 0 nil])
([nil nil ((7116 . 7135) (#("l" 0 1 (fontified t wrap-prefix "  ")) . -7116) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (#("a" 0 1 (fontified t wrap-prefix "  ")) . -7117) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) 7118 (7116 . 7118) (7107 . 7116) (#("{" 0 1 (fontified nil wrap-prefix "  ")) . -7107) (undo-tree-id7789 . -1) (#("}" 0 1 (fontified t wrap-prefix "  ")) . 7108) (7097 . 7109) (#("q" 0 1 (fontified t wrap-prefix "  ")) . -7097) (undo-tree-id7790 . -1) 7098 (7093 . 7098) (#("$" 0 1 (fontified t wrap-prefix "  ")) . -7093) (undo-tree-id7791 . -1) 7094 (7084 . 7094) (t 26349 49719 669825 659000)) nil (26349 49822 593348 900000) 0 nil])
([nil nil ((7274 . 7276) (7271 . 7274) (7250 . 7271) (7229 . 7250) (7222 . 7229) (7201 . 7222) (#("write " 0 6 (fontified t wrap-prefix "  ")) . -7201) (undo-tree-id7765 . -6) (undo-tree-id7766 . -1) (undo-tree-id7767 . -2) (undo-tree-id7768 . -1) (undo-tree-id7769 . -3) (undo-tree-id7770 . -2) (undo-tree-id7771 . -4) (undo-tree-id7772 . -3) (undo-tree-id7773 . -5) (undo-tree-id7774 . -4) (undo-tree-id7775 . -6) (undo-tree-id7776 . -5) (undo-tree-id7777 . -6) (undo-tree-id7778 . -6) 7207 (7188 . 7207) (7172 . 7188) (7151 . 7172) (7135 . 7151)) nil (26349 49822 593338 600000) 0 nil])
([nil nil ((7273 . 7276) (#(":" 0 1 (fontified t wrap-prefix "  ")) . -7273) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (#("
" 0 1 (fontified t wrap-prefix "  ")) . -7274) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (#("
" 0 1 (fontified t wrap-prefix "  ")) . -7275) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) 7276) nil (26349 49822 593326 186000) 0 nil])
([nil nil ((7293 . 7294) (#("1" 0 1 (fontified t wrap-prefix "  ")) . -7293) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) 7294 (7291 . 7294) (7289 . 7292) (#("_" 0 1 (fontified t wrap-prefix "  ")) . -7289) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) 7290 (7275 . 7290)) nil (26349 49822 593284 648000) 0 nil])
([nil nil ((7297 . 7298) (7295 . 7298) (#("%" 0 1 (fontified t wrap-prefix "  ")) . -7295) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) 7296 (7295 . 7296)) nil (26349 49822 593278 556000) 0 nil])
([nil nil ((7302 . 7303) (7299 . 7302)) nil (26349 49822 593274 709000) 0 nil])
([nil nil ((7302 . 7303) (#("j" 0 1 (fontified t wrap-prefix "  ")) . -7302) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) 7303) nil (26349 49822 593267 235000) 0 nil])
([nil nil ((7273 . 7274) (t 26349 49822 608798 774000)) nil (26349 49837 2221 184000) 0 nil])
([nil current ((7305 . 7307) (t 26349 49837 20935 18000)) nil (26349 49884 144468 150000) 0 nil])
([nil nil ((7046 . 7047) (#("	" 0 1 (fontified t wrap-prefix "      ")) . -7046) (undo-tree-id7792 . -1) (undo-tree-id7794 . -1) 7047 (7046 . 7047) (7045 . 7046) (t 26349 49858 379136 926000)) ((#("
" 0 1 (fontified nil wrap-prefix "  ")) . 7045) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (#("	" 0 1 (fontified nil wrap-prefix "      ")) . 7046) (undo-tree-id7803 . -1) (7046 . 7047) (#("
" 0 1 (fontified t wrap-prefix "  ")) . 7046) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (t 26349 49878 730329 305000)) (26349 49878 712722 294000) 0 nil])
nil
